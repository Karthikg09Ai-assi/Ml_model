Universal Serial Bus Power Delivery Specification

Revision: 2.0
Version: 1.3
Release Date: 12 January 2017

Contributors
Editors:

Bob Dunstan, Renesas Electronics Corp.
Richard Petrie, DisplayLink
Contributors:

Charles Wang, ACON, Advanced-Connectek, Inc.
Conrad Choy, ACON, Advanced-Connectek, Inc.
Steve Sedio, ACON, Advanced-Connectek, Inc.
Vicky Chuang, ACON, Advanced-Connectek, Inc.
Joseph Scanlon, Advanced Micro Devices
Caspar Lin, Allion Labs, Inc.
Casper Lee, Allion Labs, Inc.
Howard Chang, Allion Labs, Inc.
Greg Stewart, Analogix Semiconductor, Inc.
Mehran Badii, Analogix Semiconductor, Inc.
Bill Cornelius, Apple
Colin Whitby-Strevens, Apple
Corey Axelowitz, Apple
Corey Lange, Apple
Dave Conroy, Apple
David Sekowski, Apple
Girault Jones, Apple
James Orr, Apple
Jason Chung, Apple
Jennifer Tsai, Apple
Karl Bowers, Apple
Keith Porthouse, Apple
Matt Mora, Apple
Paul Baker, Apple
Reese Schreiber, Apple
Sameer Kelkar, Apple
Sasha Tietz, Apple
Scott Jackson, Apple
Sree Raman, Apple
William Ferry, Apple
Zaki Moussaoui, Apple
Bernard Shyu, Bizlink Technology, Inc.
Eric Wu, Bizlink Technology, Inc.
Morphy Hsieh, Bizlink Technology, Inc.
Shawn Meng, Bizlink Technology Inc.
Tiffany Hsiao, Bizlink Technology, Inc.
Weichung Ooi, Bizlink Technology, Inc.
Michal Staworko, Cadence Design Systems, Inc.
Alessandro Ingrassia, Canova Tech
Andrea Colognese, Canova Tech
Davide Ghedin, Canova Tech
Matteo Casalin, Canova Tech
Nicola Scantamburlo, Canova Tech
Yi-Feng Lin, Canyon Semiconductor
YuHung Lin, Canyon Semiconductor
Revision History
Revision: 1.0
Version: 1.0
Comments: Initial release
Issue Date: 5 July, 2012

Revision: 1.0
Version: 1.1
Comments: Including updates
Issue Date: [Date missing]

Revision History

Version 1.0

Comments: Including errata through 31-October-2012
Issue Date: 31 October 2012
Version 1.2

Comments: Including errata through 26-June-2013
Issue Date: 26 June 2013
Version 1.3

Comments: Including errata through 11-March-2014
Issue Date: 11 March 2014
Version 2.0

Comments: Initial release
Issue Date: 11 August 2014
Version 2.1

Comments: Including errata through 7-May-2015
Issue Date: 7 May 2015
Version 2.2

Comments: Including errata through 25-March-2016
Issue Date: 25 March 2016
Version 2.3

Comments: Including errata through 12-January-2017
Issue Date: 12 January 2017
INTELLECTUAL PROPERTY DISCLAIMER

THIS SPECIFICATION IS PROVIDED TO YOU “AS IS” WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY WARRANTY OF MERCHANTABILITY, NON-INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE. THE AUTHORS OF THIS SPECIFICATION DISCLAIM ALL LIABILITY, INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, RELATING TO USE OR IMPLEMENTATION OF INFORMATION IN THIS SPECIFICATION. THE PROVISION OF THIS SPECIFICATION TO YOU DOES NOT PROVIDE YOU WITH ANY LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE, TO ANY INTELLECTUAL PROPERTY RIGHTS.

Please send comments via electronic mail to techsup@usb.org. For industry information, refer to the USB Implementers Forum web page at http://www.usb.org.

All product names are trademarks, registered trademarks, or service marks of their respective owners.
Copyright © 2010-2017 Apple Inc, Hewlett-Packard Company, Intel Corporation, Microsoft Corporation, Renesas, STMicroelectronics, and Texas Instruments. All rights reserved.

Table of Contents

Editors ......................................................... 2
Contributors ............................................. 2
Revision History ....................................... 9
INTELLECTUAL PROPERTY DISCLAIMER ..... 10
Table of Contents ....................................... 11
List of Tables .............................................. 21
List of Figures ............................................. 27
1. Introduction

1.1 Overview
1.2 Purpose
1.3 Scope
1.4 Conventions

Precedence
Keywords
Numbering
1.5 Related Documents
1.6 Terms and Abbreviations
1.7 Parameter Values

2. Overview

2.1 Introduction
2.2 Section Overview
2.3 USB Power Delivery Capable Devices
2.4 SOP Communication*

Introduction
SOP Collision Avoidance*
SOP Communication
SOP’/SOP’’ Communication with Cable Plugs
2.5 Operational Overview

Source Operation
Sink Operation
Cable Plugs

2.5.3 Architectural Overview
2.6 Policy
2.6.1 Message Formation and Transmission
2.6.2 Collision Avoidance
2.6.3 Power Supply
2.6.4 DFP/UFP
2.6.5 VCONN Source
2.6.6 Cable and Connectors
2.6.7 Interactions between Non-PD, BC, and PD Devices
2.6.8 Power Rules

3. USB Type-A and USB Type-B Cable Assemblies and Connectors
3.1 Significant Features
3.1.1 Connectors
3.1.2 Compliant Cable Assemblies
3.1.3 USB Power Delivery Adapters (USB Plug to USB Receptacle)
3.1.4 Hardwired Captive PD Cable
3.1.5 Standard-A Insertion Detect
3.1.6 Standard-A PD Detect
3.1.7 Raw Cables

3.2 Connector Mating Interfaces
3.2.1 Standard-A Insertion Detect Mechanical Dimensions
3.2.2 USB PD Standard-A PD Detect Mechanical Requirement
3.2.3 USB 2.0 PD Standard-A Connector
3.2.4 USB 3.1 PD Standard-A Connector
3.2.5 USB 2.0 PD Standard-B Connector
3.2.6 USB 3.1 PD Standard-B Connector

3.3 Cable Assemblies
3.3.1 Non-marked Cable Assemblies
3.3.2 Marked Cable Assemblies
3.3.3 PD Cable Assembly Overmold Requirements

3.4 PD Cable Assembly Marking
3.4.1 Marker for PD Standard-A Connectors
3.4.2 Electronic Markers for Micro-A Plugs
3.4.3 Electronic Markers for PD Standard-B Plugs and Micro-B Plugs

3.5 USB PD Icon
3.6 USB Power Delivery Cable Requirements
3.6.1 Low-Level Contact Resistance (EIA 364-23B)
3.6.2 Open Circuit Resistance
3.6.3 Dielectric Strength (EIA 364-20)
3.6.4 Insulation Resistance (EIA 364-21)
3.6.5 Contact Current Rating
3.6.6 Differential Crosstalk between VBUS and the D+/D- Pair (EIA-360-90)
3.6.7 PD Cable Assembly Shielding Connectivity
3.6.8 PD Cable VBUS Impedance
3.6.9 PD Cable Insertion Loss
3.6.10 PD Cable IR Drop Considerations

3.7 Electrical Parameters

4. Electrical Requirements
4.1 Interoperability with other USB Specifications
4.2 Dead Battery Detection / Unpowered Port Detection
4.2.1 Type-A to USB Type-B Dead Battery Operation
4.2.2 Type-C to USB Type-C Dead Battery Operation
4.3 Cable IR Ground Drop (IR Drop)
4.4 A-Plug Insertion Detect
4.5 Cable Type Detection
4.5.1 Detecting Cabling Capabilities
4.5.2 Plug Type Determination
4.5.3 Detecting the PD Capabilities of the Standard-A Connector
4.5.4 Plug Type Detection except Standard-A
4.6 Low Power Devices using Micro-A Plug
4.7 Electrical Parameters

5. Physical Layer
5.1 Physical Layer Overview
5.2 Physical Layer Functions
5.3 Symbol Encoding
5.4 Ordered Sets
5.5 Transmitted Bit Ordering
5.6 Packet Format
5.6.1 Packet Framing
5.6.2 CRC
5.6.3 Packet Detection Errors
5.6.4 Hard Reset
5.6.5 Cable Reset

5.7 Collision Avoidance
5.8 Physical Layer Signaling Schemes
5.8.1 Common Signaling Scheme Specifications
5.8.2 Binary Frequency Shift Keyed (BFSK) Signaling Scheme
5.8.3 Biphase Mark Coding (BMC) Signaling Scheme
5.8.4 Interoperability with BFSK and BMC

5.9 Built-in Self-Test (BIST)
5.9.1 BIST PRBS Pattern
5.9.2 BIST Carrier Mode 0
5.9.3 BIST Carrier Mode 1
5.9.4 BIST Carrier Mode 2
5.9.5 BIST Carrier Mode 3
5.9.6 BIST Eye Pattern
5.9.7 BIST Test Data
5.9.8 BIST Parameters
5.9.9 BIST Test Applicability

6. Protocol Layer
6.1 Overview
6.2 Messages

6.1 Message Construction 
-This section details how messages are constructed within the USB Power Delivery specification. The construction of messages involves defining the structure, format, and encoding of various message types used in USB Power Delivery communication.

6.2 Control Message 
- 6.2.1 GoodCRC Message  
  - This message is used to indicate that the previous message was received correctly. It is a part of the control messages that ensure data integrity during communication.

6.2.2 GotoMin Message  
  - Used to instruct a device to reduce its power consumption to the minimum level. This message helps in power management by controlling the power levels of connected devices.

6.2.3 Accept Message
  - Sent by a device to indicate that it has accepted a particular power request or negotiation. It is crucial for the power negotiation process between devices.

6.2.4 Reject Message
  - Indicates that a device has rejected a power request or negotiation. This message helps in communicating the refusal of a proposed power configuration.

6.2.5 Ping Message  
  - A message used to check if a device is still present and responsive. It is essential for maintaining communication integrity.

6.2.6 PS_RDY Message
  - Sent by a power source to indicate that it is ready to provide power. This message is part of the power delivery handshake.

6.2.7 Get_Source_Cap Message
  - A request message used to obtain the capabilities of a power source, such as the power levels it can supply.

6.2.8 Get_Sink_Cap Message  
  - A request to obtain the capabilities of a power sink, such as the power levels it can accept.

6.2.9 DR_Swap Message 
  - A message used to request a swap of the direction of power flow. This is useful for changing the roles of devices in a power delivery system.

6.2.10 PR_Swap Message  
  - A request to swap power roles between devices, such as changing which device is the power source and which is the sink.

6.2.11 VCONN_Swap Message  
  - A message used to swap the VCONN power role, which can involve changing the role of the device supplying power to the cable.

6.2.12 Wait Message  
  - Sent to request a delay before continuing with the next operation. This message helps in managing timing and sequencing in power delivery operations.

6.2.13 Soft Reset Message 
  - Used to initiate a soft reset of a device, allowing it to reset its internal state without completely powering off.

6.4 Data Message  
- 6.4.1 Capabilities Message  
  - Communicates the capabilities of a device, including its power delivery capabilities and other relevant features.

-6.4.2 Request Message 
  - Used to request specific actions or information from another device. It forms part of the data message communication.

-6.4.3 BIST Message  
  - Built-In Self-Test (BIST) message used to perform internal testing of devices to ensure their functionality.

-6.4.4 Vendor Defined Message
  - A message type that allows vendors to define their custom messages for specific purposes not covered by standard messages.

6.5 Timers 
-6.5.1 CRCReceiveTimer  
  - Timer used to manage the reception of CRC (Cyclic Redundancy Check) data to ensure message integrity.

-6.5.2 SenderResponseTimer 
  - Timer used to wait for a response from the sender of a message.

-6.5.3 Activity Timers 
  - Timers used to monitor and manage activity levels in the communication process.

-6.5.4 Capability Timers  
  - Timers related to managing the capabilities exchange between devices.

-6.5.5 Wait Timers and Times  
  - Timers used to manage delays and waiting periods during communication.

-6.5.6 Power Supply Timers  
  - Timers related to power supply operations, such as managing power state transitions.

-6.5.7 NoResponseTimer  
  - Timer used to detect if there is no response from a device, indicating a potential issue.

-6.5.8 BIST Timers
  - Timers used during Built-In Self-Test operations to ensure proper functionality.

-6.5.9 Power Role Swap Timers 
  - Timers used to manage the timing of power role swaps between devices.

-6.5.10 Soft Reset Timers 
  - Timers used to manage the timing of soft reset operations.

-6.5.11 Hard Reset Timers 
  - Timers used to manage the timing of hard reset operations.

-6.5.12 Structured VDM Timers  
  - Timers related to Structured Vendor Defined Messages (VDM) for managing their operations.

-6.5.13 VCONN Timers  
  - Timers related to the VCONN power role operations.

-6.5.14 tCableMessage  
  - Timer related to cable messages, managing their timing and sequencing.

-6.5.15 DiscoverIdentityTimer  
  - Timer used during the discovery of device identities.

-6.5.16 Attention Timers 
  - Timers related to managing attention signals and messages.

-6.5.17 Time Values and Timers 
  - Various time values and timers used throughout the specification.

6.6 Counters
- 6.6.1 MessageID Counter
  - Counter used to keep track of message identifiers for communication.

- 6.6.2 Retry Counter 
  - Counter used to manage retry attempts for messages.

-6.6.3 Hard Reset Counter  
  - Counter used to track hard reset operations.

-6.6.4 Capabilities Counter  
  - Counter used to manage capabilities exchanges between devices.

- 6.6.5 BIST Error Counter  
  - Counter used to track errors during Built-In Self-Test operations.

-6.6.6 Discover Identity Counter  
  - Counter used during the discovery of device identities.

- 6.6.7 VDMBusyCounter  
  - Counter used to manage busy states during Vendor Defined Messages.

-6.6.8 nAttentionCount  
  - Counter used to manage attention signals.

-6.6.9 Counter Values and Counters 
  - Various counter values and their management.

6.7 Reset
- 6.7.1 Soft Reset and Protocol Error 
  - Managing soft resets and protocol errors, including their implications and procedures.

- 6.7.2 Hard Reset  
  - Procedures and implications of hard resets in the system.

- 6.7.3 Cable Reset  
  - Procedures for resetting the cable and its impact on communication.

6.8 Message Discarding  
- Procedures and rules for discarding messages that are not valid or required.

6.9 State Behavior  
- 6.9.1 Introduction to State Diagrams Used in Chapter 6 
  - Overview of state diagrams used for understanding state behaviors.

-6.9.2 State Operation  
  - Details on how different states operate within the system.

-6.9.3 BIST Operation  
  - Operation of Built-In Self-Test (BIST) states and their management.

-6.9.4 List of Protocol Layer States  
  - Comprehensive list of all states used in the protocol layer.

6.10 Message Applicability
-6.10.1 Applicability of Control Messages  
  - How control messages are applied and used in different scenarios.

-6.10.2 Applicability of Data Messages  
  - Applicability and usage of data messages.

-6.10.3 Applicability of Structured VDM Commands  
  - Usage and applicability of Structured Vendor Defined Message (VDM) commands.

- 6.10.4 Applicability of Reset Signaling  
  - How reset signaling is applied and used.

7. Power Supply  
- 7.1 Source Requirements
  - 7.1.1 Behavioral Aspects  
    - Behavioral aspects of power sources, including how they should operate.

  -7.1.2 Source Bulk Capacitance 
    - Requirements for bulk capacitance in power sources.

  - 7.1.3 Types of Sources  
    - Different types of power sources and their characteristics.

  - 7.1.4 Positive Voltage Transitions  
    - Handling and requirements for positive voltage transitions.

  - 7.1.5 Negative Voltage Transitions  
    - Handling and requirements for negative voltage transitions.

  - 7.1.6 Response to Hard Resets  
    - How power sources should respond to hard resets.

  - 7.1.7 Changing the Output Power Capability  
    - Procedures for changing the output power capability of a source.

  - 7.1.8 Robust Source Operation  
    - Requirements for ensuring robust operation of power sources.

  - 7.1.9 Output Voltage Tolerance and Range  
    - Specifications for output voltage tolerance and range.

  - 7.1.10 Charging and Discharging the Bulk Capacitance on VBUS 
   

 - Procedures for charging and discharging bulk capacitance on VBUS.

  -7.1.11 Swap Standby for Sources 
    - Procedures for managing swap standby states for sources.

  -7.1.12 Source Peak Current Operation  
    - Requirements for peak current operation in sources.

  - 7.1.13 BFSK over VBUS Considerations for Sources 
    - Considerations for BFSK (Binary Frequency Shift Keying) over VBUS for sources.

  -7.1.14 Application of VBUS Slew Rate Limits  
    - Application and management of VBUS slew rate limits.

- 7.2 Sink Requirements  
  - 7.2.1 Behavioral Aspects 
    - Behavioral aspects of power sinks, including operation and performance.

  -7.2.2 Sink Bulk Capacitance 
    - Requirements for bulk capacitance in power sinks.

  -7.2.3 Sink Standby  
    - Management of standby states for power sinks.

  - 7.2.4 Suspend Power Consumption  
    - Power consumption requirements during suspend states.

  - 7.2.5 Zero Negotiated Current
    - Handling of zero negotiated current conditions.

  - 7.2.6 Transient Load Behavior
    - Behavior of power sinks under transient load conditions.

  - 7.2.7 Swap Standby for Sinks  
    - Procedures for managing swap standby states for sinks.

  -7.2.8 Sink Peak Current Operation  
    - Requirements for peak current operation in sinks.

  -7.2.9 BFSK over VBUS Considerations for Sinks 
    - Considerations for BFSK (Binary Frequency Shift Keying) over VBUS for sinks.

 7.2.10 Robust Sink Operation 
    - Ensuring robust operation of power sinks.

- 7.3 Transitions  
  -7.3.1 Increasing the Current  
    - Procedures and requirements for increasing the current.

7.3.2 Increasing the Voltage  
    - Procedures and requirements for increasing the voltage.

7.3.3 Increasing the Voltage and Current 
    - Procedures and requirements for increasing both voltage and current.

7.3.4 Increasing the Voltage and Decreasing the Current 
    - Procedures and requirements for increasing voltage while decreasing current.

7.3.5 Decreasing the Voltage and Increasing the Current
    - Procedures and requirements for decreasing voltage while increasing current.

7.3.6 Decreasing the Current  
    - Procedures and requirements for decreasing the current.

7.3.7 Decreasing the Voltage 
    - Procedures and requirements for decreasing the voltage.
7.3.8 Sink Requested Power Role Swap

Discusses the procedure and specifications for when a sink requests a power role swap.
7.3.9 Source Requested Power Role Swap

Details the procedure and specifications for when a source requests a power role swap.
7.3.10 GotoMin Current Decrease

Outlines the requirements and considerations for decreasing current to the minimum level.
7.3.11 Source Initiated Hard Reset

Procedures and specifications for a hard reset initiated by the source.
7.3.12 Sink Initiated Hard Reset

Procedures and specifications for a hard reset initiated by the sink.
7.3.13 Type-A/B Hard Reset after a Power Role Swap

Describes the procedures and requirements for performing a hard reset after a power role swap involving Type-A/B connectors.
7.3.14 Type-A to USB Type-B Dead Battery Operation

Details the procedures for dead battery operation detection between Type-A and USB Type-B connections.
7.3.15 No Change in Current or Voltage

Discusses scenarios and requirements when there is no change in current or voltage.
7.4 Electrical Parameters

7.4.1 Source Electrical Parameters

Specifications for electrical parameters of the source.
7.4.2 Sink Electrical Parameters

Specifications for electrical parameters of the sink.
7.4.3 Common Electrical Parameters

Common electrical parameters applicable to both source and sink.
8. Device Policy

8.1 Overview

Provides an overview of device policy management within USB Power Delivery.
8.2 Device Policy Manager

8.2.1 Capabilities

Describes the capabilities of the device policy manager.
8.2.2 System Policy

Details on system-level policies for USB Power Delivery.
8.2.3 Control of Source/Sink

Information on controlling the source and sink devices.
8.2.4 Cable Detection

Procedures and specifications for detecting cables.
8.2.5 Managing Power Requirements

Guidelines for managing power requirements.
8.2.6 Use of “Unconstrained Power” Bit with Batteries and AC Supplies

Details on the use of the "Unconstrained Power" bit in different power supply scenarios.
8.2.7 Interface to the Policy Engine

Specifications for interfacing with the policy engine.
8.3 Policy Engine

8.3.1 Introduction

Introduction to the policy engine and its role.
8.3.2 Atomic Message Sequence Diagrams

Diagrams illustrating atomic message sequences in the policy engine.
8.3.3 State Diagrams

State diagrams representing various states and transitions in the policy engine.
9. States and Status Reporting

9.1 Overview

Overview of states and status reporting in USB Power Delivery.
9.1.1 PDUSB Device and Hub Requirements

Requirements for PDUSB devices and hubs.
9.1.2 Mapping to USB Device States

Mapping of USB Power Delivery states to USB device states.
9.1.3 PD Software Stack

Details on the PD software stack and its components.
9.1.4 PDUSB Device Enumeration

Specifications and procedures for enumerating PDUSB devices.
9.2 PD Specific Descriptors

9.2.1 USB Power Delivery Capability Descriptor

Details on the USB Power Delivery capability descriptor.
9.2.2 Battery Info Capability Descriptor

Information on the battery info capability descriptor.
9.2.3 PD Consumer Port Capability Descriptor

Describes the PD consumer port capability descriptor.
9.2.4 PD Provider Port Capability Descriptor

Information on the PD provider port capability descriptor.
9.3 PD Specific Requests and Events

9.3.1 PD Specific Requests
Details on specific requests within USB Power Delivery.
9.4 PDUSB Hub and PDUSB Peripheral Device Requests

9.4.1 GetBatteryStatus

Specifications for the GetBatteryStatus request.
9.4.2 SetPDFeature

Details on the SetPDFeature request.
10. Power Rules

10.1 Introduction

Introduction to power rules within USB Power Delivery.
10.2 Source Power Rules

10.2.1 Source Power Rule Considerations

Considerations for source power rules.
10.2.2 Normative Voltages and Currents

Specifications for normative voltages and currents.
10.2.3 Optional Voltages/Currents

Details on optional voltages and currents.
10.2.4 Power Sharing Between Ports

Guidelines for power sharing between different ports.
10.3 Sink Power Rules

10.3.1 Sink Power Rule Considerations

Considerations for sink power rules.
10.3.2 Normative Sink Rules

Specifications for normative sink rules.
A. Power Profiles – This Section is Deprecated

Note that this section is deprecated.
B. CRC Calculation

B.1 C Code Example
Example of CRC calculation in C code.

B.2 Table Showing the Full Calculation Over One Message

Table providing a detailed CRC calculation for one message.
C. Power Implementation Considerations

C.1 Managing Isolation Impedance (BFSK)

C.1.1 In-band fCarrier Spurious Noise
Information on in-band carrier spurious noise.

C.1.2 Spurious Noise Test Setup and Calibration

Setup and calibration procedures for spurious noise testing.
C.2 Connector Detach Transients

Details on transients occurring when a connector is detached.
C.3 Closed Loop Stability Effects

C.3.1 Basic Power Stage Small Signal AC Model
Description of the basic power stage small signal AC model.

C.3.2 Feedback Past Isolation Inductor

Details on feedback past isolation inductor effects.
D. Standard-A Mating Illustrations

Illustrations for mating Standard-A connectors.
E. Physical Layer Informative Material

E.1 Squelch Budget
Details on squelch budget considerations in the physical layer.
F. PD Message Sequence Examples

F.1 External Power is Supplied Downstream

Examples of message sequences when external power is supplied downstream.
F.2 External Power is Supplied Upstream

Examples of message sequences when external power is supplied upstream.
F.3 Giving Back Power

Details on the process of giving back power.
G. VDM Command Examples

G.1 Discover Identity Example

G.1.1 Discover Identity Command Request
Example of Discover Identity command request.

G.1.2 Discover Identity Command Response – Active Cable

Example response for Discover Identity command with an active cable.
G.1.3 Discover Identity Command Response – Hub

Example response for Discover Identity command with a hub.
G.2 Discover SVIDs Example

G.2.1 Discover SVIDs Command Request
Example of Discover SVIDs command request.

G.2.2 Discover SVIDs Command Response

Example response for Discover SVIDs command.
G.3 Discover Modes Example

G.3.1 Discover Modes Command Request
Example of Discover Modes command request.

G.3.2 Discover Modes Command Response

Example response for Discover Modes command.
G.4 Enter Mode Example

G.4.1 Enter Mode Command Request
Example of Enter Mode command request.

G.4.2 Enter Mode Command Request with Additional VDO

Example of Enter Mode command request with additional VDO.
G.5 Exit Mode Example

G.5.1 Exit Mode Command Request
Example of Exit Mode command request.

G.5.2 Exit Mode Command Response

Example response for Exit Mode command.
G.6 Attention Example

G.6.1 Attention Command Request
Example of Attention command request.

G.6.2 Attention Command Request with Additional VDO

Example of Attention command request with additional VDO.
List of Tables

Table 1-1 Terms and Abbreviations
Provides terms and abbreviations used in the document.
Table 3 -1: Plugs Accepted By Receptacles
Table 3 -2: USB 2.0 PD Standard-A Connector Pin Assignments
Table 3 -3: USB 3.1 PD Standard-A Connector Pin Assignments
Table 3 -4: USB 2.0 PD Standard-B Connector Pin Assignments
Table 3 -5: USB 3.1 PD Standard-B Connector Pin Assignments
Table 3 -6: USB PD Cable Assembly Overmold Maximum Dimensions
Table 3 -7: Electrical Parameters
Table 4 -1: Normal Dead Battery Operation
Table 4 -2: Plug Type Determination
Table 4 -3: Electrical Parameters
Table 4 -4: Electrical Timers
Table 5 -1: 4b5b Symbol Encoding Table
Table 5 -2: Ordered Sets
Table 5 -3: Validation of Ordered Sets
Table 5 -4: Data Size
Table 5 -5: SOP Ordered Set
Table 5 -6: SOP’ Ordered Set
Table 5 -7: SOP’’ Ordered Set
Table 5 -8: SOP’_Debug Ordered Set
Table 5 -9: SOP’’_Debug Ordered Set
Table 5 -10: CRC-32 Mapping
Table 5 -11: Hard Reset Ordered Set
Table 5 -12: Cable Reset Ordered Set
Table 5 -13: Common Normative Signaling Scheme Requirements
Table 5 -14: Common Normative Signaling Scheme Requirements for Transmitter
Table 5 -15: Common Normative Signaling Scheme Requirements for Receiver
Table 5 -16: BFSK Common Normative Requirements
Table 5 -17: BFSK Transceiver Isolation Impedance Normative Requirements
Table 5 -18: BFSK Transmitter Normative Requirements
Table 5 -19: BFSK Spectrum Mask Corners
Table 5 -20: BFSK Receiver Normative Requirements
Table 5 -21: BMC Tx Mask Definition, X Values
Table 5 -22: BMC Tx Mask Definition, Y Values
Table 5 -23: BMC Rx Mask Definition
Table 5 -24: BMC Common Normative Requirements
Table 5 -25: BMC Transmitter Normative Requirements
Table 5 -26: BMC Receiver Normative Requirements
Table 5 -27: Allowable Bit Errors vs. Number of Test Frames
Table 5 -28: BIST Parameters
Table 5 -29: BIST Mode Support
Table 6 -1: Message Header
Table 6 -2: Control Message Types
Table 6 -3: Data Message Types
Table 6 -4: Power Data Object
Table 6 -5: USB Type-A to USB Type-A Port Behavior
Table 6 -6: Fixed Supply PDO - Source
Table 6 -7: Fixed Power Source Peak Current Capability
Table 6 -8: Variable Supply (non-Battery) PDO - Source
Table 6 -9: Battery Supply PDO - Source
Table 6 -10: Fixed Supply PDO - Sink
Table 6 -11: Variable Supply (non-Battery) PDO - Sink
Table 6 -12: Battery Supply PDO - Sink
Table 6 -13: Fixed and Variable Request Data Object
Table 6 -14: Fixed and Variable Request Data Object with GiveBack Support
Table 6 -15: Battery Request Data Object
Table 6 -16: Battery Request Data Object with GiveBack Support
Table 6 -17: BIST Data Object
Table 6 -18: Unstructured VDM Header
Table 6 -19: Structured VDM Header
Table 6 -20: Structured VDM Commands
Table 6 -21: SVID Values
Table 6 -22: Commands and Responses
Table 6 -23: ID Header VDO
Table 6 -24: Product Types (UFP)
Table 6 -25: Product Types (Cable Plug)
Table 6 -26: Cert Stat VDO
Table 6 -27: Product VDO
Table 6 -28: Passive Cable VDO
Table 6 -29: Active Cable VDO
Table 6 -30: AMA VDO
Table 6 -31: Discover SVIDs Responder VDO
Table 6 -32: Time Values
Table 6 -33: Timers
Table 6 -34: Counter
Table 6 -35: Counters
Parameters: 200

Table 6 -36: Response to an Incoming Message
Parameters: 202

Table 6 -37: Message Discarding
Parameters: 205

Table 6 -38: Protocol Layer States
Parameters: 219

Table 6 -39: Applicability of Control Messages
Parameters: 220

Table 6 -40: Applicability of Data Messages
Parameters: 221

Table 6 -41: Applicability of Structured VDM Commands
Parameters: 222

Table 6 -42: Applicability of Reset Signaling
Parameters: 223

Table 7 -1: Noise Spectral Mask Corners
Parameters: 232

Table 7 -2: Noise Spectral Mask Corners
Parameters: 236

Table 7 -3: Sequence Description for Increasing the Current
Parameters: 241

Table 7 -4: Sequence Description for Increasing the Voltage
Parameters: 243

Table 7 -5: Sequence Diagram for Increasing the Voltage and Current
Parameters: 245

Table 7 -6: Sequence Description for Increasing the Voltage and Decreasing the Current
Parameters: 247

Table 7 -7: Sequence Description for Decreasing the Voltage and Increasing the Current
Parameters: 249

Table 7 -8: Sequence Description for Decreasing the Current
Parameters: 251

Table 7 -9: Sequence Description for Decreasing the Voltage
Parameters: 253

Table 7 -10: Sequence Description for Decreasing the Voltage and the Current
Parameters: 255

Table 7 -11: Sequence Description for a Sink Requested Power Role Swap
Parameters: 257

Table 7 -12: Sequence Description for a Source Requested Power Role Swap
Parameters: 260

Table 7 -13: Sequence Description for a GotoMin Current Decrease
Parameters: 263

Table 7 -14: Sequence Description for a Source Initiated Hard Reset
Parameters: 265

Table 7 -15: Sequence Description for a Sink Initiated Hard Reset
Parameters: 267

Table 7 -16: Sequence Description for USB Type-B New Source Initiated Hard Reset and USB Type-A New Sink Receives Hard Reset Signaling
Parameters: 269

Table 7 -17: Sequence Description for USB Type-B New Source Initiated Hard Reset and USB Type-A New Sink Does Not Receive Hard Reset Signaling
Parameters: 271

Table 7 -18: Sequence Description for USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Receives Hard Reset Signaling
Parameters: 273

Table 7 -19: Sequence Description for USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Does Not Receive Hard Reset Signaling
Parameters: 275

Table 7 -20: Sequence Description for USB Type-A to USB Type-B Dead Battery Operation
Parameters: 277

Table 7 -21: Sequence Description for No Change in Current or Voltage
Parameters: 279

Table 7 -22: Source Electrical Parameters
Parameters: 280

Table 7 -23: Sink Electrical Parameters
Parameters: 282

Table 7 -24: Common Source/Sink Electrical Parameters
Parameters: 283

Table 8 -1: Basic Message Flow
Parameters: 293

Table 8 -2: Potential Issues in Basic Message Flow
Parameters: 294

Table 8 -3: Basic Message Flow with CRC Failure
Parameters: 295

Table 8 -4: Interruptible and Non-Interruptible AMS
Parameters: 296

Table 8 -5: Steps for a Successful Power Negotiation
Parameters: 299

Table 8 -6: Steps for a GotoMin Negotiation
Parameters: 302

Table 8 -7: Steps for a Soft Reset
Parameters: 304

Table 8 -8: Steps for Source Initiated Hard Reset
Parameters: 307

Table 8 -9: Steps for Sink Initiated Hard Reset
Parameters: 310

Table 8 -10: Steps for Source Initiated Hard Reset – Sink Long Reset
Parameters: 313

Table 8 -11: Steps for a Successful USB Type-A or USB Type-B Source Initiated Power Role Swap Sequence
Parameters: 317

Table 8 -12: Steps for a Successful USB Type-A or USB Type-B Sink Initiated Power Role Swap Sequence
Parameters: 321

Table 8 -13: Steps for USB Type-A or USB Type-B Source Initiated Hard Reset (Power Role Swapped)
Parameters: 325

Table 8 -14: Steps for USB Type-A or USB Type-B Sink Initiated Hard Reset (Power Role Swapped)
Parameters: 328

Table 8 -15: Steps for a Successful USB Type-C Source Initiated Power Role Swap Sequence
Parameters: 332

Table 8 -16: Steps for a Successful USB Type-C Sink Initiated Power Role Swap Sequence
Parameters: 337

Table 8 -17: Steps for USB Type-C Data Role Swap, UFP Operating as Sink Initiates
Parameters: 341

Table 8 -18: Steps for USB Type-C Data Role Swap, UFP Operating as Source Initiates
Parameters: 344

Table 8 -19: Steps for USB Type-C Data Role Swap, DFP Operating as Source Initiates
Parameters: 347

Table 8 -20: Steps for USB Type-C Data Role Swap, DFP Operating as Sink Initiates
Parameters: 350

Table 8 -21: Steps for USB Type-C Source to Sink V CONN Source Swap
Parameters: 353

Table 8 -22: Steps for USB Type-C Sink to Source V CONN Source Swap
Parameters: 356

Table 8 -23: Steps for a Sink Getting Source Capabilities Sequence
Parameters: 358

Table 8 -24: Steps for a Dual-Role Source Getting Dual-Role Sink’s Capabilities as a Source Sequence
Parameters: 360

Table 8 -25: Steps for a Source Getting Sink Capabilities Sequence
Parameters: 362

Table 8 -26: Steps for a Dual-Role Sink Getting Dual-Role Source Capabilities as a Sink Sequence
Parameters: 364
Table 8 -27: Steps for DFP to UFP Discover Identity
Parameters: 366

Table 8 -28: Steps for Source Port to Cable Plug Discover Identity
Parameters: 368

Table 8 -29: Steps for DFP to Cable Plug Discover Identity
Parameters: 370

Table 8 -30: Steps for DFP to UFP Enter Mode
Parameters: 373

Table 8 -31: Steps for DFP to UFP Exit Mode
Parameters: 375

Table 8 -32: Steps for DFP to Cable Plug Enter Mode
Parameters: 378

Table 8 -33: Steps for DFP to Cable Plug Exit Mode
Parameters: 380

Table 8 -34: Steps for UFP to DFP Attention
Parameters: 382

Table 8 -35: Steps for BIST Receiver Mode Test
Parameters: 385

Table 8 -36: Steps for BIST Transmit Mode Test
Parameters: 388

Table 8 -37: Steps for BIST Eye Pattern Test
Parameters: 391

Table 8 -38: Steps for BIST Test Data Test
Parameters: 393

Table 8 -39: Policy Engine States
Parameters: 464

Table 9 -1: USB Power Delivery Type Codes
Parameters: 477

Table 9 -2: USB Power Delivery Capability Descriptor
Parameters: 477

Table 9 -3: Battery Info Capability Descriptor
Parameters: 478

Table 9 -4: PD Consumer Port Descriptor
Parameters: 479

Table 9 -5: PD Provider Port Descriptor
Parameters: 479

Table 9 -6: PD Requests
Parameters: 481

Table 9 -7: PD Request Codes
Parameters: 481

Table 9 -8: PD Feature Selectors
Parameters: 481

Table 9 -9: Battery Status Structure
Parameters: 482

Table 9 -10: Battery Wake Mask
Parameters: 483

Table 9 -11: Charging Policy Encoding
Parameters: 484

Table 10 -1: Considerations for Sources
Parameters: 485

Table 10 -2: Normative Voltages and Currents
Parameters: 486

Table 10 -3: Fixed Supply PDO – Source 5V
Parameters: 487

Table 10 -4: Fixed Supply PDO – Source 9V
Parameters: 488

Table 10 -5: Fixed Supply PDO – Source 15V
Parameters: 488

Table 10 -6: Fixed Supply PDO – Source 20V
Parameters: 488

Table F -1: External Power is Supplied Downstream
Parameters: 512

Table F -2: External Power is Supplied Upstream
Parameters: 515

Table F -3: Giving Back Power
Parameters: 522

Table G -1: Discover Identity Command Request from Initiator Example
Parameters: 534

Table G -2: Discover Identity Command Response from Active Cable Responder Example
Parameters: 535

Table G -3: Discover Identity Command Response from Hub Responder Example
Parameters: 535

Table G -4: Discover SVIDs Command Request from Initiator Example
Parameters: 537

Table G -5: Discover SVIDs Command Response from Responder Example
Parameters: 537

Table G -6: Discover Modes Command Request from Initiator Example
Parameters: 539

Table G -7: Discover Modes Command Response from Responder Example
Parameters: 539

Table G -8: Enter Mode Command Request from Initiator Example
Parameters: 541

Table G -9: Enter Mode Command Response from Responder Example
Parameters: 541

Table G -10: Enter Mode Command Request from Initiator Example
Parameters: 542

Table G -11: Exit Mode Command Request from Initiator Example
Parameters: 544

Table G -12: Exit Mode Command Response from Responder Example
Parameters: 544

Table G -13: Attention Command Request from Initiator Example
Parameters: 546

Table G -14: Attention Command Request from Initiator with Additional VDO Example
Parameters: 546

List of Figures
Figure 2 -1: Logical Structure of USB Power Delivery Capable Devices
Parameters: 47

Figure 2 -2: SOP’ Communication between Source and Cable Plug with No Explicit Contract or an Implicit Contract
Parameters: 49

Figure 2 -3: SOP’ Communication between DFP and Cable Plug with PD Explicit Contract
Parameters: 49

Figure 2 -4: USB Power Delivery Communications Stack
Parameters: 56

Figure 2 -5: USB Power Delivery Communication Over USB
Parameters: 57

Figure 2 -6: High Level Architecture View
Parameters: 58

Figure 3 -1: Standard-A Insertion Detect Schematic Representation
Parameters: 65

Figure 3 -2: PD Standard-A No Plug Detection Circuit
Parameters: 66

Figure 3 -3: Non-PD Plug Standard-A Detection Circuit
Parameters: 66

Figure 3 -4: USB Thin Card Standard-A Detection Circuit
Parameters: 66

Figure 3 -5: PD Plug Standard-A Detection Circuit
Parameters: 66

Figure 3 -6: Insertion Detect Zone Mechanical Dimensions for the Standard-A Receptacle
Parameters: 67

Figure 3 -7: PD Detect Plane Location Range for PD Standard-A Receptacles
Parameters: 68

Figure 3 -8: PD Standard-A Plug Interface Dimensions
Parameters: 69

Figure 3 -9: USB 2.0 PD Standard-A Receptacle Interface Dimensions
Parameters: 70

Figure 3 -10: Reference Footprint for the USB 2.0 PD Standard-A Top Mount Single Receptacle (Informative)
Parameters: 71

Figure 3 -11: USB 3.1 PD Standard-A Plug Interface Dimensions
Parameters: 73

Figure 3 -12: Reference USB 3.1 PD Standard-A Receptacle Interface Dimensions (Informative)
Parameters: 74

Figure 3 -13: Reference Footprint for the USB 3.1 PD Standard-A Top Mount Single Receptacle (Informative)
Parameters: 75

Figure 3 -14: USB
Table 3 -14: USB 2.0 PD Standard-B Plug Interface Dimensions
Parameters: 77

Figure 3 -15: USB 2.0 PD Standard-B Receptacle Interface Dimensions
Parameters: 78

Figure 3 -16: Reference Footprint for the USB 2.0 PD Standard-B Receptacle
Parameters: 79

Figure 3 -17: USB 3.1 PD Standard-B Plug Interface Dimensions
Parameters: 80

Figure 3 -18: USB 3.1 PD Standard-B Receptacle Interface Dimensions
Parameters: 81

Figure 3 -19: Reference Footprint for the USB 3.1 PD Standard-B Receptacle
Parameters: 82

Figure 3 -20: USB PD Cable Assembly Overmold Maximum Dimensions
Parameters: 85

Figure 3 -21: Schematic of a Micro-A Plug Legacy Termination
Parameters: 86

Figure 3 -22: Schematic of a Micro-A Plug Marker Indicating Low Power Capability
Parameters: 87

Figure 3 -23: Schematic of a Micro-A PD Plug
Parameters: 87

Figure 3 -24: Schematic of a B Plug Connector Marker Indicating 3A Capability
Parameters: 88

Figure 3 -25: Schematic of a B Plug Connector Marker Indicating 5A Capability
Parameters: 88

Figure 3 -26: Differential Near-End and Far-End Crosstalk Requirement Between the D+/D- Pair and VBUS
Parameters: 90

Figure 3 -27: Voltage Drop Measurement
Parameters: 91

Figure 4 -1: USB Type-A to USB Type-B Dead Battery/Unpowered Port Detection Flow
Parameters: 96

Figure 4 -2: Plug Type Determination
Parameters: 100

Figure 4 -3: Standard-A Plug PD Capabilities Flow
Parameters: 101

Figure 4 -4: Plug Type Detection Circuit
Parameters: 101

Figure 5 -1: Interpretation of Ordered Sets
Parameters: 106

Figure 5 -2: Transmit Order for Various Sizes of Data
Parameters: 107

Figure 5 -3: USB Power Delivery Packet Format
Parameters: 108

Figure 5 -4: CRC 32 Generation
Parameters: 111

Figure 5 -5: Line Format of Hard Reset
Parameters: 113

Figure 5 -6: Line Format of Cable Reset
Parameters: 113

Figure 5 -7: Inter-Frame Gap Timings
Parameters: 115

Figure 5 -8: Transmitter Block Diagram
Parameters: 116

Figure 5 -9: Receiver Block Diagram
Parameters: 116

Figure 5 -10: Channel Diagram (Cable Type Detection Not Shown)
Parameters: 117

Figure 5 -11: Eye Diagram of BFSK Modulation
Parameters: 120

Figure 5 -12: BFSK Transmit Spectral Mask, Given in Absolute Terms Relative to the Maximum Value of vTX
Parameters: 121

Figure 5 -13: Line Format of Bit Stream
Parameters: 123

Figure 5 -14: BMC Example
Parameters: 124

Figure 5 -15: BMC Transmitter Block Diagram
Parameters: 124

Figure 5 -16: BMC Receiver Block Diagram
Parameters: 125

Figure 5 -17: BMC Encoded Start of Preamble
Parameters: 125

Figure 5 -18: Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low Last Transition
Parameters: 126

Figure 5 -19: Transmitting or Receiving BMC Encoded Frame Terminated by One with High-to-Low Last Transition
Parameters: 126

Figure 5 -20: Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low-to-High Last Transition
Parameters: 126

Figure 5 -21: Transmitting or Receiving BMC Encoded Frame Terminated by One with Low-to-High Last Transition
Parameters: 127

Figure 5 -22: BMC Tx ‘ONE’ Mask
Parameters: 127

Figure 5 -23: BMC Tx ‘ZERO’ Mask
Parameters: 128

Figure 5 -24: BMC Rx ‘ONE’ Mask When Sourcing Power
Parameters: 130

Figure 5 -25: BMC Rx ‘ZERO’ Mask When Sourcing Power
Parameters: 131

Figure 5 -26: BMC Rx ‘ONE’ Mask When Power Neutral
Parameters: 131

Figure 5 -27: BMC Rx ‘ZERO’ Mask When Power Neutral
Parameters: 132

Figure 5 -28: BMC Rx ‘ONE’ Mask When Sinking Power
Parameters: 132

Figure 5 -29: BMC Rx ‘ZERO’ Mask When Sinking Power
Parameters: 133

Figure 5 -30: Transmitter Load Model for BMC Tx from a Source
Parameters: 134

Figure 5 -31: Transmitter Load Model for BMC Tx from a Sink
Parameters: 134

Figure 5 -32: Transmitter Diagram Illustrating zDriver
Parameters: 136

Figure 5 -33: Example Multi-Drop Configuration Showing Two DRPs
Parameters: 137

Figure 5 -34: Example Multi-Drop Configuration Showing a DFP and UFP
Parameters: 137

Figure 5 -35: Example Implementation of the BIST Generator and Checker
Parameters: 139

Figure 5 -36: Test Frame
Parameters: 139

Figure 5 -37: Test Data Frame
Parameters: 141

Figure 6 -1: USB Power Delivery Packet Format Including Control Message Payload
Parameters: 142

Figure 6 -2: USB Power Delivery Packet Format Including Data Message Payload
Parameters: 143

Figure 6 -3: Example Capabilities Message with 2 Power Data Objects
Parameters: 151

Figure 6 -4: BIST Message
Parameters: 163

Figure 6 -5: Vendor Defined Message
Parameters: 166

Figure 6 -6: Discover Identity Command Response
Parameters: 171

Figure 6 -7: Example Discover SVIDs Response with 3 SVIDs
Parameters: 179

Figure 6 -8: Example Discover SVIDs Response with 4 SVIDs
Parameters: 179

Figure 6 -9: Example Discover SVIDs Response with 12 SVIDs Followed by an Empty Response
Parameters: 179

Figure 6 -10: Example Discover Modes Response for a Given SVID with 3 Modes
Parameters: 180

Figure 6 -11: Successful Enter Mode Sequence
Parameters: 181

Figure 6 -12: Enter Mode Sequence Interrupted by Source Capabilities and Then Re-Run
Parameters: 182

Figure 6 -13: Unsuccessful Enter Mode Sequence Due to NAK
Parameters: 182

Figure 6 -14: Exit Mode Sequence
Parameters: 183

Figure 6 -15: Attention Command Request/Response Sequence
Parameters: 184

Figure 6 -16: Command Request/Response Sequence
Parameters: 184

Figure 6 -17: Enter/Exit Mode Process
Parameters: 186

Figure 6 -18: Vendor Defined Message Interrupted by a Power Delivery Message
Parameters: 187

Figure 6 -19: Outline of States
Parameters: 206

Figure 6 -20: References to States
Parameters: 206

Figure 6 -21: Protocol Layer Message Transmission
Parameters: 207

Figure 6 -22: Protocol Layer Message Reception
Parameters: 210

Figure 6 -23: Hard/Cable Reset
Parameters: 212

Figure 6 -24: BIST Transmitter Test
Parameters: 215

Figure 6 -25: BIST Receiver Test
Parameters: 217

Figure 7 -1: Placement of Source Bulk Capacitance
Parameters: 224

Figure 7 -2: Transition Envelope for Positive Voltage Transitions
Parameters: 225

Figure 7 -3: Transition Envelope for Negative Voltage Transitions
Parameters: 226

Figure 7 -4: Source VBUS Response to Hard Reset
Parameters: 227

Figure 7 -5: Application of vSrcNew and vSrcValid Limits After tSrcReady
Parameters: 229

Figure 7 -6: Source Peak Current Overload
Parameters: 230

Figure 7 -7: Noise Spectral Mask, Given in Absolute Terms Relative to the Maximum Value of vTX
Parameters: 231

Figure 7 -8: vSafeDB Operating Region
Parameters: 232

Figure 7 -9: Placement of Sink Bulk Capacitance
Parameters: 234

Figure 7 -10: Noise Spectral Mask, Given in Absolute Terms Relative to the Maximum Value of vTX
Parameters: 236

Figure 7 -11: Transition Diagram for Increasing the Current
Parameters: 240

Figure 7 -12: Transition Diagram for Increasing the Voltage
Parameters: 242

Figure 7 -13: Transition Diagram for Increasing the Voltage and Current
Parameters: 244

Figure 7 -14: Transition Diagram for Increasing the Voltage and Decreasing the Current
Parameters: 246

Figure 7 -15: Transition Diagram for Decreasing the Voltage and Increasing the Current
Parameters: 248

Figure 7 -16: Transition Diagram for Decreasing the Current
Parameters: 250

Figure 7 -17: Transition Diagram for Decreasing the Voltage
Parameters: 252

Figure 7 -18: Transition Diagram for Decreasing the Voltage and the Current
Parameters: 254

Figure 7 -19: Transition Diagram for a Sink Requested Power Role Swap
Parameters: 256

Figure 7 -20: Transition Diagram for a Source Requested Power Role Swap
Figure 7 -21: Transition Diagram for a GotoMin Current Decrease
Parameters: 259

Figure 7 -22: Transition Diagram for a Source Initiated Hard Reset
Parameters: 262

Figure 7 -23: Transition Diagram for a Sink Initiated Hard Reset
Parameters: 264

Figure 7 -24: Transition Diagram for USB Type-B New Source Initiated Hard Reset and USB Type-A New Sink Receives Hard Reset Signaling
Parameters: 268

Figure 7 -25: Transition Diagram for USB Type-B New Source Initiated Hard Reset and USB Type-A New Sink Does Not Receive Hard Reset Signaling
Parameters: 270

Figure 7 -26: Transition Diagram for USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Receives Hard Reset Signaling
Parameters: 272

Figure 7 -27: Transition Diagram for USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Does Not Receive Hard Reset Signaling
Parameters: 274

Figure 7 -28: USB Type-A to USB Type-B Transition Diagram for Dead Battery Operation
Parameters: 276

Figure 7 -29: Transition Diagram for No Change in Current or Voltage
Parameters: 278

Figure 8 -1: Example of Daisy Chained Displays
Parameters: 289

Figure 8 -2: Basic Message Exchange (Successful)
Parameters: 292

Figure 8 -3: Basic Message Flow Indicating Possible Errors
Parameters: 293

Figure 8 -4: Basic Message Flow with Bad CRC Followed by a Retry
Parameters: 295

Figure 8 -5: Successful Power Negotiation
Parameters: 298

Figure 8 -6: Successful GotoMin Operation
Parameters: 302

Figure 8 -7: Soft Reset
Parameters: 304

Figure 8 -8: Source Initiated Hard Reset
Parameters: 306

Figure 8 -9: Sink Initiated Hard Reset
Parameters: 309

Figure 8 -10: Source Initiated Reset - Sink Long Reset
Parameters: 312

Figure 8 -11: USB Type-A or USB Type-B Successful Power Role Swap Sequence Initiated by the Source
Parameters: 316

Figure 8 -12: USB Type-A or USB Type-B Successful Power Role Swap Sequence Initiated by the Sink
Parameters: 320

Figure 8 -13: USB Type-A or USB Type-B Source Initiated Hard Reset (Power Role Swapped)
Parameters: 324

Figure 8 -14: USB Type-A or USB Type-B Sink Initiated Hard Reset (Power Role Swapped)
Parameters: 327

Figure 8 -15: USB Type-C Successful Power Role Swap Sequence Initiated by the Source
Parameters: 331

Figure 8 -16: USB Type-C Successful Power Role Swap Sequence Initiated by the USB Type-C Sink
Parameters: 336

Figure 8 -17: USB Type-C Data Role Swap, UFP Operating as Sink Initiates
Parameters: 340

Figure 8 -18: USB Type-C Data Role Swap, UFP Operating as Source Initiates
Parameters: 343

Figure 8 -19: USB Type-C Data Role Swap, DFP Operating as Source Initiates
Parameters: 346

Figure 8 -20: USB Type-C Data Role Swap, DFP Operating as Sink Initiates
Parameters: 349

Figure 8 -21: USB Type-C Source to Sink VCONN Source Swap
Parameters: 352

Figure 8 -22: USB Type-C Sink to Source VCONN Source Swap
Parameters: 355

Figure 8 -23: Sink Gets Source’s Capabilities
Parameters: 358

Figure 8 -24: Dual-Role Source Gets Dual-Role Sink’s Capabilities as a Source
Parameters: 360

Figure 8 -25: Source Gets Sink’s Capabilities
Parameters: 362

Figure 8 -26: Dual-Role Sink Gets Dual-Role Source’s Capabilities as a Sink
Parameters: 364

Figure 8 -27: DFP to UFP Discover Identity
Parameters: 366

Figure 8 -28: Source Port to Cable Plug Discover Identity
Parameters: 368

Figure 8 -29: DFP to Cable Plug Discover Identity
Parameters: 370

Figure 8 -30: DFP to UFP Enter Mode
Parameters: 372

Figure 8 -31: DFP to UFP Exit Mode
Parameters: 375

Figure 8 -32: DFP to Cable Plug Enter Mode
Parameters: 377

Figure 8 -33: DFP to Cable Plug Exit Mode
Parameters: 380

Figure 8 -34: UFP to DFP Attention
Parameters: 382

Figure 8 -35: BIST Receiver Mode Test
Parameters: 384

Figure 8 -36: BIST Transmit Mode Test
Parameters: 387

Figure 8 -37: BIST Eye Pattern Test
Parameters: 390

Figure 8 -38: BIST Test Data Test
Parameters: 392

Figure 8 -39: Outline of States
Parameters: 395

Figure 8 -40: References to States
Parameters: 395

Figure 8 -41: Example of State Reference with Conditions
Parameters: 395

Figure 8 -42: Example of State Reference with the Same Entry and Exit
Parameters: 396

Figure 8 -43: Source Port Policy Engine State Diagram
Parameters: 397

Figure 8 -44: Sink Port State Diagram
Parameters: 403

Figure 8 -45: Source Port Soft Reset and Protocol Error State Diagram
Parameters: 407

Figure 8 -46: Sink Port Soft Reset and Protocol Error Diagram
Parameters: 409

Figure 8 -47: Source Port Ping State Diagram
Parameters: 410

Figure 8 -48: Dual-Role (Initially Source Port) Ping State Diagram
Parameters: 411

Figure 8 -49: Dual-Role (Initially Sink Port) Ping State Diagram
Parameters: 411

Figure 8 -50: State Diagram for Hard Reset of P/C in Sink Role
Parameters: 412

Figure 8 -51: State Diagram for the Hard Reset of a C/P in Source Role
Parameters: 413

Figure 8 -52: Consumer/Provider Dead Battery/Power Loss State Diagram
Parameters: 414

Figure 8 -53: BFSK Provider/Consumer Dead Battery/Power Loss State Diagram
Parameters: 417

Figure 8 -54: USB Type-C DFP to UFP Data Role Swap State Diagram
Parameters: 419

Figure 8 -55: USB Type-C UFP to DFP Data Role Swap State Diagram
Parameters: 421

Figure 8 -56: Dual-Role Port in Source to Sink Power Role Swap State Diagram
Parameters: 424

Figure 8 -57: Dual-Role Port in Sink to Source Power Role Swap State Diagram
Parameters: 427

Figure 8 -58: Dual-Role (Source) Get Source Capabilities Diagram
Parameters: 429

Figure 8 -59: Dual-Role (Source) Give Sink Capabilities Diagram
Parameters: 430

Figure 8 -60: Dual-Role (Sink) Get Sink Capabilities State Diagram
Parameters: 430

Figure 8 -61: Dual-Role (Sink) Give Source Capabilities State Diagram
Parameters: 431

Figure 8 -62: VCONN Swap State Diagram
Parameters: 432

Figure 8 -63: UFP Structured VDM Discover Identity State Diagram
Parameters: 434

Figure 8 -64: UFP Structured VDM Discover SVIDs State Diagram
Parameters: 435

Figure 8 -65: UFP Structured VDM Discover Modes State Diagram
Parameters: 436

Figure 8 -66: UFP Structured VDM Enter Mode State Diagram
Parameters: 437

Figure 8 -67: UFP Structured VDM Exit Mode State Diagram
Parameters: 438

Figure 8 -68: UFP VDM Attention State Diagram
Parameters: 439

Figure 8 -69: DFP to UFP VDM Discover Identity State Diagram
Parameters: 440

Figure 8 -70: DFP VDM Discover Identity State Diagram
Parameters: 441

Figure 8 -71: DFP VDM Discover SVIDs State Diagram
Parameters: 442

Figure 8 -72: DFP VDM Discover Modes State Diagram
Parameters: 443

Figure 8 -73: DFP VDM Mode Entry State Diagram
Parameters: 444

Figure 8 -74: DFP VDM Mode Exit State Diagram
Parameters: 446

Figure 8 -75: DFP VDM Attention State Diagram
Parameters: 447

Figure 8 -76: Cable Ready VDM State Diagram
Parameters: 447

Figure 8 -77: Cable Plug Structured VDM Discover Identity State Diagram
Parameters: 448

Figure 8 -78: Cable Plug Structured VDM Discover SVIDs State Diagram
Parameters: 449

Figure 8 -79: Cable Plug Structured VDM Discover Modes State Diagram
Parameters: 450

Figure 8 -80: Cable Plug Structured VDM Enter Mode State Diagram
Parameters: 451

Figure 8 -81: Cable Plug Structured VDM Exit Mode State Diagram
Parameters: 452

Figure 8 -82: Cable Plug Soft Reset State Diagram
Parameters: 453

Figure 8 -83: Cable Plug VDM Data State Diagram
Parameters: 455
Figure 8 -84: Plug Hard Reset State Diagram
Parameters: 454

Figure 8 -85: DFP Soft Reset or Cable Reset of a Cable Plug State Diagram
Parameters: 454

Figure 8 -86: UFP Source Soft Reset of a Cable Plug State Diagram
Parameters: 456

Figure 8 -87: Source Startup Structured VDM Discover Identity State Diagram
Parameters: 457

Figure 8 -88: BIST Receive Mode State Diagram
Parameters: 458

Figure 8 -89: BIST Transmit Mode State Diagram
Parameters: 460

Figure 8 -90: BIST Carrier Mode and Eye Pattern State Diagram
Parameters: 461

Figure 9 -1: Example PD Topology
Parameters: 471

Figure 9 -2: Mapping of PD Topology to USB
Parameters: 472

Figure 9 -3: USB Attached to USB Powered State Transition
Parameters: 473

Figure 9 -4: Any USB State to USB Attached State Transition (When operating as a Consumer)
Parameters: 474

Figure 9 -5: Any USB State to USB Attached State Transition (When operating as a Provider)
Parameters: 474

Figure 9 -6: Any USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)
Parameters: 475

Figure 9 -7: Software Stack on a PD Aware OS
Parameters: 475

Figure 9 -8: Enumeration of a PDUSB Device
Parameters: 476

Figure 10 -1: Source Power Rule Illustration
Parameters: 486

Figure 10 -2: Source Power Rule Example
Parameters: 487

Figure C -1: Typical System Electrical Model
Parameters: 494

Figure C -2: Typical Synchronous Buck Power Stage with Parasitics
Parameters: 495

Figure C -3: Spurious Noise Measurement Test Setup
Parameters: 496

Figure C -4: Current Transients When Cable/Load Removed
Parameters: 497

Figure C -5: Isolation Inductor Energy versus Load
Parameters: 498

Figure C -6: Simplified Small Signal AC Model
Parameters: 499

Figure C -7: Power Stage Phase and Gain with and without Isolation Inductors
Parameters: 500

Figure C -8: Simplified Small Signal AC Model (Feedback Before and After Inductor Isolation_P)
Parameters: 501

Figure C -9: Simplified Small Signal AC Model (Feedback Before and After Inductor Isolation_P)
Parameters: 501

Figure D -1: USB 3.1 Standard-A Plug with USB 2.0 PD or 3.1 PD Standard-A Receptacle
Parameters: 502

Figure D -2: USB 3.1 PD Standard-A Plug with USB 2.0 or 3.1 Standard-A Receptacle
Parameters: 503

Figure D -3: USB 2.0 PD or 3.1 PD Standard-A Plug with USB 2.0 PD or 3.1 PD Standard-A Receptacle
Parameters: 504

Figure D -4: USB 2.0 PD or 3.1 PD Standard-A Plug with USB 2.0 Standard-A Receptacle
Parameters: 505

Figure D -5: USB 2.0 Standard-A Plug with USB 2.0 or USB 3.1 PD Standard-A Receptacle
Parameters: 506

Figure D -6: USB 2.0 Thin Card with USB 2.0 PD or 3.1 PD Standard-A Receptacle
Parameters: 507

Figure D -7: USB 3.1 Thin Card with USB 2.0 PD or 3.1 PD Standard-A Receptacle
Parameters: 508

Figure E -1: Squelch Budget
Parameters: 509

Figure F -1: External Power Supplied Downstream
Parameters: 511

Figure F -2: External Power Supplied Upstream
Parameters: 515

Figure F -3: Giving Back Power
Parameters: 522

1. Introduction

USB has evolved from a data interface capable of supplying limited power to a primary provider of power with a data interface. Today, many devices charge or get their power from USB ports contained in laptops, cars, aircraft, or even wall sockets. USB has become a ubiquitous power socket for many small devices such as cell phones, MP3 players, and other handheld devices. Users need USB to fulfill their requirements not only in terms of data but also to provide power to, or charge, their devices simply, often without the need to load a driver, in order to carry out “traditional” USB functions.

There are, however, still many devices which either require an additional power connection to the wall, or exceed the USB rated current in order to operate. Increasingly, international regulations require better energy management due to ecological and practical concerns relating to the availability of power. Regulations limit the amount of power available from the wall which has led to a pressing need to optimize power usage. The USB Power Delivery Specification has the potential to minimize waste as it becomes a standard for charging devices that are not satisfied by [USB BC 1.2]. Wider usage of wireless solutions is an attempt to remove data cabling but the need for “tethered” charging remains. In addition, industrial design requirements drive wired connectivity to do much more over the same connector. USB Power Delivery is designed to enable the maximum functionality of USB by providing more flexible power delivery along with data over a single cable. Its aim is to operate with and build on the existing USB ecosystem; increasing power levels from existing USB standards, for example Battery Charging, enabling new higher power use cases such as USB powered Hard Disk Drives (HDDs) and printers.

With USB Power Delivery, the power direction is no longer fixed. This enables the product with the power (Host or Peripheral) to provide the power. For example, a display with a supply from the wall can power, or charge, a laptop. Alternatively, USB power bricks or chargers are able to supply power to laptops and other battery-powered devices through their traditionally power-providing USB ports. USB Power Delivery enables hubs to become the means to optimize power management across multiple peripherals by allowing each device to take only the power it requires, and to get more power when required for a given application. For example, battery-powered devices can get increased charging current and then give it back temporarily when the user’s HDD requires spinning up. Optionally, the hubs can communicate with the PC to enable even more intelligent and flexible management of power either automatically or with some level of user intervention. USB Power Delivery allows low power cases such as headsets to negotiate for only the power they require. This provides a simple solution that enables USB devices to operate at their optimal power levels. The Power Delivery Specification, in addition to providing mechanisms to negotiate power, also can be used as a side-band channel for standard and vendor-defined messaging. Power Delivery enables alternative modes of operation by providing the mechanisms to discover, enter, and exit Alternate Modes. The specification also enables discovery of cable capabilities such as supported speeds and current levels.

1.1 Overview

This specification defines how USB Devices can negotiate for more current and/or higher or lower voltages over the USB cable (using VBUS or CC wire as the communications channel) than are defined in the [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2] specifications. It allows Devices with greater power requirements than can be met with today’s specifications to get the power they require to operate from VBUS and negotiate with external power sources (e.g., wall warts). In addition, it allows a Source and Sink to swap power roles such that a Device could supply power to the Host. For example, a display could supply power to a notebook to charge its battery.

The USB Power Delivery Specification is guided by the following principles:

Works seamlessly with legacy USB Devices
Compatible with existing spec-compliant USB cables
Minimizes potential damage from non-compliant cables (e.g., ‘Y’ cables, etc.)
Optimized for low-cost implementations
This specification defines mechanisms to discover, enter, and exit Modes defined either by a standard or by a particular vendor. These Modes can be supported either by the Port Partner or by a cable connecting the two Port Partners. The specification defines mechanisms to discover the capabilities of cables which can communicate using Power Delivery. For USB Type-C Connectors, this specification adds a mechanism to swap the data roles such that the upstream facing Port becomes the downstream facing Port and vice versa. It also enables a swap of the end supplying VCONN to a powered cable.

1.2 Purpose

The USB Power Delivery specification defines a power delivery system covering all elements of a USB system including: Hosts, Devices, Hubs, Chargers, and cable assemblies. This specification describes the architecture, protocols, power supply behavior, connectors, and cabling necessary for managing power delivery over USB at up to 100W. This specification is intended to be fully compatible and...

1.2 Purpose

The USB Power Delivery specification defines a power delivery system covering all elements of a USB system including: Hosts, Devices, Hubs, Chargers, and cable assemblies. This specification describes the architecture, protocols, power supply behavior, connectors, and cabling necessary for managing power delivery over USB at up to 100W. This specification is intended to:

Extend the existing USB infrastructure.
Allow system OEMs, power supply, and peripheral developers adequate flexibility for product versatility and market differentiation without losing backwards compatibility.
Operate independently of the existing USB bus-defined mechanisms used to negotiate power, which are:
[USB 2.0], [USB 3.1] in-band requests for high power interfaces.
[USB BC 1.2] mechanisms for supplying higher power (not mandated by this specification).
[USB Type-C 1.2] mechanisms for supplying higher power.
Initial operating conditions remain the USB Default Operation as defined in [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2]:

The DFP sources vSafe5V over VBUS.
The UFP consumes power from VBUS.
1.3 Scope

This specification is intended as an extension to the existing [USB 2.0], [USB 3.1], [USB Type-C 1.2], and [USB BC 1.2] specifications. It addresses only the elements required to implement USB Power Delivery. It is targeted at:

Power supply vendors
Manufacturers of [USB 2.0], [USB 3.1], [USB Type-C 1.2], and [USB BC 1.2] Platforms, Devices, and cable assemblies.
Normative information is provided to allow interoperability of components designed to this specification. Informative information, when provided, illustrates possible design implementations.

1.4 Conventions

Precedence
1.4.1 If there is a conflict between text, figures, and tables, the precedence shall be tables, figures, and then text.

Keywords
1.4.2 The following keywords differentiate between the levels of requirements and options:

1.4.2.1 Conditional Normative
Conditional Normative is a keyword used to indicate a feature that is mandatory when another related feature has been implemented. Designers are mandated to implement all such requirements, when the dependent features have been implemented, to ensure interoperability with other compliant devices.

1.4.2.2 Deprecated
Deprecated is a keyword used to indicate a feature, supported in previous releases of the specification, which is no longer supported.

1.4.2.3 Discarded
Discard, Discards, and Discarded are equivalent keywords indicating that a packet when received shall be thrown away by the PHY Layer and not passed to the Protocol Layer for processing. No GoodCRC Message shall be sent in response to the packet.

1.4.2.4 Ignored
Ignore, Ignores, and Ignored are equivalent keywords indicating messages or message fields which, when received, shall result in no special action by the receiver. An Ignored Message shall only result in returning a GoodCRC Message to acknowledge message receipt. A message with an Ignored field shall be processed normally except for any actions relating to the Ignored field.

1.4.2.5 Invalid
Invalid is a keyword when used in relation to a packet indicates that the packet’s usage or fields fall outside of the defined specification usage. When Invalid is used in relation to an Explicit Contract, it indicates that a previously established Explicit Contract which can no longer be maintained by the Source. When Invalid is used in relation to individual K-codes or K-code sequences, it indicates that the received signaling falls outside of the defined specification.

1.4.2.6 May
May is a keyword that indicates a choice with no implied preference.

1.4.2.7 May Not
May Not is a keyword that is the inverse of May. It indicates a choice to not implement a given feature with no implied preference.

1.4.2.8 N/A
N/A is a keyword that indicates that a field or value is not applicable and has no defined value and shall not be checked or used by the recipient.

1.4.2.9 Optional/Optionally/Optional Normative
Optional, Optionally, and Optional Normative are equivalent keywords that describe features not mandated by this specification. However, if an Optional feature is implemented, the feature shall be implemented as defined by this specification.

1.4.2.10 Reserved
Reserved is a keyword indicating reserved bits, bytes, words, fields, and code values that are set aside for future standardization. Their use and interpretation may be specified by future extensions to this specification and shall not be utilized or adapted by vendor implementation. A Reserved bit, byte, word, or field shall be set to zero by the sender and shall be ignored by the receiver. Reserved field values shall not be sent by the sender and shall be ignored by the receiver.

1.4.2.11 Shall/Normative
Shall and Normative are equivalent keywords indicating a mandatory requirement. Designers are mandated to implement all such requirements to ensure interoperability with other compliant devices.

1.4.2.12 Shall Not
Shall Not is a keyword that is the inverse of Shall indicating non-compliant operation.

1.4.2.13 Should
Should is a keyword indicating flexibility of choice with a preferred alternative; equivalent to the phrase “it is recommended that…”

1.4.2.14 Should Not
Should Not is a keyword that is the inverse of Should; equivalent to the phrase “it is recommended that implementations do not…”

1.4.2.15 Valid
Valid is a keyword that is the inverse of Invalid indicating either a packet, signaling that fall within the defined specification or an Explicit Contract that can be maintained by the Source.

Numbering
1.4.3 Numbers that are immediately followed by a lowercase "b" (e.g., 01b) are binary values. Numbers that are immediately followed by an uppercase "B" are byte values. Numbers that are immediately followed by a lowercase "h" (e.g., 3Ah) or are preceded by “0x” (e.g., 0xFF00) are hexadecimal values. Numbers not immediately followed by either a "b", “B”, or "h" are decimal values.

1.5 Related Documents

[USB 2.0] – Universal Serial Bus Specification, Revision 2.0, plus ECN and Errata USB 2.0 Specification.
[USB 3.1] – Universal Serial Bus 3.1 Specification, Revision 1 plus ECN and Errata (this includes the entire document release package including the OTG & EH v3.0 specification) USB 3.1 Specification.
[USB BC 1.2] – Battery Charging Specification, Revision 1.2 plus Errata (referred to in this document as the Battery Charging specification) USB BC 1.2 Specification.
[USB CBridge 1.0] – Universal Serial Bus Type-C Bridging specification version 1.0
[USBPDCompliance] – USB Power Delivery Compliance Plan version 1.0 USB Power Delivery Compliance
1.5 Related Documents

[USB OTG 2.0] – On-The-Go and Embedded Host Supplement to the Universal Serial Bus Revision 2.0 Specification.
[Maxim 37] – Maxim Engineering Journal, Volume 37, page 12 Maxim 37 Journal.
[USB Type-C 1.2] – USB Type-C Specification USB Type-C 1.2 Specification.
[IEC 60958-1] – IEC 60958-1 Digital Audio Interface Part:1 General Edition 3.0 2008-09 IEC 60958-1.
[IEC 63002] – Draft CD for IEC 63002 Identification and Communication Interoperability Method for External DC 851 Power Supplies Used With Portable Computing Devices.
1.6 Terms and Abbreviations

This section defines terms used throughout this document. For additional terms that pertain to the Universal Serial Bus, see Chapter 2, “Terms and Abbreviations,” in [USB 2.0], [USB 3.1], [USB Type-C 1.2], and [USB BC 1.2].

Table 1-1 Terms and Abbreviations

Term	Description
Active Cable	A cable with a USB Plug on each end, at least one of which is a Cable Plug supporting SOP’, incorporating data bus signal conditioning circuits. Supports the Structured VDM Discover Identity Command to determine its characteristics in addition to other Structured VDM Commands (Electronically Marked Cable see [USB Type-C 1.2]).
Active Mode	A Mode which has been entered and not exited.
Alternate Mode	As defined in [USB Type-C 1.2]. Equivalent to Mode in the PD Specification.
Alternate Mode Adapter (AMA)	A PDUSB Device which supports Alternate Modes as defined in [USB Type-C 1.2]. Note that since an AMA is a PDUSB Device, it has a single UFP that is only addressable by SOP Packets.
Atomic Message Sequence (AMS)	A fixed sequence of Messages as defined in Section 8.3.2, typically starting and ending in one of the following states: PE_SRC_Ready, PE_SNK_Ready, or PE_CBL_Ready. An AMS can be Interruptible or Non-interruptible.
Attach	Mechanical joining of the Port Pair by a cable. Attached USB Power Delivery ports are mechanically joined with a USB cable.
Battery	A power storage device residing behind a Port that can either be a source or sink of power.
Battery Supply	A power supply that directly applies the output of a Battery to VBUS. This is exposed by the Battery Supply PDO (see Section 6.4.1.2.5).
Binary Frequency Shift Keying (BFSK)	BFSK uses a pair of discrete frequencies to transmit binary (0s and 1s) information. In the Power Delivery BFSK system: Logic 0 is indicated by a frequency fCarrier - fDeviation. Logic 1 is indicated by a frequency fCarrier + fDeviation.
Biphase Mark Coding (BMC)	Modification of Manchester coding where each zero has one transition and a one has two transitions (see [IEC 60958-1]).
BIST	Built-In Self-Test – Power Delivery testing mechanism for the PHY Layer.
BIST Data Object (BDO)	Data Object used by BIST Messages.
BIST Mode	A BIST receiver or transmitter test mode enabled by a BIST Message.
Cable Plug	Term used to describe a PD Capable element in a Multi-Drop system addressed by SOP’/SOP’’ Packets. Logically, the Cable Plug is associated with a USB plug at one end of the cable. In a practical implementation, the electronics can reside anywhere in the cable.
Cable Reset	Initiated by Cable Reset Signaling from either the Source or DFP. It restores the Cable Plugs to their default, power-up condition and resets the PD communications engine to its default state. It does not reset the Port Partners but does restore VCONN to its attachment state.
Cold Socket	A DFP receptacle Port that does not apply vSafe5V on VBUS until a plug insertion Sink is detected Attached.
Command	Request and response pair defined as part of a Structured Vendor Defined Message (see Section 6.4.4.2).
Configuration Channel (CC)	Single wire used by the BMC PHY Layer Signaling Scheme (see [USB Type-C 1.2]).
Connected	USB Power Delivery ports that have exchanged a Message and a GoodCRC Message response using the USB Power Delivery protocol so that both Port Partners know they are PD Capable.
Consumer	The capability of a PD Port (typically a Device’s UFP) to sink power from the power conductor (e.g., VBUS). This corresponds to a Type-USB Type-B Port or a Type-USB Type-C Port with Rd asserted on its CC Wire.
Consumer/Provider	A Consumer with the additional capability to act as a Provider. This corresponds to a Dual-Role Type-USB Type-B Port or a Dual-Role Type-USB Type-C Port with Rd asserted on its CC Wire.
Continuous BIST Mode	A BIST Mode where the Port or Cable Plug being tested sends a continuous stream of test data.
Contract	An agreement on both power level and direction reached between a Port Pair. A Contract can be explicitly negotiated between the Port Pair or can be an Implicit power level defined by the current state. While operating in Power Delivery mode, there will always be either an Explicit or Implicit Contract in place. The Contract can only be altered in the case of a (re-)negotiation, Power Role Swap, Data Role Swap, Hard Reset, or failure of the Source.
Control Message	A Message is defined as a Control Message when the Number of Data Objects field in the Message Header is set to 0. The Control Message consists only of a Message Header and a CRC.
Data Message	A Data Message consists of a Message Header followed by one or more Data Objects. Data Messages are easily identifiable because the Number of Data Objects field in the Message Header is a non-zero value.
Data Object	32-bit object which contains information specific to different types of Data Message. Power, Request, BIST, and Vendor Data Objects are defined.
Data Role Swap	Process of exchanging the DFP (Host) and UFP (Device) roles between Port Partners using the [USB Type-C 1.2] connector.
Dead Battery	A device with a Dead Battery.
Definitions and Terms

Battery
When the Battery in a device is unable to power its functions.

Detach
Mechanical unjoining of the Port Pair by removal of the cable. Detached USB Power Delivery ports are no longer mechanically joined with a USB cable.

Device

Lower cased: Refers to any USB product, either USB Device or USB Host.
Upper case: Refers to a USB Device (Peripheral or Hub).
Device Policy Manager
Module running in a Provider or Consumer that applies Local Policy to each Port in the Device via the Policy Engine.

Discovery Process
Command sequence using Structured Vendor Defined Messages resulting in the identification of the Port Partner, its supported SVIDs, and Modes.

Downstream Facing Port (DFP)
Indicates the Port’s position in the USB topology, typically corresponding to a USB Host root Port or Hub downstream Port as defined in [USB Type-C 1.2]. At connection, the Port defaults to operation as a USB Host (when USB Communication is supported) and Source. Typically a Type-A Port on a Device as defined in [USB 2.0], [USB 3.1], or a Type-C Port as defined in [USB Type-C 1.2]. Default is Host and Source.

Dual-Role Data (DRD)
Capability of operating as either a DFP or UFP.

Dual-Role Data Port
A Port capable of operating as a DRD.

Dual-Role Power (DRP)
Capability of operating as either a Source or Sink.

Dual-Role Power Device
A product containing one or more Dual-Role Power Ports that are capable of operating as either a Source or a Sink.

Dual-Role Power Port
A Consumer/Provider or Provider/Consumer capable Port that is a Port capable of operating as a DRP.

End of Packet (EOP)
K-code marker used to delineate the end of a packet.

Enter Mode
Process Command sequence using Structured Vendor Defined Messages resulting in the Port Partners entering a Mode.

Error Recovery
Error recovery process as defined in [USB Type-C 1.2].

Exit Mode
Process Command sequence using Structured Vendor Defined Messages resulting in the Port Partners exiting a Mode.

Explicit Contract
An agreement reached between a Port Pair as a result of the Power Delivery negotiation process. An Explicit Contract is established (or continued) when a Source sends an Accept Message in response to a Request Message sent by a Sink followed by a PS_RDY Message indicating that the power supply is ready. This corresponds to the PE_SRC_Ready state for a Source Policy Engine and the PE_SNK_Ready state for a Sink Policy Engine. The Explicit Contract can be altered through the re-negotiation process. All Port pairs, except for those involving low power devices, are required to make an Explicit Contract.

Fixed Battery
A Battery that is not easily removed or replaced by an end user (e.g., requires a special tool to access or is soldered in).

Fixed Supply
A well-regulated fixed voltage power supply. This is exposed by the Fixed Supply PDO (see Section 6.4.1.2.3).

Frame
Generic term referring to an atomic communication transmitted by PD such as a Packet, Test Frame, or Signaling.

Hard Reset
Initiated by Hard Reset Signaling from either Port Partner. It restores VBUS to USB Default Operation and resets the PD communications engine to its default state in both Port Partners as well as in any Attached Cable Plugs. For Type-USB Type-C connectors, it restores both Port Partners to their default Data Roles and returns the VCONN Source to the Source Port.

HDD
Hard Disk Drive.

ID Header VDO
The VDO in a Discover Identity ACK Command immediately following the VDM Header. The ID Header VDO contains information corresponding to the Power Delivery Product.

Implicit Contract
An agreement on power levels between a Port Pair which occurs, not as a result of the Power Delivery negotiation process, but as a result of the current state (e.g., during a Power Role Swap or Dead Battery operation, or on detection of a low power device). Implicit Contracts, except for those involving low power devices, are temporary since the Port pair is required to immediately negotiate an Explicit Contract.

Initiator
The initial sender of a Command request in the form of a query.

Interrupt

The act of returning to the appropriate ready state on receiving a Protocol Error in order to process the incoming Message. See Interruptible.
Also applies to cases where PD Communication cannot be continued, such as in the case of Detach.
Interruptible
An AMS that, on receiving a Protocol Error, returns to the appropriate ready state in order to process the incoming Message is said to be Interruptible. Every AMS is Interruptible until the first Message in the AMS has been sent (a GoodCRC Message has been received). An AMS of Vendor Messages is Interruptible during the entire sequence.

IoC
The negotiated current value as defined in [IEC 63002].

IR Drop
The voltage drop across the cable and connectors between the Source and the Sink. It is a function of the resistance of the ground and power wire in the cable plus the contact resistance in the connectors times the current flowing over the path.

K-code
Special symbols provided by the 4b5b coding scheme. K-codes are used to signal Hard Reset and Cable Reset and delineate Packet boundaries.

Local Policy
Every PD Capable device has its own Policy, called the Local Policy, that is executed by its Policy Engine to control its power delivery behavior. The Local Policy at any given time can be the default policy, hard coded, or modified by changes in operating parameters, or one provided by the system Host or some combination of these. The Local Policy optionally can be changed by a System Policy Manager.

Low Power
State in which Sources powered by, e.g., a single cell Li Battery want to minimize the power they output over VBUS without the requirement to fully support the PD negotiation process.

Low Power Device
Devices which can be powered, e.g., by a single cell Li Battery.
Definitions and Terms

Cell Li Battery
A battery that does not fully support the PD negotiation process.

Message
The packet payload consisting of a Message Header for Control Messages and a Message Header and data for Data Messages as defined in Section 5.6.1.2.5.

Message Header
Every Message starts with a 16-bit Message Header containing basic information about the Message and the PD Port’s capabilities.

Messaging
Communication in the form of Messages as defined in Section 6.

Modal Operation
State where there are one or more Active Modes. Modal Operation ends when there are no longer any Active Modes.

Mode
Operation defined by a Vendor or Standard’s organization, which is associated with a SVID, whose definition is outside the scope of USB-IF specifications. Entry to and exit from the Mode use the Enter Mode and Exit Mode Processes. Modes are equivalent to “Alternate Modes” as described in [USB Type-C 1.2].

Multi-Drop
Refers to a Power Delivery system with one or more Cable Plugs where communication is directed to the Cable Plugs rather than the Port Partner. Multi-Drop systems share the Power Delivery communication channel with the Port Partners.

Negotiation
The PD process whereby:

The Source advertises its capabilities.
The Sink requests one of the advertised capabilities.
The Source acknowledges the request and alters its output to satisfy the request.
The result of the negotiation is a Contract for power delivery/consumption between the Port Pair.
Non-Interruptible
An AMS that, on receiving a Protocol Error, generates either a Soft Reset or Hard Reset. Any power-related AMS is Non-Interruptible once the first Message in the AMS has been sent (a GoodCRC Message has been received).

Packet
One entire unit of PD communication including a Preamble, SOP*, payload, CRC, and EOP as defined in Section 5.6.

Passive Cable
Cable with a USB Plug on each end, at least one of which is a Cable Plug supporting SOP’, that does not incorporate data bus signal conditioning circuits. Supports the Structured VDM Discover Identity to determine its characteristics (Electronically Marked Cable see [USB Type-C 1.2]). Note this specification does not discuss Passive Cables which are not Electronically Marked Cables.

PD (Power Delivery)
A Port that supports USB Power Delivery.

PD Connection
See Connected.

PD Power (PDP)
The output power of a Source, as specified by the manufacturer and expressed in Fixed Supply PDOs as defined in Section 10.

PDUSB
USB Device Port or USB Host Port that is both PD capable and capable of USB Communication. See also PDUSB Host, PDUSB Device, and PDUSB Hub.

PDUSB Device
A USB Device with a PD Capable UFP. A PDUSB Device is only addressed by SOP Packets.

PDUSB Host
A USB Host which is PD Capable on at least one of its DFPs. A PDUSB Host is only addressed by SOP Packets.

PDUSB Hub
A port expander USB Device with a UFP and one or more DFPs which is PD Capable on at least one of its Ports. A PDUSB Hub is only addressed by SOP Packets.

PDUSB Peripheral
A USB Device with a PD Capable UFP which is not a PDUSB Hub. A PDUSB Peripheral is only addressed by SOP Packets.

PHY Layer
The Physical Layer responsible for sending and receiving Messages across either VBUS or CC between a Port Pair.

Policy
Defines the behavior of PD capable parts of the system and specifies the capabilities it advertises, requests made to (re)negotiate power, and the responses made to requests received.

Policy Engine (PE)
The Policy Engine interprets the Device Policy Manager’s input in order to implement Policy for a given Port and directs the Protocol Layer to send appropriate Messages.

Port
An interface typically exposed through a receptacle, or via a plug on the end of a hard-wired captive cable. USB Power Delivery defines the interaction between a Port Pair.

Port Pair
Two Attached PD Capable Ports.

Port Partner
A Contract is negotiated between a Port Pair connected by a USB cable. These ports are known as Port Partners.

Power Conductor
The wire delivering power from the Source to the Sink. For example, USB’s VBUS.

Power Consumer
See Consumer.

Power Data Object (PDO)
Data Object used to expose a Source Port’s power capabilities or a Sink’s power requirements as part of a Source_Capabilities or Sink_Capabilities Message respectively. Fixed, Variable, and Battery Power Data Objects are defined.

Power Delivery Mode
Operation after a Contract has initially been established between a Port Pair. This mode persists during normal Power Delivery operation, including after a Power Role Swap. Power Delivery mode can only be exited by Detaching the ports, applying a Hard Reset, or by the Source removing power (except when power is removed during the Power Role Swap procedure).

Power Provider
See Provider.

Power Reserve
Power which is kept back by a Source to ensure that it can meet the total power requirements of Attached Sinks on at least one Port.

Power Role Swap
Process of exchanging the Source and Sink roles between Port Partners.

Preamble
Start of a transmission used to enable the receiver to lock onto the carrier. The Preamble consists of a 64-bit sequence of alternating 0s and 1s starting with a "0" and ending with a "1" which is not 4b5b encoded.

Product Type
Product categorization returned as part of the Discover Identity Command.

Product Type VDO
VDO identifying a certain Product Type in the ID Header VDO of a Discover Identity Command.

Protocol Error
An unexpected Message during an Atomic Message Sequence. A Protocol Error during a Non-Interruptible AMS will result in either a Soft Reset or a Hard Reset. A Protocol Error during an Interruptible AMS will result in a return to the appropriate ready state where the Message will be handled.

Protocol Layer
The entity that forms the Messages used to communicate information between Port Partners.

Provider
A capability of a PD Port (typically a Host, Hub, or Wall Wart DFP) to source power over the power conductor (e.g., VBUS). This corresponds to a Type-USB Type-A Port or a Type-USB Type-C Port with Rp asserted on its CC Wire.

Provider/Consumer
A Provider with the additional capability to act as a Consumer. This corresponds to a Dual-Role Type-USB Type-A Port or a Dual-Role Type-USB Type-C Port with Rp asserted on its CC Wire.

Rd
Pull-down resistor on the USB Type-C CC wire used to indicate that the Port is a Sink (see [USB Type-C 1.2]).

Reattach
Attach of the Port Pair by a cable after a previous Detach.

Re-negotiation
A process wherein one of the Port Partners wants to alter the negotiated Contract.

Request Data Object (RDO)
Data Object used by a Sink Port to negotiate a Contract as part of a Request Message.

Re-run
Start an Interruptible AMS again from the beginning after a Protocol Error.

Responder
The receiver of a Command request sent by an Initiator that replies with a Command response.

Rp
Pull-up resistor on the USB Type-C CC wire used to indicate that the Port is a Source (see [USB Type-C 1.2]).

Safe Operation
Sources must have the ability to tolerate vSafe5V applied by both Port Partners.

Signaling
A Preamble followed by an ordered set of four K-codes used to indicate a particular line symbol (e.g., Hard Reset) as defined in Section 5.4.

Signaling Scheme
Physical mechanism used to transmit bits. BMC and BFSK Signaling Schemes are defined in this specification.

Single-Role Port
A Port that is only capable of operating as a Source or Sink, but not both.

Sink
The Port consuming power from VBUS; most commonly a Device.

Soft Reset
A process that resets the PD communications engine to its default state.

SOP Communication
Communication using SOP Packets implies that a Message sequence is being followed.

SOP Packet
Any Power Delivery Packet which starts with an SOP.

SOP Communication*
Communication with a Cable Plug using SOP* Packets implies a Message sequence is being followed.

SOP Packet*
Any Power Delivery Packet which starts with either SOP, SOP’, or SOP’’ used to communicate with a Cable Plug.

SOP’ Communication
Communication with a Cable Plug using SOP’ Packets implies that a Message sequence is being followed.

SOP’ Packet
Any Power Delivery Packet which starts with an SOP’ used to communicate with a Cable Plug.

SOP’’ Communication
Communication with a Cable Plug using SOP’’ Packets implies that a Message sequence is being followed.

SOP’’ Packet
Any Power Delivery Packet which starts with an SOP’’ used to communicate with a Cable Plug when SOP’ Packets are being used to communicate with the other Cable Plug.

Source
A role a Port is currently taking to supply power over VBUS; most commonly a Host.
Standard ID (SID)
A 16-bit unsigned value assigned by the USB-IF to a given industry standard.

Standard or Vendor ID (SVID)
A generic term referring to either a VID or a SID. SVID is used in place of the phrase “Standard or Vendor ID”.

Start of Packet (SOP)
K-code marker used to delineate the start of a packet. Three start of packet sequences are defined: SOP, SOP’, and SOP’’. SOP* is used to refer to all three in place of SOP/SOP’/SOP’’.

System Policy
Overall system policy generated by the system, broken up into the policies required by each Port Pair to affect the system policy. It is programmatically fed to the individual devices for consumption by their Policy Engines.

System Policy Manager (SPM)
Module running on the USB Host. It applies the System Policy through communication with PD capable Consumers and Providers that are also connected to the Host via USB.

Test Frame
Frame consisting of a Preamble, SOP*, followed by test data (See Section 5.9).

Test Pattern
Continuous stream of test data in a given sequence (See Section 5.9).

Tester
The Tester is assumed to be a piece of test equipment that manages the BIST testing process of a PD UUT.

Unexpected Message
Message that a Port supports but has been received in an incorrect state.

Unit Interval (UI)
The time to transmit a single data bit on the wire.

Unit Under Test (UUT)
The PD device that is being tested by the Tester and responds to the initiation of a particular BIST test sequence.

Unrecognized Message
Message that a Port does not understand, such as a Message using a Reserved Message type, a Message defined by a higher specification Revision than the Revision this Port supports, or an Unstructured Message for which the VID is not recognized.

Unsupported Message
Message that a Port recognizes but does not support. This is a Message defined by the specification but which is not supported by this Port.

Upstream Facing Port (UFP)
Indicates the Port’s position in the USB topology, typically a Port on a Device as defined in [USB Type-C 1.2]. At connection, the Port defaults to operation as a USB Device (when USB Communication is supported) and Sink. Typically a B Port on a Device as defined in [USB 2.0], [USB 3.1], or Type-C Port as defined in [USB Type-C 1.2]. The default Device and Sink.

USB Attached State
Synonymous with the [USB 2.0] and [USB 3.1] definition of the Attached state.

USB Default Operation
Operation of a Port at attach or after a Hard Reset where the DFP Source applies vSafe0V or vSafe5V on VBUS and the UFP Sink is operating at vSafe5V as defined in [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2].

USB Device
Either a hub or a peripheral device as defined in [USB 2.0] and [USB 3.1].

USB Host
The host computer system where the USB host controller is installed as defined in [USB 2.0] and [USB 3.1].

USB Powered State
Synonymous with the [USB 2.0] and [USB 3.1] definition of the powered state.

USB Safe State
State of the Type-USB Type-C connector when there are pins to be repurposed (see [USB Type-C 1.2]) so they are not damaged by and do not cause damage to their Port Partner.

USB Type-A
Term used to refer to any A plug or receptacle, including Micro-A plugs and Standard-A plugs and receptacles, including the PD and non-PD versions. Micro-AB receptacles are assumed to be a combination of USB Type-A and USB Type-B.

USB Type-B
Terms used to refer to any B-plug or receptacle, including Micro-B plugs and Standard-B plugs and receptacles, including the PD and non-PD versions. Micro-AB receptacles are assumed to be a combination of USB Type-A and USB Type-B.

USB Type-C
Term used to refer to the USB Type-C connector plug or receptacle as defined in [USB Type-C 1.2].

USB-IF PD SID (PD SID)
Standard ID allocated to this specification by the USB Implementer’s Forum.

Variable Supply
A very poorly regulated power supply that is not a Battery. This is exposed by the Variable Supply PDO (see Section 6.4.1.3.2).

VCONN Powered Accessory
An accessory that is powered from VCONN to operate in a Mode (see [USB Type-C 1.2]).

VCONN Source
The USB Type-C Port responsible for sourcing VCONN.

VCONN Swap
Process of exchanging the VCONN Source between Port Partners.

VDM Header
The first Data Object following the Message Header in a Vendor Defined Message. The VDM Header contains the SVID relating to the VDM being sent and provides information relating to the Command in the case of a Structured VDM (see Section 6.4.4).

Vendor Data Object (VDO)
Data Object used to send Vendor-specific information as part of a Vendor-Defined Message.

Vendor Defined Message (VDM)
PD Data Message defined for vendor/standards usage. These are further partitioned into Structured VDM Messages, where Commands are defined in this specification, and Unstructured VDM Messages which are entirely Vendor Defined (see Section 6.4.4).

Vendor ID (VID)
A 16-bit unsigned value assigned by the USB-IF to a given Vendor.

VI
Same as power (i.e., voltage * current = power).

Wall Wart
A power supply or “power brick” that is plugged into an AC outlet. It supplies DC power to power a device or charge a Battery.

2. Overview

This section contains no Normative requirements.

2.1 Introduction

In USB Power Delivery, pairs of directly attached ports negotiate voltage, current, and/or direction of power flow over the USB cable, using VBUS or the CC wire as the communications channel. The mechanisms used operate independently of other USB methods used to negotiate power. USB Type-C connectors can support the CC wire as the communications channel and can also support VBUS communication but not concurrently. USB Type-A and USB Type-B connectors can only support VBUS communication.

USB Power Delivery also acts as a side-band channel enabling support for Standard or Vendor-defined Modal Operations. Modes are associated with a Standard or Vendor ID (SVID). Power Delivery Structured VDM Messages can be used to discover supported SVIDs and Modes and then to enter and exit Modes as required. Multiple Active Modes can also be in operation simultaneously.

Any Contract negotiated using this specification supersedes any and all previous power contracts established through standard [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2] mechanisms. While in Power Delivery Mode, there will be a Contract in place (either Explicit or Implicit) determining the power level available and the direction of that power. The Port Pair remains in Power Delivery Mode until the Port Pair is Detached, there is a Hard Reset, or the Source removes power (except during a Power Role Swap when the initial Source removes power to allow the new Source to apply power).

An Explicit Contract is negotiated by the process of the Source sending a set of Capabilities, from which the Sink is required to request a particular capability, and then the Source accepting this request. An Implicit Contract is the specified level of power allowed in particular states (e.g., during and after a Power Role Swap, in dead Battery operation, or when operating with a low power device). Except for the case of low power devices, Implicit Contracts are temporary; Port Pairs are required to immediately negotiate an Explicit Contract. In the case of low power devices, the Implicit Contract persists as long as the Port Pair remains Attached and the Source continues to supply power.

Each Provider has a Local Policy governing power allocation to its Ports. Sinks also have their own Local Policy governing how they draw power. A System Policy can be enacted over USB that allows modification of these local policies and hence management of overall power allocation in the system.

When PD Capable devices are Attached to each other, the DFPs and UFPs initially default to standard USB Default Operation. The DFP supplies vSafe5V and the UFP draws current in accordance with the rules defined by [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2] specifications. After Power Delivery negotiation has taken place, power can be supplied at higher or lower voltages and higher currents than defined in these specifications.

Power Role Swap and Cable Discovery

Power Role Swap
The process of exchanging the power supply roles such that the DFP (Downstream Facing Port) becomes the Sink (receives power) and the UFP (Upstream Facing Port) becomes the Source (supplies power).

For a USB Type-C connector, it is also possible to perform a Data Role Swap, where the DFP becomes the UFP and vice versa, and a VCONN Swap, which changes the end supplying VCONN to the cable.

Cable Discovery
Before an Explicit Contract, the Source can discover the capabilities of the Attached cable assembly. This is particularly important for [USB Type-C 1.2] where 5A cabling is marked, along with other details such as supported speed. Cable discovery occurs upon initial attachment of a Port Pair before an Explicit Contract is established, where the DFP is the Source. It is also possible to carry out cable discovery after a Power Role Swap, prior to establishing an Explicit Contract, where the UFP is the Source and an Implicit Contract is in place.

Once an Explicit Contract is in place, only the DFP is permitted to communicate with the Attached cable assembly. This communication may include discovering capabilities, SVIDs, Modes, and entering/exiting Modes supported by the cable assembly.

2.2 Section Overview

This specification contains the following sections:

Section 1: Introduction, conventions used in the document, list of terms and abbreviations, references, and details of parameter usage.
Section 2: Overview of the document, including a description of the operation of PD and the architecture.
Section 3: Mechanical and electrical characteristics of the cables and connectors used by PD.
Section 4: Electrical requirements for Dead Battery operation and cable detection.
Section 5: Details of the PD PHY Layer requirements.
Section 6: Protocol Layer requirements, including the Messages, timers, counters, and state operation.
Section 7: Power supply requirements for both Providers and Consumers.
Section 8: Device Policy Manager requirements, Policy Engine Message sequence diagrams, and state diagrams.
Section 9: USBPD Device requirements, including mapping of VBUS to USB states and System Policy Manager requirements, including descriptors, events, and requests.
Section 10: Rated Output Power definitions for PD.
Appendix A: Deprecated.
Appendix B: Example CRC calculations.
Appendix C: Considerations for power supply implementations.
Appendix D: Mating illustrations for the Standard-A.
Appendix E: Information relating to PHY Layer implementations.
Appendix F: Scenarios illustrating Device Policy Manager operation.
Appendix G: Examples of Structured VDM usage.
2.3 USB Power Delivery Capable Devices

Examples of USB Power Delivery capable devices are illustrated in Figure 2-1 (a Host, a Device, a Hub, and a Charger). These examples are provided for reference only and do not limit the possible configurations of products that can be built using this specification.

Figure 2-1: Logical Structure of USB Power Delivery Capable Devices

USB Host: UFP
USB Device: Power Storage, External power
USB Hub: DFP, Power Storage, External power
USB Charger: UFP, Power Storage, External power
Each USB Power Delivery capable device is assumed to consist of at least one Port. Providers are assumed to have a Source and Consumers a Sink. Each device contains one or more of the following components:

UFPs:

Sink power
Optionally source power (a Dual-Role Power Device)
Optionally communicate via USB
Communicate using SOP Packets
Optionally Communicate using SOP* Packets
DFPs:

Source power
Optionally Sink power (a Dual-Role Power Device)
Optionally communicate via USB
Communicate using SOP Packets
Optionally Communicate using SOP* Packets
A Source that can be:

An external power source (e.g., AC)
Power Storage (e.g., Battery)
Derived from another Port (e.g., bus-powered Hub)
A Sink that can be:

Power Storage (e.g., a Battery)
Used to power internal functions
Used to power devices Attached to other devices (e.g., a bus-powered Hub)
A VCONN Source that:

Can be either Port Partner, either the DFP/UFP or Source/Sink
Powers the Cable Plug(s)
2.4 SOP Communication*

Introduction
The Start of Packet (SOP) is used as an addressing scheme to identify whether the communications are intended for one of the Port Partners (SOP Communication) or one of the Cable Plugs (SOP’/SOP’’ Communication). SOP/SOP’ and SOP’’ are collectively referred to as SOP*.

SOP Collision Avoidance*
Collision avoidance is coordinated by the DFP. Messages shall not be initiated by cables. The use of tCableMessage timing prevents collisions during PD communications and enables the UFP time slots to communicate.

SOP Communication
SOP Communication is used for Port to Port communication between the Source and the Sink. SOP Communication is recognized by both Port Partners but not by any intervening Cable Plugs. SOP Communication takes priority over other SOP* Communications to ensure critical power-related operations are completed as soon as possible. Message sequences related to power are allowed to interrupt other sequences to ensure that negotiation and control of power are given priority on the bus.

SOP’/SOP’’ Communication with Cable Plugs
SOP’ Communication is recognized by electronics in one Cable Plug (which could be attached to either the UFP or DFP). SOP Communication between the Port Partners is not recognized by the Cable Plug.

Note: The term Cable Plug in the SOP’ Communication case represents a logical entity in the cable capable of PD Communication, which may or may not be physically located in the plug.

Figure 2-2: SOP’ Communication between Source and Cable Plug with no Explicit Contract or an Implicit Contract.
Figure 2-3: SOP’ Communication between DFP and Cable Plug with PD Explicit Contract.

All SOP* Communication occurs over a single wire (either VBUS or CC). Therefore, SOP* Communication periods must be coordinated to prevent important communication from being blocked. For products that do not recognize SOP/SOP’ or SOP’’ Packets, this will appear as a non-idle channel, leading to missed packets and retries.

2.5 Operational Overview

A USB Power Delivery Port supplying power is known as a Source, and a Port consuming power is known as a Sink. There is only one Source Port and one Sink Port in each PD connection between Port Partners.

At Attach, the Source Port (the Port with Rp asserted as per [USB Type-C 1.2]) is also the DFP and VCONN Source.
At Attach, the Sink Port (the Port with Rd asserted) is also the UFP and is not the VCONN Source.
The Source/Sink roles, DFP/UFP roles, and VCONN Source role can all subsequently be swapped orthogonally to each other.
Source and Sink Roles
Dual-Role Power Port (DRP)
A USB Type-C Port that supports both Source and Sink roles is called a Dual-Role Power Port (DRP).

Dual-Role Data Port (DRD)
A USB Type-C Port that supports both DFP (Downstream Facing Port) and UFP (Upstream Facing Port) roles is known as a Dual-Role Data Port (DRD).

When a Port supports USB Communications Capability in the DFP role, it can act as a USB Host. Similarly, if USB Communications Capability is supported in the UFP role, the Port can act as a USB Device.

The following sections describe the high-level operation of Ports assuming the roles of DFP, UFP, Source, and Sink. This description excludes operations not supported by this specification. For details on how PD maps to USB states in a USBPD Device, see Section 9.1.2.

Source Operation
1. At Attach (no PD Connection or Contract):

The DFP can detect the attachment of an A plug or detect Sink attachment via a C-Plug.
For a Source-only Port, the Source detects Sink attachment.
For a DRP, the Port becomes a Source Port upon attachment of a Sink.
The Source typically sets VBUS to vSafe5V.
2. Before PD Connection (no PD Connection or PD Contract):

Prior to sending Source_Capabilities Messages, the Source detects the type of cable attached and adjusts its advertised capabilities accordingly:
For an A-plug or B-plug, detection will determine the current-carrying capabilities of the cable.
For a C-plug, the default capability is 3A, but SOP' Communication can be used to determine other cable capabilities. The DFP can communicate with the Cable Plug using SOP' Packets.
The default capability of a USB Type-C cable is 3A, but SOP' Communication is used to discover other capabilities.
The Source periodically advertises its capabilities by sending Source_Capabilities Messages every tTypeCSendSourceCap or tSendSourceCap.
3. Establishing PD Connection (no PD Connection or Contract):

Presence of a PD Capable Port Partner is detected by:
Receiving a GoodCRC Message in response to a Source_Capabilities Message.
Receiving Hard Reset Signaling.
4. Establishing Explicit Contract (PD Connection but no Explicit Contract or Implicit Contract after a Power Role Swap):

The Source receives a Request Message from the Sink and responds with an Accept Message if the request is valid, followed by a PS_RDY Message when its power supply is ready to source power at the agreed level. An Explicit Contract is then established.
5. During PD Connection (Explicit Contract - PE_SRC_Ready State):

The Source processes and responds to all Messages received and sends appropriate Messages based on its Local Policy.
The Source informs the Sink of capability changes by sending a Source_Capabilities Message.
The Source will always have Rp asserted on its CC wire.
If the Port is a DRP, it can initiate or receive requests for power role exchanges. After a Power Role Swap, the Port becomes a Sink and an Implicit Contract is in place until an Explicit Contract is negotiated.
If the Port is a DRD, it can initiate or receive requests for data role exchanges. After a Data Role Swap, the DFP (Host) becomes a UFP (Device). The Port remains a Source, and the VCONN Source role remains unchanged.
The Source can initiate or receive requests for a VCONN Source exchange. During a VCONN Swap, VCONN is applied by both ends (make before break). The Port remains a Source, and DFP/UFP roles remain unchanged.
When the Source Port is also a DFP:
The Source can initiate Unstructured or Structured VDMs.
The Source can control entry and exit of modes in the Sink and manage Modal Operation using Structured VDMs.
If SOP Packets are received during SOP' or SOP'' Communication, the SOP' or SOP'' Communication is immediately terminated (the Cable Plug times out and does not retry).
If the Source needs to initiate an SOP Communication during ongoing SOP' or SOP'' Communication (e.g., for a capabilities change), the SOP' or SOP'' Communications will be interrupted.
The Source can control entry and exit of modes in the Cable Plug(s) and manage Modal Operation.
For a multi-port system:
The Source will issue GotoMin requests when power reserve is needed.
6. Detach or Communications Failure:

The Source detects plug Detach and reduces VBUS to vSafe5V within tSafe5V and to vSafe0V within tSafe0V (using USB Type-C Detach detection via CC).
If the Source fails to receive a GoodCRC Message in response to a Message within tReceive:
A Soft Reset is issued within tSoftReset of the CRCReceiveTimer expiring.
If the Soft Reset cannot be completed, a Hard Reset is issued within tHardReset of the CRCReceiveTimer to restore VBUS to USB Default Operation within ~1-1.5s.
If the Source is also the VCONN Source, VCONN will also be power cycled during the Hard Reset.
No response to further communication attempts is interpreted as an error (see Error Handling).
7. Error Handling:

Protocol Errors: Handled by a Soft_Reset Message issued by either Port Partner. This resets counters, timers, and states but does not change the negotiated voltage and current or the Port's role and does not cause an exit from Modal Operation.
Serious Errors: Handled by Hard Reset Signaling issued by either Port Partner. A Hard Reset:
Resets the protocol as for a Soft Reset but also returns the power supply to USB Default Operation (vSafe0V or vSafe5V) to protect the Sink.
Restores the Port’s data role to DFP.
When the Sink is the VCONN Source, it removes VCONN and the Source Port is restored as the VCONN Source.
Causes all Active Modes to be exited so that the Source is no longer in Modal Operation.
After a Hard Reset, the Port Partner is expected to respond within tNoResponse. If no response occurs, nHardResetCount further Hard Resets are carried out before the Source enters ErrorRecovery state as defined in [USB Type-C 1.2].
Sink Operation
1. At Attach (no PD Connection or Contract):

The Sink detects Source Attachment through the presence of vSafe5V.
For a DRP, the Port becomes a Sink Port upon attachment of a Source.
Once the Sink detects vSafe5V on VBUS, it waits for a Source_Capabilities Message indicating the presence of a PD capable Source.
If the Sink does not receive a Source_Capabilities Message within tSinkWaitCap / tTypeCSinkWaitCap, it issues Hard Reset Signaling to prompt the Source Port to send a Source_Capabilities Message if the Source Port is PD capable.
The Sink does not generate SOP' or SOP'' Packets, is not required to detect them, and discards any received SOP' or SOP'' Packets.
2. Establishing PD Connection (no PD Connection or Contract):

The Sink receives a Source_Capabilities Message and responds with a GoodCRC Message.
The Sink does not generate SOP' or SOP'' Packets, is not required to detect them, and discards any received SOP' or SOP'' Packets.
3. Establishing Explicit Contract (PD Connection but no Explicit Contract or Implicit Contract after a Power Role Swap):

The Sink receives a Source_Capabilities Message from the Source and responds with a Request Message. If this request is valid, the Sink receives an Accept Message followed by a PS_RDY Message when the Source’s power supply is ready to source power at the agreed level. At this point, the Source and Sink enter into an Explicit Contract.
The Sink Port can request one of the capabilities offered by the Source, even if it is the vSafe5V output offered.
Sink Operation
1. At Attach (no PD Connection or Contract):

For Sinks using A-plug or B-plug: The request is limited by the detected cabling capabilities. Plug detection determines the cable's current-carrying capabilities.
For Sinks using C-plug: The request can be made from any capabilities offered by the Source.
If a Sink does not request any capability: It results in an error.
If a Sink cannot fully operate at the offered capabilities: It requests the default capability but indicates a preferred power level, providing a physical failure indication (e.g., an LED).
The Sink does not generate SOP' or SOP'' Packets, is not required to detect them, and discards any received SOP' or SOP'' Packets.
2. During PD Connection (Explicit Contract – PE_SNK_Ready State):

The Sink processes and responds to all received Messages and sends appropriate Messages based on its Local Policy.
If the Sink's power needs change: It indicates this to the Source with a new Request Message. The Sink can request any previously offered capabilities from the Source, even if it's the vSafe5V output.
If no capability is requested with a Request Message: It results in an error.
If the Sink cannot fully operate at the offered capabilities: It requests the offered capability but indicates a capability mismatch and provides a physical failure indication (e.g., an LED).
The Sink will always have Rd asserted on its CC wire.
For DRP Ports: The Sink can initiate or receive requests for data role exchanges. After a Data Role Swap, the DFP (Host) becomes a UFP (Device). The Port remains a Sink, and the VCONN Source role (if any) remains unchanged.
The Sink can initiate or receive requests for a VCONN Source exchange. During a VCONN Swap, VCONN is applied by both ends (make before break). The Port remains a Sink, and DFP/UFP roles remain unchanged.
If the Sink Port is also a DFP:
The Sink can initiate Unstructured or Structured VDMs.
The Sink can control entry and exit of modes in the Source and manage Modal Operation using Structured VDMs.
3. Detach or Communications Failure:

The Sink detects removal of VBUS and interprets this as the end of the PD Connection, unless vSafe0V is due to a Hard Reset, Power Role Swap, or Fast Role Swap.
The Sink detects plug removal and discharges VBUS.
If the Sink fails to receive a GoodCRC Message in response to a Message within tReceive:
A Soft Reset is issued within tSoftReset of the CRCReceiveTimer expiring.
If the Soft Reset cannot be completed, a Hard Reset is issued within tHardReset of the CRCReceiveTimer to restore VBUS to USB Default Operation within ~1-1.5s.
No response to further communication attempts is interpreted as an error (see Error Handling).
Errors during power transitions lead to a Hard Reset to restore power to default levels.
4. Error Handling:

Protocol Errors: Handled by a Soft_Reset Message issued by either Port Partner, which resets counters, timers, and states but does not change the negotiated voltage and current or the Port’s role (e.g., Sink, DFP/UFP, VCONN Source) and does not cause an exit from Modal Operation.
Serious Errors: Handled by Hard Reset Signaling issued by either Port Partner. A Hard Reset:
Resets the protocol as for a Soft Reset but also returns the power supply to USB Default Operation (vSafe0V or vSafe5V) to protect the Sink.
Restores the Port’s data role to UFP.
When the Sink is the VCONN Source, it removes VCONN, and the Source Port is restored as the VCONN Source.
Causes all Active Modes to be exited, so the Source is no longer in Modal Operation.
After a Hard Reset, the Port Partner is expected to respond within tTypeCSinkWaitCap. If no response occurs, 2 further Hard Resets are carried out before the UFP stays in the PE_SNK_Wait_for_Capabilities state.
Cable Plugs
1. General Characteristics:

Cable Plugs are powered when VCONN is present but do not have knowledge of the Contract status.
Cable Plugs do not initiate message sequences and only respond to messages sent to them.
2. Detach or Communications Failure:

Communications can be interrupted at any time.
There is no communication timeout scheme between the DFP and Cable Plug.
The Cable Plug is ready to respond to potentially repeated requests.
3. Error Handling:

Hard Reset Signaling: The Cable Plug detects this to determine that the Source and Sink have been reset and will need to reset itself (equivalent to a power cycle).
The Cable Plug cannot generate Hard Reset Signaling itself.
The Hard Reset process power cycles both VBUS and VCONN, which is expected to reset the Cable Plugs.
Cable Reset Signaling: The Cable Plug detects this to determine it needs to reset itself (equivalent to a power cycle).
Architectural Overview
1. High-Level Architecture:

This architecture is a logical model used by the USB Power Delivery specification and not an implementation architecture.
Various implementation options are possible, including different PD device configurations such as USB or non-USB communication, single vs. multiple ports, dedicated vs. shared power supplies, hardware vs. software-based implementations.
2. Major Components:

Device Policy Manager (DPM): Manages USB Power Delivery resources within the device across one or more ports based on the Device’s Local Policy.
Policy Engine: Implements the Local Policy for each USB Power Delivery Port.
Protocol Layer: Enables Messages to be exchanged between Source and Sink Ports.
Physical Layer: Handles bit transmission and reception on the wire and manages data transmission.
3. USB Power Delivery Communication Over USB:

An Optional System Policy Manager communicates with the PD Device over USB, via the root Port and potentially through a tree of USB Hubs.
The Device Policy Manager interacts with the USB interface in each device to provide and update PD-related information in the USB domain.
Note: A PD device is not required to have a USB device interface.
4. Logical Blocks Between Two Attached PD Ports:

For a Provider or Dual-Role Power Device: One or more Sources provide power to one or more ports.
For a Consumer or Dual-Role Power Device: A Sink consumes power.
Cable Detection Module: Detects the presence of VBUS for Sink Ports and identifies the type of PD cable attached.
High-Level Architecture
1. Components Overview:

Device Policy Manager: Manages resources for Providers or Consumers by interacting with the communication stack, Source/Sink, and cable detection.
Providers and Consumers: Dual-Role Power Devices can combine elements of both Providers and Consumers. Providers can include multiple Source Ports, each with its own communication stack and cable detection.
2. Policy Levels:

System Policy: Applied system-wide by the System Policy Manager across multiple Providers or Consumers.
Local Policy: Enforced on individual Providers or Consumers by the Device Policy Manager.
3. System Policy Manager:

Role: Monitors and controls System Policy between Providers and Consumers via USB.
Requirement: Resides in the USB Host and communicates with Device Policy Managers in connected Devices. Optional for operation, as USB Power Delivery can function without it, especially in "headless" systems or when the USB Host lacks a System Policy Manager.
4. Device Policy Manager:

Role: Controls USB Power Delivery within a specific Consumer or Provider, enacting Local Policies on a per Port basis and communicating with the System Policy Manager.
5. Policy Engine:

Role: Implements Local Policies on connected Source or Sink Ports and interacts with the Device Policy Manager to enforce and update these policies.
Message Formation and Transmission
1. Protocol Layer:

Function: Forms and sends Messages for communication between ports, including Capabilities Messages, requests, and acknowledgements. It handles role swapping and maintains presence, following a push model where the Provider pushes capabilities to the Consumer.
2. PHY Layer:

Function: Manages the transmission and reception of Messages across VBUS or CC wires, employing signaling schemes like BFSK (for VBUS) or BMC (for CC). It handles data collision avoidance and error detection using CRC.
Power Supply
1. Source:

Role: Provides power controlled by Local Policy. It starts in USB Default Operation with vSafe0V or vSafe5V and transitions based on Attach events or Hard Resets.
2. Sink:

Role: Assumes one Sink per Port, controlled by Local Policy. It operates in USB Default Operation with vSafe5V and returns to this state on Detach or Hard Reset.
3. Dual-Role Power Ports:

Role: Can operate as either Source or Sink. A Provider/Consumer or Consumer/Provider can switch between these roles and return to default roles on Detach or Hard Reset.
4. Dead Battery or Lost Power Detection:

Mechanism: Allows Providers/Consumers to communicate with and charge from a Dead Battery using defined mechanisms.
DFP/UFP Roles
1. Downstream Facing Port (DFP):

Role: Equivalent to USB A-Port and acts as the USB Host when USB Communication is supported.
2. Upstream Facing Port (UFP):

Role: Equivalent to USB B-Port and acts as the USB Device when USB Communication is supported.
3. Dual-Role Data Ports:

Role: Can operate as either DFP or UFP and switch between these roles. They can switch roles without being Dual-Role Power Ports.
VCONN Source
1. Role: Initially the Source Port. VCONN sourcing can be swapped between Source and Sink Ports in a make-before-break manner to ensure Cable Plugs remain powered.

Cable and Connectors
1. Cable Detection:

Function: Detects the type of attached cable and provides this information to the Device Policy Manager. Adjustments to Local Policy are made accordingly, and cabling issues can be communicated to the System Policy Manager.
2. Certified USB Cables:

Assumption: The USB Power Delivery specification assumes compliance with USB cables defined in [USB 2.0], [USB 3.1], or [USB Type-C 1.2] specifications. Legacy cables, particularly 'Y' cables, are noted for potential non-compliance issues.
USB Power Delivery (PD) Specification Overview
Cable and Connector Characteristics
1. Cable Assemblies:

Problematic Cables: 'Y' and 'W' cables are identified as problematic due to potential safety hazards, especially with higher PD voltages. They can damage equipment if not properly managed.
Detection Mechanisms: USB PD specifies methods for detecting compliant cables and avoiding unsafe configurations.
2. Interactions with Non-PD Devices:

Mixed Environment: USB PD operates only when two PD-compatible devices are directly connected. In mixed environments with non-PD devices:
Non-PD Host (DFP/Source): Does not send PD advertisements; the PD device defaults to standard USB power rules.
Non-PD Device (UFP/Sink): Does not see PD advertisements; the DFP continues to supply vSafe5V as per standard USB specifications.
Power Rules and Specifications
1. Power Rules:

Define the voltage and current ranges provided by USB PD Sources and used by PD Sinks. Detailed in Section 10 of the specification.
2. USB Type-A and Type-B Connectors:

Characteristics: USB PD operates at voltages and currents beyond standard USB specifications. Specific features of USB PD connectors and cable assemblies are crucial for safety and functionality.
3. Connectors Overview:

Types Defined:
PD Standard-A and Standard-B plugs and receptacles
PD Micro-A, Micro-AB, and Micro-B plugs and receptacles
Current Capabilities:
Micro Connectors: Support up to 3A.
Standard Connectors: Support up to 5A.
4. Connector Compatibility:

USB 2.0 and USB 3.1 Compatibility: Various plugs and receptacles are compatible with PD and non-PD standards.
Detailed Table: Lists compatible plugs and receptacles, their roles, and possible configurations.
5. Mechanical Differences:

USB 2.0 PD Standard-A Connector: Includes mechanical differences for detecting PD support. Details on pin assignments and descriptions are provided.
USB 3.1 PD Standard-A Connector: Similar to the USB 3.1 Standard-A but with modifications for PD detection.
USB PD Standard-B Connectors
USB 2.0 PD Standard-B Connector:

Purpose: Facilitates delivery of up to 100 Watts.
Identification: Includes an ID pin for PD identification.
Compatibility: Accepts USB 2.0 PD Standard-B and USB 2.0 Standard-B plugs.
Restriction: USB 3.1 PD Standard-B or USB 3.1 Powered-B plugs cannot be inserted into USB 2.0 PD Standard-B receptacles.
USB 3.1 PD Standard-B Connector:

Purpose: Facilitates delivery of up to 100 Watts.
Identification: Includes an ID pin for PD identification.
Compatibility: Accepts USB 3.1 PD Standard-B, USB 3.1 Standard-B, USB 3.1 Powered-B, USB 2.0 PD Standard-B, and USB 2.0 Standard-B plugs.
Restriction: USB 3.1 PD Standard-B and USB 3.1 Standard-B plugs cannot be inserted into USB 2.0 PD Standard-B or USB 2.0 Standard-B receptacles.
Compliant Cable Assemblies
Approved Cable Assemblies:

USB 3.1 PD Standard-A to USB 3.1 PD Standard-B
USB 3.1 PD Standard-A to USB 3.1 PD Micro-B
USB 3.1 PD Micro-A to USB 3.1 PD Micro-B
USB 3.1 PD Micro-A to USB 3.1 PD Standard-B
USB 2.0 PD Standard-A to USB 2.0 PD Standard-B
USB 2.0 PD Standard-A to USB 2.0 PD Micro-B
USB 2.0 PD Micro-A to USB 2.0 PD Micro-B
USB 2.0 PD Micro-A to USB 2.0 PD Standard-B
Restrictions:

Cable Assemblies with Multiple Connectors: Not permitted to avoid risks of back-powering USB ports with high voltages.
Cable Marking: All connectors must be labeled with the USB PD icon as specified.
Special Connectors and Features
Hardwired Captive PD Cable:

Design: One end has a PD plug; the other end has a hardwired, non-removable connection.
Compliance: Must meet specification requirements including labeling with the USB PD icon.
Standard-A Insertion Detect:

Function: Supports Cold Socket capability.
Implementation: Optional for Cold Socket; must be implemented for other Standard-A configurations.
PD Detect Contact:

Function: Detects the presence of a PD Standard-A plug.
Requirements: Includes pins 10 and/or 11 in the PD Standard-A receptacle, with specific circuit conditions for detection.
Mechanical Dimensions and Specifications
Insertion Detect and PD Detect: Mechanical dimensions and implementation details for insertion detect and PD detect are provided for reference, ensuring compatibility with both USB 2.0 and USB 3.1 versions.

Signal Interference: Attention is needed for potential signal interference from VBUS, especially at higher currents and voltages.

Additional Notes
Connector Mating Interfaces: Detailed diagrams and dimensions are provided for various connector interfaces.
Vendor-Specific Implementations: Mechanical and electrical implementations can vary and are subject to vendor-specific designs.
USB 2.0 PD Standard-A Connector
Mechanical Features:

Gold Plating: Plugs must be gold plated on the inner and outer surfaces at least 1.6 mm from the leading edge.
PD Detect Contact: Should be on either the inner or outer surface of the plug shell.
USB ThinCard: Insertion of a USB ThinCard should not indicate PD Detect.
Pin Assignments:

Pin Number	Signal Name	Description	Mating Sequence
1	VBUS	Power	Third
2	D-	Differential pair (USB 2.0)	Fourth
3	D+	Differential pair (USB 2.0)	Fourth
4	GND	Ground for power return	Third
10	PD DETECT 1	Contact to detect a PD plug	Last
11	PD DETECT 2	Contact to detect a PD plug	Last
12, 13	INSERTION DETECT	Detects insertion of a plug (optional for Cold Socket)	Second
Shell	Shield	Connector metal shell	First
Mechanical Dimensions:

Figures and Footprints: Mechanical dimensions and design considerations for USB 2.0 PD Standard-A plug and receptacle are provided in associated figures (Figures 3-8, 3-9, and 3-10).
Stacked Receptacles: Stacked USB 2.0 PD Standard-A receptacles are allowed if they meet all specified requirements.
USB 3.1 PD Standard-A Connector
Mechanical Features:

Interface Definition: Figures (3-11, 3-12, and 3-13) show dimensions and footprints for the USB 3.1 PD Standard-A plug and receptacle.
Stacked Receptacles: Stacked designs are permissible if they comply with the electrical and mechanical requirements.
Pin Assignments:

Pin Number	Signal Name	Description	Mating Sequence
1	VBUS	Power	Third
2	D-	Differential pair (USB 2.0)	Fourth
3	D+	Differential pair (USB 2.0)	Fourth
4	GND	Ground for power return	Third
5	StdA_SSRX-	Enhanced SuperSpeed receiver differential pair	Fifth
6	StdA_SSRX+	Enhanced SuperSpeed receiver differential pair	Fifth
7	GND_DRAIN	Ground for signal return	Third
8	StdA_SSTX-	Enhanced SuperSpeed transmitter differential pair	Fifth
9	StdA_SSTX+	Enhanced SuperSpeed transmitter differential pair	Fifth
10	PD DETECT 1	Contact to detect a PD plug	Last
11	PD DETECT 2	Contact to detect a PD plug	Last
12, 13	INSERTION DETECT	Detects insertion of a plug (optional for Cold Socket)	Second
Shell	Shield	Connector metal shell	First
Mechanical Dimensions:

Figures and Footprints: Detailed dimensions and footprints for USB 3.1 PD Standard-A plug and receptacle are shown in Figures 3-11, 3-12, and 3-13.
USB 2.0 PD Standard-B Connector
Interface Definition:
Figures and Dimensions: Mechanical details for the USB 2.0 PD Standard-B plug and receptacle are provided in Figures 3-14 and 3-15.
ID Pin: Defined for PD applications as per Figure 3-15.
USB 2.0 PD Standard-B Connector
Mechanical Features:

Gold Plating: The plug must be gold plated on the inner and outer surfaces.

Pin Assignments and Dimensions:

Pin Number	Signal Name	Description	Mating Sequence
1	VBUS	Power	Second
2	D-	Differential pair (USB 2.0)	Third or beyond
3	D+	Differential pair (USB 2.0)	Third or beyond
4	GND	Ground for power return	Second
12	ID	Identification of PD capability	Third or beyond
Shell	Shield	Connector metal shell	First
Historical Note: Pin 11 was used by USB 3.0 as the Ground Return for DPWR but is deprecated by USB 3.1.

Mechanical Dimensions:

Figures and Footprints: Mechanical details are provided in Figures 3-14, 3-15, and 3-16.
USB 3.1 PD Standard-B Connector
Mechanical Features:

Interface Definition: Figures 3-17, 3-18, and 3-19 provide the mechanical dimensions and footprint for the USB 3.1 PD Standard-B plug and receptacle.

Pin Assignments and Descriptions:

Pin Number	Signal Name	Description	Mating Sequence
1	VBUS	Power	Second
2	D-	Differential pair (USB 2.0)	Third or beyond
3	D+	Differential pair (USB 2.0)	Third or beyond
4	GND	Ground for power return	Second
5	StdB_SSTX-	Enhanced SuperSpeed transmitter differential pair	Third or beyond
6	StdB_SSTX+	Enhanced SuperSpeed transmitter differential pair	Third or beyond
7	GND_DRAIN	Ground for signal return	Third
8	StdB_SSRX-	Enhanced SuperSpeed receiver differential pair	Third or beyond
9	StdB_SSRX+	Enhanced SuperSpeed receiver differential pair	Third or beyond
13	ID	Identification of PD capability	Shell
Historical Note: Pin 11 was defined by USB 3.1 for the Ground Return for DPWR (power supplied by the device).

Mechanical Dimensions:

Figures and Footprints: Mechanical details are provided in Figures 3-17, 3-18, and 3-19.
Cable Assemblies for USB Power Delivery
Marked Cable Assemblies:

Electronic Marking: Introduces electronic marking to identify cable assembly capabilities. The ID pin is used to mark PD capabilities in Standard-B connectors.
Detection: Devices detect and identify cable capabilities through marking and adjust power delivery accordingly.
Non-Marked Cable Assemblies:

Usage Limitations: Legacy cable assemblies (e.g., USB 2.0 or USB 3.1 Standard-A/B, Micro-B) are limited to vSafe5V and up to 1.5A.
Marked Cable Assemblies:

Detection and Negotiation: Allows detection of cable characteristics and negotiation for power delivery based on marking.
PD Cable Assembly Overmold Requirements:

Overmold Dimensions: Larger overmolds may be needed for higher current ratings, as specified in Table 3-6 and Figure 3-20.
Mechanical Interference: Overmold dimensions should conform to USB 2.0 and USB 3.1 requirements to avoid mechanical issues in stacked configurations.
Cable Assembly Marking:

PD Standard-A Connectors: Shell is 1.3 mm longer than the legacy Standard-A Connector to indicate PD capability.
Micro-A Plug Marking: Different terminations for legacy, low power, and PD-capable Micro-A plugs are described to maintain backward compatibility and support new features.
Micro-A and Micro-B Plug Connectors
Micro-A Plug Connectors:

Marking: Micro-A plug connectors must have the ID pin terminated to ground with a resistor (rID). This ensures proper identification and functionality within USB Power Delivery (PD) systems.
Schematic: The schematic diagram for a PD Micro-A plug is illustrated in Figure 3-23.
Micro-B Plug Connectors:

Legacy Micro-B: Exhibits high resistance to ground on the ID pin. Marking uses capacitors to indicate capabilities.
3A and 5A Markers:
3A Capability: Marking uses a specific schematic shown in Figure 3-24.
5A Capability: Marking uses a different schematic detailed in Figure 3-25.
USB PD Icons and Cable Requirements
USB PD Icon: Cable assemblies must display the USB PD icon. Usage and dimensioning are specified under license from USB-IF.

Cable Requirements:

General Compliance: Cables must meet the specifications outlined in Section 3, as well as USB 2.0, USB 3.1, or USB BC 1.2 standards.
Test Sequences: Must follow EIA-364-1000.001 as per [USB 3.1].
Electrical and Mechanical Specifications
Low Level Contact Resistance:

3A PD Cable Assembly:
Initial Resistance: 20mΩ maximum for VBUS and GND contacts.
Change After Stress: Maximum +10mΩ.
5A PD Cable Assembly: Same as 3A specifications.
Contact Resistance for PD Standard-A Receptacle:

Resistance Measurement:
Initial: 200mΩ maximum.
Change After Stress: Maximum +300mΩ.
Open Circuit Resistance:

Resistance Measurement: ≥ 10MΩ both initially and after environmental stress.
Dielectric Strength:

Requirement: No breakdown with 100VAC applied between adjacent contacts.
Insulation Resistance:

Requirement: Minimum of 100MΩ between adjacent contacts.
Contact Current Rating:

3A PD Connector: Delta temperature should not exceed +30°C with 3.0A current applied.
5A PD Connector: Same temperature limit with 5.0A current.
Differential Crosstalk:

Requirement: Must adhere to limits shown in Figure 3-26.
Cable Shielding Connectivity:

Shielding Resistance: No greater than 1.0Ω end-to-end. Shield should not be connected to ground within the cable.
Cable Impedance and Insertion Loss:

Impedance: Must meet specified requirements in Table 5-18.
Insertion Loss: Should not exceed specified limits.
IR Drop Considerations:

Ground Voltage Drop (VGND_DROP): Should not exceed maximum values listed in Table 3-7.
Overall Voltage Drop: Must ensure VBUS to GND drop is within specified limits.
R Drop Calculation Example
Objective: Design a compliant USB Power Delivery (PD) cable with Standard-A and Micro-B plugs, 1 meter in length, and a current rating of 3A.

Ground Wire Budget Calculation:

Maximum VGND_DROP: 375mV
Current (iCable): 3A
Rcable(GND) Calculation:
𝑅
𝑐
𝑎
𝑏
𝑙
𝑒
(
𝐺
𝑁
𝐷
)
=
𝑉
𝐺
𝑁
𝐷
_
𝐷
𝑅
𝑂
𝑃
𝑖
𝐶
𝑎
𝑏
𝑙
𝑒
=
0.375
3
=
125
𝑚
Ω
Rcable(GND)= 
iCable
VGND_DROP
​
 = 
3
0.375
​
 =125mΩ
Mated Contact Resistance: 30mΩ per connection x 2 = 60mΩ
Allowed Rcable(GND):
𝑅
𝑐
𝑎
𝑏
𝑙
𝑒
(
𝐺
𝑁
𝐷
)
=
125
𝑚
Ω
−
60
𝑚
Ω
=
65
𝑚
Ω
Rcable(GND)=125mΩ−60mΩ=65mΩ
VBUS Wire Budget Calculation:

Maximum VVBUS_DROP: 625mV
Rcable(VBUS) Calculation:
𝑅
𝑐
𝑎
𝑏
𝑙
𝑒
(
𝑉
𝐵
𝑈
𝑆
)
=
𝑉
𝑉
𝐵
𝑈
𝑆
_
𝐷
𝑅
𝑂
𝑃
𝑖
𝐶
𝑎
𝑏
𝑙
𝑒
=
0.625
3
=
208
𝑚
Ω
Rcable(VBUS)= 
iCable
VVBUS_DROP
​
 = 
3
0.625
​
 =208mΩ
Mated Contact Resistance: 30mΩ per connection x 2 = 60mΩ
Allowed Rcable(VBUS):
𝑅
𝑐
𝑎
𝑏
𝑙
𝑒
(
𝑉
𝐵
𝑈
𝑆
)
=
208
𝑚
Ω
−
60
𝑚
Ω
=
148
𝑚
Ω
Rcable(VBUS)=208mΩ−60mΩ=148mΩ
Conclusion: A 22AWG wire (52.94mΩ/m) for Ground and a 26AWG wire (134mΩ/m) for VBUS meet the IR drop requirements for a 1m cable.

Electrical Parameters Table (Table 3-7)
Insertion Loss (aInsertionLoss):
Minimum: 1.5 dB
Capacitance (cPlug):
Range: 5 to 15 nF
Cable Current Rating (iCable):
5A for Standard connectors
3A if any Micro connector is present
ID Resistor (rID):
Range: 900 to 1100 Ω
Overall IR Drop (vIRDrop_Cable):
Maximum: 1 V (sum of VVBUS_DROP and VGND_DROP)
Ground Voltage Drop (VGND_DROP1):
Maximum: 375 mV
VBUS Voltage Drop (VVBUS_DROP1):
Maximum: 625 mV
Dead Battery / Unpowered Port Detection
Overview:

Dead Battery: Occurs when a USB Device needs to provide power to a USB Host with a dead battery or no power source.
Operational Details:

Consumer/Provider Port:

Detection: Applies a current-limited 5V (vSafeDB) to VBUS to detect if the Provider/Consumer wants power.
Action: If detected, it applies full 5V (vSafe5V) to VBUS and becomes a source.
Provider/Consumer Port:

Detection: Outputs a Bit Stream when back-powered by vSafeDB.
Action: If Bit Stream detected, it switches to use vSafe5V and signals readiness to operate as a sink.
Sequence of Operation:

Consumer/Provider:

Detects if vSafe5V is not present, applies vSafeDB.
Outputs Bit Stream if a Provider/Consumer is detected.
Upon detecting a response, switches to full power mode.
Provider/Consumer:

Starts with no power on VBUS, outputs Bit Stream when vSafeDB is applied.
Switches to full power mode after detecting vSafe5V and completing internal setup.
Figure References:
Figure 4-1: Illustrates the Dead Battery/Unpowered Port Detection Flow.
Table 4-1: Describes the message sequence for Dead Battery/Unpowered Port Detection.

This summary covers the necessary details for electrical parameters and operational procedures for USB Power Delivery, including specific calculations for IR drop and detection mechanisms for various power scenarios.
Dead Battery Operation (Table 4-1)
Steps for Normal Dead Battery Operation:

Provider/Consumer:

Action: Do not drive VBUS; let it remain at vSafe0V.
Consumer/Provider: Start the DBDetectTimer to determine when to apply vSafeDB.
Consumer/Provider:

If vSafeDB is not present:
If willing to act as a Source, output vSafe5V.
If not willing to be powered, remain in this step until DBDetectTimer expires and check if VBUS is above vSafe0V. If so, operate as a Sink.
Consumer/Provider:

When DBDetectTimer expires: Start outputting vSafeDB to power the Bit Stream generation circuitry. The preparation time can be up to tTurnOnSafeDB. Start the BitStreamDetectTimer to detect the Bit Stream with at least 128 alternating bits.
If Bit Stream is not detected within BitStreamDetectTimer:

Apply vSafe0V: Attempt to discharge capacitance on VBUS to vSafe0V within tDBDischargeVbus max. After tDBSourceOff, return to step 1.
Provider/Consumer:

If vSafeDB is present: Start outputting Bit Stream within tSendBitStream of vSafeDB availability and start the WaitForPowerTimer.
If Bit Stream is detected:

Consumer/Provider: Output vSafe5V to VBUS and start the DeviceReadyTimer to ensure readiness as a Sink.
When WaitForPowerTimer expires:

Provider/Consumer: Assume vSafe5V is present on VBUS, bring up the full PD system, and stop sending the Bit Stream. If DeviceReadyTimer expires, perform the Apply vSafe0V procedure and return to step 1.
Upon receiving Source_Capabilities Message:

Provider/Consumer: Determine cable type and start operation as a Sink. If Bit Stream stops, start operating as a Source and send the Source_Capabilities Message. If vSafe0V is detected, ensure no Bit Stream is sent and return to step 1.
Type-C to USB Type-C Dead Battery Operation
Dead battery operation for USB Type-C connections is defined in the USB Type-C 1.2 specification.

Cable IR Ground Drop (IR Drop)
IR Drop Considerations: USB PD Sink ports are susceptible to unreliable USB communication if the ground voltage drop (VGND_DROP) falls outside acceptable ranges. Certified USB cabling is designed to prevent such errors.
A-Plug Insertion Detect
Mechanism: Insertion Detect for Standard-A plugs involves a contact connecting with the shield upon insertion. For Micro-A plugs, the ID pin is used with a maximum 1KΩ resistance.
Functionality:
Indicates when to apply power to VBUS for Cold Socket applications.
Signals the start of Source_Capabilities Message transmission when a plug is present.
Resets VBUS to default operation when the plug is removed.
Cable Type Detection
Purpose: Prevent damage from non-compliant cables by electronically detecting cable types.
Requirements:
Sources: Must detect cable type and limit capabilities to avoid exceeding the cable's ratings. This is done using the Discover Identity Command and Cable VDO.
Sinks: Detect cable type to limit requests based on plug and cable capabilities.
Dead Battery Providers/Consumers: Wait until after receiving the first Source_Capabilities Message to run the cable detection process.
Summary of Key Points:

Dead Battery Operation: Involves a series of steps to detect and handle power needs when a battery is dead.
Cable IR Drop: Ensures reliable communication by managing voltage drops across cables.
Insertion Detect: A feature for Standard-A plugs to detect presence and manage power application.
Cable Type Detection: Prevents damage by ensuring cables are compliant with PD specifications.
Multi-Drop Transceiver and Cable Plug Configurations:

The Multi-Drop transceiver can be located anywhere along the cable, including at the plugs.
Multi-Drop transceivers experience less ground offset compared to the transceivers in the host or device and do not contribute significantly to reflections.
A port in a configuration may act as a Vconn source while another may not, even without a switch in the second port.
The capacitance on the CC line for a non-Vconn source port should be within specified limits except during transmission.
Interoperability with BFSK and BMC:

Devices with USB Type-C connectors must support both BMC over the CC wire and BFSK over VBUS.
The Source should first try to connect using BMC, and if it fails, it may try BFSK over VBUS.
Sinks must handle capabilities messages from either signaling scheme and use Hard Reset Signaling over both if needed.
Built-in Self-Test (BIST):

PRBS Pattern: The generator polynomial for the PRBS-8 pattern is specified, and the pattern should be "all ones" upon entering test mode.
Test Frames: Test frames must be sent/received without error to achieve a specified confidence level.
Error Counters: Devices should maintain a count of detected errors and compare them against expected error rates.
Carrier Modes:
Mode 0: Continuous "0"s
Mode 1: Continuous "1"s
Mode 2: Alternating "1"s and "0"s
Mode 3: Alternating blocks of sixteen "1"s and "0"s
Eye Pattern: A continuous string of bits according to the PRBS pattern is used to measure the eye pattern and spectrum mask.
BIST Test Data: Tester sends various test patterns to assess the UUT's receiver.
Protocol Layer:

Overview: Details the construction and use of messages, timers, retry counters, resets, error handling, and state behavior.
Message Types:
Control Messages (16 bits, manage message flow or exchange non-data messages).
Data Messages (48 to 240 bits, used for capabilities, negotiation, BIST, and vendor-defined purposes).
Message Construction: Messages consist of a header and variable-length data. The header contains basic information and is used for both Control and Data Messages.
Key Tables and Figures:
Table 5-27: Allows for the number of Test Frames vs. allowable errors at a 99% confidence level.
Table 5-28: Lists BIST Parameters, such as the number of Test Frames needed for confidence.
Table 5-29: Shows which BIST modes are supported based on the signaling scheme.
Figures 5-35 and 5-36: Illustrate the implementation of the BIST generator and checker and the format of Test Frames.
Figures 5-37, 6-1, and 6-2: Depict the Test Data Frame and the USB Power Delivery Packet Format including Control and Data Messages.
6.2.1.3 MessageID

The 3-bit MessageID field is the value generated by a rolling counter maintained by the originator of the Message. The MessageIDCounter Shall be initialized to zero at power-on as a result of a Soft Reset, or a Hard Reset. The MessageIDCounter Shall be incremented when a Message is successfully received as indicated by receipt of a GoodCRC Message. Note: during BIST, when sending Test Frames, the MessageID is not incremented by the sender and is Ignored by the receiver. The MessageID field Shall apply to all SOP* Packet types.

6.2.1.4 Port Power Role

The 1-bit Port Power Role field Shall indicate the current power role of the Port:

0b Sink
1b Source
Messages, such as Ping, and GotoMin, that are only ever sent by a Source, Shall always have the Port Power Role field set to Source. Similarly, Messages such as the Request Message that are only ever sent by a Sink Shall always have the Port Power Role field set to Sink. During the Power Role Swap Sequence, for the initial Source Port, the Port Power Role field Shall be set to Sink in the PS_RDY Message indicating that the initial Source’s power supply is turned off (see Figure 8-6 and Figure 8-7). During the Power Role Swap Sequence, for the initial Sink Port, the Port Power Role field Shall be set to Source for Messages initiated by the Policy Engine after receiving the PS_RDY Message from the initial Source (see Figure 8-6 and Figure 8-7). Note that the GoodCRC Message sent by the initial Sink in response to the PS_RDY Message from the initial Source will have its Port Power Role field set to Sink since this is initiated by the Protocol Layer. Subsequent Messages initiated by the Policy Engine, such as the PS_RDY Message sent to indicate that V BUS is ready, will have the Port Power Role field set to Source. The Port Power Role field of a received Message Shall Not be verified by the receiver and Shall Not lead to Soft Reset, Hard Reset, or Error Recovery if it is incorrect. The Port Power Role field Shall only be defined for SOP Packets.

6.2.1.5 Specification Revision

The 2-bit Specification Revision field Shall indicate the revision of the Power Delivery Specification supported by the Device:

00b – Revision 1.0
01b – Revision 2.0
10b - 11b – Reserved, Shall Not be used
On receipt of a Message Header with a higher revision number than that supported, a Port Shall respond using the highest revision number it supports. The Specification Revision field Shall apply to all SOP* Packet types.

6.2.1.6 Port Data Role

The 1-bit Port Data Role field Shall indicate the current data role of the Port:

0b UFP
1b DFP
The Port Data Role field Shall only be defined for SOP Packets. For all other SOP* Packets the Port Data Role field is Reserved and Shall be set to zero. If a USB Type-C Port receives a Message with the Port Data Role field set to the same Data Role as its current Data Role, except for the GoodCRC Message, USB Type-C error recovery actions as defined in [USB Type-C 1.2] Shall be performed. For a USB Type-C Port, the Port Data Role field Shall be set to the default value at attachment after a Hard Reset: 0b for a Port with Rd asserted and 1b for a Port with Rp asserted. In the case that a Port is not USB Communications Capable, at Attachment a Source Port Shall default to DFP and a Sink Port Shall default to UFP.

6.2.1.7 Cable Plug

The 1-bit Cable Plug field Shall indicate whether this Message originated from a Cable Plug:

0b Message originated from a DFP or UFP
1b Message originated from a Cable Plug
The Cable Plug field Shall only apply to SOP’ and SOP’’ Packet types.

6.2.1.8 Message Type

The 4-bit Message Type field Shall indicate the type of Message being sent. To fully decode the Message Type, the Number of Data Objects field is first examined to determine whether the Message is a Control Message or a Data Message. Then the specific Message Type can be found in Table 6-2 (Control Message) or Table 6-3 (Data Message). The Message Type field Shall apply to all SOP* Packet types.

6.3 Control Message

A Message is defined as a Control Message when the Number of Data Objects field in the Message Header is set to 0. The Control Message consists only of a Message Header and a CRC. The Protocol Layer originates the Control Messages (i.e., Accept Message, Reject Message, etc.). The Control Message types are specified in the Message Header’s Message Type field (bits 3…0) and are summarized in Table 6-2. The Sent by column indicates entities which May send the given Message (Source, Sink, or Cable Plug); entities not listed Shall Not issue the corresponding Message. The “Valid Start of Packet” column indicates the Messages which Shall only be issued in SOP Packets and the Messages which May be issued in SOP* Packets.

Table 6-2 Control Message Types

Bits 3…0	Message Type	Sent by	Description	Valid Start of Packet
0000	Reserved	N/A	All values not explicitly defined are Reserved and Shall Not be used.	SOP*
0001	GoodCRC	Source, Sink or Cable Plug	See Section 6.3.1.	SOP*
0010	GotoMin	Source only	See Section 6.3.2.	SOP only
0011	Accept	Source, Sink or Cable Plug	See Section 6.3.3.	SOP*
0100	Reject	Source or Sink	See Section 6.3.4.	SOP only
0101	Ping	Source only	See Section 6.3.5.	SOP*
0110	PS_RDY	Source or Sink	See Section 6.3.6.	SOP only
0111	Get_Source_Cap	Source or Sink	See Section 6.3.7.	SOP only
1000	Get_Sink_Cap	Source or Sink	See Section 6.3.8.	SOP only
1001	DR_Swap	Source or Sink	See Section 6.3.9.	SOP only
1010	PR_Swap	Source or Sink	See Section 6.3.10.	SOP only
1011	VCONN_Swap	Source or Sink	See Section 6.3.11.	SOP only
1100	Wait	Source or Sink	See Section 6.3.12.	SOP only
1101	Soft_Reset	Source or Sink	See Section 6.3.13.	SOP*
1110 - 1111	Reserved	N/A	All values not explicitly defined are Reserved and Shall Not be used.	SOP*
6.3.1 GoodCRC Message

The GoodCRC Message Shall be sent by the receiver to acknowledge that the previous Message was correctly received (i.e., had a good CRC). The GoodCRC Message Shall return the Message’s MessageID so the transmitter can determine that the correct Message is being acknowledged. The first bit of the GoodCRC Message Shall be returned within tTransmit after receipt of the last bit of the previous Message. BIST does not send the GoodCRC Message while in a Continuous BIST Mode (see Section 6.4.3).

6.3.2 GotoMin Message

The GotoMin Message applies only to those Sinks that have requested power with the GiveBack capable flag set in the Sink Request Data Object. It is a directive to the Sink Port to reduce its operating power level to the amount specified in the Minimum Operating Current field of its latest Sink Request Data Object. The GotoMin process is designed to allow the Source to temporarily reallocate power to meet a short-term requirement. For example, a Source can reduce a Sink’s power consumption for 10-20 seconds to allow another Sink (e.g., an HDD to spin up). The Source sends this Message as a means to harvest power in order to meet a request for power that it cannot otherwise meet. The Device Policy Manager determines which Port or ports will receive the Message. The Sink Shall respond to a GotoMin Message by reducing its power consumption to less than or equal to the pre-negotiated value (Minimum Operating Current) within tSnkNewPower time. The Source sends a GotoMin Message as a shortcut in the power negotiation process since the Source and Sink have already made a Contract with respect to the power to be returned. In essence, the Source does not have to advertise its Capabilities and the Sink does not have to make a Request based on them. The Source simply sends the GotoMin Message in place of the Accept Message normally sent during the power negotiation process (see step 19 in Figure 8-5). The power negotiation process then completes from this point in the normal manner with the Source sending a PS_RDY Message once the power supply transition is complete. The steps of the GotoMin process are fully described in Figure 8-6. The Source Shall return power to the Sink(s) it has ‘borrowed’ from using the GotoMin mechanism before it can allocate any ‘new’ power to other devices.

6.3.3 Accept Message

The Accept Message is a Valid response in the following cases:

It Shall be sent by the Source to signal the Sink that the Source is willing to meet the Request Message.
It Shall be sent by the recipient of the PR_Swap Message to signal that it is willing to do a Power Role Swap and has begun the Power Role Swap sequence.
It Shall be sent by the recipient of the DR_Swap Message to signal that it is willing to do a Data Role Swap and has begun the Data Role Swap sequence.
It Shall be sent by the recipient of the VCONN_Swap Message to signal that it is willing to do a VCONN Swap and has begun the VCONN Swap sequence.
It Shall be sent by the recipient of the Soft_Reset Message to indicate that it has completed its Soft Reset.
The Accept Message Shall be sent within tReceiverResponse of the receipt of the last bit of the Message (see Section 6.5.2).

6.3.4 Reject Message

The Reject Message is a Valid response in the following cases:

It Shall be sent to signal the Sink that the Source is unable to meet the Request Message. This May be due to an Invalid request or because the Source can no longer provide what it previously advertised.
It Shall be sent by the recipient of a PR_Swap Message to indicate it is unable to do a Power Role Swap.
It Shall be sent by the recipient of a DR_Swap Message to indicate it is unable to do a Data Role Swap.
It Shall be sent by the recipient of a VCONN_Swap Message to indicate it is unable to do a VCONN Swap.
It Shall be sent by a Source without Dual-Role capability in response to a Get_Sink_Cap Message.
It Shall be sent by a Sink without Dual-Role capability in response to a Get_Source_Cap Message.
It Shall be sent by a Sink which receives a GotoMin Message but does not support a GotoMin (GiveBack flag = 0 in its most recently sent Request Message).
It Shall be sent by the recipient of an Unsupported Message or an Unrecognized Message (see Section 6.7.1).
The Reject Message Shall be sent within tReceiverResponse of the receipt of the last bit of the Message (see Section 6.5.2).

6.3.5 Ping Message

6.3.5.1 Pings on USB Type-A and USB Type-B Connectors

The Ping Message is used on USB Type-A and USB Type-B connectors to determine the continued presence of the Sink when no other messaging is taking place (see Figure 8-43 in Section 8.3). The Ping Message is sent periodically, every tSourceActivity, by the Source to the Sink. Once a Contract is established, Sources Shall periodically send the Ping Message every tSourceActivity after the last Message has been sent/received except when:

The system is not operating in USB Power Delivery Mode (i.e., in standard [USB 2.0], [USB 3.1], [USB Type-C 1.2] or [USB BC 1.2] operation).
A Provider or Provider/Consumer is operating as a Source at vSafe5V in the PE_SRC_ Ready state (i.e., power negotiation has already taken place see Section 8.3.3.2.6).
6.3.5.2 Pings on USB Type-C Connectors

Type-C connectors have an alternative mechanism to determine Sink presence, so when the Port Partners are both connected using USB Type-C connectors, the Ping Message is not necessary. A Sink using a USB Type-C connector Shall Not expect to receive Ping Messages but Shall Not treat Ping Messages as an error if they are received.

6.3.6 PS_RDY Message

The PS_RDY Message Shall be sent by the Source (or by both the new Sink and new Source during the Power Role Swap sequence) to indicate its power supply has reached the desired operating condition. See Section 8.3.2.2.1 or Section 8.3.2.7.1.2 for examples of use.

6.3.7 Get_Source_Cap Message

The Get_Source_Cap (Get Source Capabilities) Message May be sent by a Port to request the Source Capabilities and Dual-Role capability of its Port Partner (e.g., Dual-Role capable). The Port Shall respond by returning a Source_Capabilities Message (see Section 6.4.1.1.1). A Sink Port, without Dual-Role capability, Shall return a Reject Message.

6.3.8 Get_Sink_Cap Message

The Get_Sink_Cap (Get Sink Capabilities) Message May be sent by a Port to request the Sink Capabilities and Dual-Role capability of its Port Partner (e.g., Dual-Role capable). The Port Shall respond by returning a Sink_Capabilities Message (see Section 6.4.1.1.2). A Source Port, without Dual-Role capability, Shall return a Reject Message.

6.3.9 DR_Swap Message

The DR_Swap Message is used to exchange DFP and UFP operation between Port Partners both utilizing USB Type-C connectors while maintaining the direction of power flow over V BUS. The DR_Swap process can be used by [USB Type-C 1.2] Port Partners whether or not they support USB Communications capability. A DFP that supports USB Communication Capability starts as the USB Host on attachment of [USB Type-C 1.2] Ports. A UFP that supports USB Communication Capability starts as the USB Device on attachment of [USB Type-C 1.2] Ports. The DFP is the “bus master” for Vendor Defined Message communications so the DR_Swap Message is used to exchange the Port Partner responsible for this communication. [USB Type-C 1.2] DRPs Shall have the capability to perform a Data Role Swap from the PE_SRC_ Ready or PE_SNK_ Ready states. [USB Type-C 1.2] DFPs and [USB Type-C 1.2] UFPs May have the capability to perform a Data Role Swap from the PE_SRC_ Ready or PE_SNK_ Ready states. A Data Role Swap Shall be regarded in the same way as a
DR_Swap (Data Role Swap) Message
Cable Detach/Reattach: If there are any Active Modes between Port Partners when a DR_Swap Message is received, a Hard Reset must be performed. The DFP (Downstream Facing Port) should not issue a DR_Swap Message while Active Modes are present; it must exit all Active Modes before accepting a DR_Swap request.
DR_Swap Procedure:
DR_Swap Message: May be sent by either Port Partner.
Responses:
Accept Message: Source and Sink exchange operational roles.
Reject Message: The recipient is unable or unwilling to perform the swap.
Wait Message: Indicates that a swap might be possible in the future but no immediate action will be taken.
Role Change: After a successful Data Role Swap, the initial DFP becomes the UFP (Upstream Facing Port) and vice versa. USB data connections should be established according to new roles. If the swap fails, USB Type-C error recovery actions will be necessary.
PR_Swap (Power Role Swap) Message
PR_Swap Message: May be sent by either Port Partner to request a change in power roles.
Responses:
Accept Message: The Source and Sink perform a Power Role Swap.
Reject Message: The recipient cannot or will not perform the swap.
Wait Message: Indicates that a swap might be possible in the future but no immediate action will be taken.
Post-Swap Actions:
Protocol Layer Reset: After a successful Power Role Swap, the Port Partners must reset their Protocol Layers (MessageIDCounter, RetryCounter, and state machines) and establish an Explicit Contract. The Source also resets its CapsCounter.
Resistor Changes: The USB Type-C Port must change its CC Wire resistor from R_p to R_d or vice versa, depending on the direction of the swap.
VCONN_Swap Message
VCONN_Swap Message: Supported by any USB Type-C Port utilizing SSTX and SSRX pins. May be sent by either Port Partner to request an exchange of VCONN Source.
Responses:
Accept Message: The Port Partners perform a VCONN Swap. The new VCONN Source must send a PS_RDY Message, and the initial VCONN Source must cease sourcing VCONN.
Reject Message: The recipient cannot or will not perform the swap.
Wait Message: Indicates that a swap might be possible in the future but no immediate action will be taken.
Note: VCONN must be continuously sourced during the VCONN Swap to ensure power to the Cable Plug(s).
Soft Reset Message
Soft_Reset Message: May be initiated by either the Source or Sink to request a Soft Reset. This message is used to recover from Protocol Layer errors and put message counters to a known state.
Effects:
No Impact on Voltage/Current: Voltage and current remain unchanged, and Modal Operation is unaffected.
Explicit Contract Negotiation: After a Soft Reset, an Explicit Contract negotiation occurs to re-establish PD Communication.
Targeted Reset: SOP Packets reset only the Port Partner, while SOP’/SOP’’ Packets reset the Cable Plug’s Protocol Layer.
Wait Message
Wait Message: Can be a valid response to Request, PR_Swap, DR_Swap, or VCONN_Swap Messages.
Purpose:
Request: Allows the Source time to recover power for a request.
PR_Swap: Indicates a Power Role Swap might be possible in the future.
DR_Swap: Indicates a Data Role Swap might be possible in the future.
VCONN_Swap: Indicates a VCONN Swap might be possible in the future.
Wait Period: After receiving a Wait Message, a Port should wait a specified time before resending the original message type.
6.4.1.1 Use of the Capabilities Message
6.4.1.1.1 Use by Sources
Sources send a Source_Capabilities Message (see Section 6.4.1) either as part of advertising Port capabilities, or in response to a Get_Source_Cap Message. Following a Hard Reset, a power-on event, or plug insertion event, a Source Port Shall send a Source_Capabilities Message after every SourceCapabilityTimer timeout as an advertisement that Shall be interpreted by the Sink Port on attachment. The Source Shall continue sending a minimum of nCapsCount Source_Capabilities Messages until a GoodCRC Message is received. Additionally, a Source_Capabilities Message Shall only be sent in the following cases:

By the Source Port from the PE_SRC_ Ready state upon a change in its ability to supply power.
By a Source Port or Dual-Role Port in response to a Get_Source_Cap Message.
6.4.1.1.2 Use by Sinks
Sinks send a Sink_Capabilities Message (see Section 6.4.1.3) in response to a Get_Sink_Cap Message. A USB Power Delivery capable Sink, upon detecting vSafe5V on VBUS and after a SinkWaitCapTimer timeout without seeing a Source_Capabilities Message, Shall send a Hard Reset. If the Attached Source is USB Power Delivery capable, it responds by sending Source_Capabilities Messages, thus allowing power negotiations to begin.

6.4.1.1.3 Use by Dual-Role Power Devices
Dual-Role Power devices send a Source_Capabilities Message (see Section 6.4.1) as part of advertising Port capabilities when operating in Source role. Dual-Role Power devices send a Source_Capabilities Message (see Section 6.4.1) in response to a Get_Source_Cap Message regardless of their present operating role. Similarly, Dual-Role Power devices send a Sink_Capabilities Message (see Section 6.4.1.3) in response to a Get_Sink_Cap Message regardless of their present operating role.

6.4.1.2 Source_Capabilities Message
A Source Port Shall report its capabilities in a series of 32-bit Power Data Objects (see Table 6-4) as part of a Source_Capabilities Message (see Figure 6-3). Power Data Objects are used to convey a Source Port’s capabilities to provide power including Dual-Role ports presently operating as a Sink. Each Power Data Object Shall describe a specific Source capability such as a Battery (e.g., 2.8-4.1V) or a fixed power supply (e.g., 12V) at a maximum allowable current. The Number of Data Objects field in the Message Header Shall define the number of Power Data Objects that follow the Message Header in a Data Message. All Sources Shall minimally offer one Power Data Object that reports vSafe5V. A Source Shall Not offer multiple Power Data Objects of the same type (fixed, variable, Battery) and the same voltage but Shall instead offer one Power Data Object with the highest available current for that Source capability and voltage. DRPs that support Sinks with Accessory Support do not source VBUS (see [USB Type-C 1.2]) however, when sourcing VCONN they Shall advertise vSafe5V with the Maximum Current set to 0mA in the first Power Data Object. A Sink Shall evaluate every Source_Capabilities Message it receives and Shall respond with a Request Message. If its power consumption exceeds the Source’s capabilities, it Shall re-negotiate so as not to exceed the Source’s most recently advertised capabilities.

6.4.1.2.1 Management of the Power Reserve
A Power Reserve May be allocated to a Sink when it makes a request from Source Capabilities which includes a Maximum Operating Current/Power. The size of the Power Reserve for a particular Sink is calculated as the difference between its Maximum Operating Current/Power field and its Operating Current/Power field. For a Hub with multiple ports, this same Power Reserve May be shared between several Sinks. The Power Reserve May also be temporarily used by a Sink which has indicated it can give back power by setting the GiveBack flag. Where a Power Reserve has been allocated to a Sink, the Source Shall indicate the Power Reserve as part of every Source_Capabilities Message it sends. When the same Power Reserve is shared between several Sinks, the Source Shall indicate the Power Reserve as part of every Source_Capabilities Message it sends to every Sink. Every time a Source sends capabilities including the Power Reserve capability and then accepts a request from a Sink including the Power Reserve indicated by its Maximum Operating Current/Power, it is confirming that the Power Reserve is part of the Explicit Contract with the Sink. When the Reserve is being temporarily used by a giveback capable Sink, the Source Shall indicate the Power Reserve as available in every Source_Capabilities Message it sends. However, in this situation, when the Power Reserve is requested by a Sink, the Source Shall return a Wait Message while it retrieves this power using a GotoMin Message. Once the additional power has been retrieved, the Source Shall send a new Source_Capabilities Message in order to trigger a new request from the Sink requesting the Power Reserve. The Power Reserve May be de-allocated by the Source at any time, but the de-allocation Shall be indicated to the Sink or Sinks using the Power Reserve by sending a new Source_Capabilities Message.

6.4.1.2.2 Non-Standard Attachment of USB Type-A Ports
When a Provider/Consumer Port with a USB Type-A receptacle, that is operating as a Source receives an unexpected Source_Capabilities Message (e.g., one not in response to a Get_Source_Cap Message), it Shall silently remove vSafe5V from VBUS within tPSSourceOff of receiving the Source_Capabilities Message EOP. Reception of a Source_Capabilities Message indicates that the user has Attached two USB Type-A Ports together via non-standard cabling so VBUS is removed to prevent back-powering.

6.4.1.2.3 Source Fixed Supply Power Data Object
Table 6-6 describes the Fixed Supply (00b) PDO. See Section 7.1.3 for the electrical requirements of the power supply. Since all USB Providers support vSafe5V, the required vSafe5V Fixed Supply Power Data Object is also used to convey additional information that is returned in bits 29 through 25. All other Fixed Supply Power Data Objects Shall set bits 29…22 to zero. For a Source offering no capabilities, the Voltage (B19 …10) Shall be set to 5V and the Maximum Current Shall be set to 0mA. This is used in cases such as a Dual-Role Power device which offers no capabilities in its default role or when external power is required in order to offer power. When a Source wants a Sink, consuming power from VBUS, to go to its lowest power state, the Voltage (B19 …10) Shall be set to 5V and the Maximum Current Shall be set to 0mA. This is used in cases where the Source wants the Sink to draw pSnkSusp.

6.4.1.2.3.1 Dual-Role Power
The Dual-Role Power bit Shall be set when the Port is Dual-Role Power capable, i.e., supports the PR_Swap Message. This is a static capability which Shall remain fixed for a given device regardless of the device’s present power role. If the Dual-Role Power bit is set to one in the Source_Capabilities Message, the Dual-Role Power bit in the Sink_Capabilities Message Shall also be set to one. If the Dual-Role Power bit is set to zero in the Source_Capabilities Message, the Dual-Role Power bit in the Sink_Capabilities Message Shall also be set to zero.

6.4.1.2.3.2 USB Suspend Supported
Prior to a Contract or when the USB Communications Capable bit is set to zero, this flag is undefined and Sinks Shall follow the rules for suspend as defined in [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2]. After a Contract has been negotiated:

If the USB Suspend Supported flag is set, then the Sink Shall follow the [USB 2.0] or [USB 3.1] rules for suspend and resume. A PDUSB Peripheral May draw up to pSnkSusp during suspend; a PDUSB Hub May draw up to pHubSusp during suspend (see Section 7.2.4).
If the USB Suspend Supported flag is cleared, then the Sink Shall Not apply the [USB 2.0] or [USB 3.1] rules for suspend and May continue to draw the negotiated power. Note that when USB is suspended, the USB device state is also suspended. Sinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting the No USB Suspend flag in a Request Message (see Section 6.4.2.5).
6.4.1.2.3.3 Unconstrained Power
The Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to...
6.4.1.2.3.3 Unconstrained Power

The Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to adequately power the system while charging external devices, or when the device’s primary function is to charge external devices. To set the Unconstrained Power bit as a result of an external source, the external source of power Should be either:

An AC supply, e.g., a wall wart, directly connected to the Sink.
Or, in the case of a PDUSB Hub:
A PD Source with its Unconstrained Power bit set.
Multiple PD Sources all with their Unconstrained Power bits set.
6.4.1.2.3.4 USB Communications Capable

The USB Communications Capable bit Shall only be set for Sources capable of communication over the USB data lines (e.g., D+/-, or SS Tx/Rx).

6.4.1.2.3.5 Dual-Role Data

The Dual-Role Data bit Shall be set when the Port is USB Type-C (see [USB Type-C 1.2]) and supports the DR_Swap Message. This is a static capability which Shall remain fixed for a given device regardless of the device’s present power role or data role. If the Dual-Role Data bit is set to one in the Source_ Capabilities Message, the Dual-Role Data bit in the Sink_ Capabilities Message Shall also be set to one. If the Dual-Role Data bit is set to zero in the Source_ Capabilities Message, the Dual-Role Data bit in the Sink_ Capabilities Message Shall also be set to zero.

6.4.1.2.3.6 Peak Current

The USB Power Delivery Fixed Supply is only required to deliver the amount of current requested in the Operating Current (IOC) field of an RDO. In some usages, however, such as computer systems where there are short bursts of activity, it might be desirable to overload the power source for short periods. For example, when a computer system tries to maintain average power consumption, the higher the peak current, the longer the low current period needed to maintain such average power. The Peak Current field allows a power source to advertise this additional capability. This capability is intended for direct Port-to-Port connections only and Shall Not be offered to downstream Sinks via a Hub. Every Fixed Supply PDO Shall contain a Peak Current field. Supplies that want to offer a set of overload capabilities Shall advertise this through the Peak Current field in the corresponding Fixed Supply PDO (see Table 6-7). Supplies that do not support an overload capability Shall set these bits to 00b in the corresponding Fixed Supply PDO.

6.4.1.2.4 Variable Supply (non-Battery) Power Data Object

Table 6-9 describes a Variable Supply (non-Battery) (10b) PDO for a Source. See Section 7.1.3 for the electrical requirements of the power supply. The voltage fields Shall define the range that the output voltage Shall fall within. This does not indicate the voltage that will actually be supplied, except it Shall fall within that range. The absolute voltage, including any voltage variation, Shall Not fall below the Minimum Voltage and Shall Not exceed the Maximum Voltage.

6.4.1.2.5 Battery Supply Power Data Object

Table 6-9 describes a Battery (01b) PDO for a Source. See Section 7.1.3 for the electrical requirements of the power supply. The voltage fields Shall represent the Battery’s voltage range. The Battery Shall be capable of supplying the Power value over the entire voltage range. The absolute voltage, including any voltage variation, Shall Not fall below the Minimum Voltage and Shall Not exceed the Maximum Voltage. Note, only the Battery PDO uses power instead of current. The Sink May monitor the Battery voltage.

6.4.1.3 Sink Capabilities Message

A Sink Port Shall report power levels it is able to operate at in a series of 32-bit Power Data Objects (see Table 6-4). These are returned as part of a Sink_ Capabilities Message in response to a Get_Sink_Cap Message (see Figure 6-3). This is similar to that used for Source Port capabilities with equivalent Power Data Objects for Fixed, Variable, and Battery Supplies as defined in this section. Power Data Objects are used to convey the Sink Port’s operational power requirements including Dual-Role Power ports presently operating as a Source. Each Power Data Object Shall describe a specific Sink operational power level, such as a Battery (e.g., 2.8-4.1V) or a fixed power supply (e.g., 12V). The Number of Data Objects field in the Message Header Shall define the number of Power Data Objects that follow the Message Header in a Data Message. All Sinks Shall minimally offer one Power Data Object with a power level at which the Sink can operate. A Sink Shall Not offer multiple Power Data Objects of the same type (fixed, variable, Battery) and the same voltage but Shall instead offer one Power Data Object with the highest available current for that Sink capability and voltage. All Sinks Shall include one Power Data Object that reports vSafe5V even if they require additional power to operate fully. In the case where additional power is required for full operation, the Higher Capability bit Shall be set.

6.4.1.3.1 Sink Fixed Supply Power Data Object

Table 6-10 describes the Sink Fixed Supply (00b) PDO. See Section 7.1.3 for the electrical requirements of the power supply. The Sink Shall set Voltage to its required voltage and Operational Current to its required operating current. Required operating current is defined as the amount of current a given device needs to be functional. This value could be the maximum current the Sink will ever require or could be sufficient to operate the Sink in one of its modes of operation. Since all USB Consumers support vSafe5V, the required vSafe5V Fixed Supply Power Data Object is also used to convey additional information that is returned in bits 29 through 20. All other Fixed Supply Power Data Objects Shall set bits 29…20 to zero. For a Sink requiring no power from the Source, the Voltage (B19…10) Shall be set to 5V and the Operational Current Shall be set to 0mA.

6.4.1.3.1.1 Dual-Role Power

The Dual-Role Power bit Shall be set when the Port is Dual-Role Power capable, i.e., supports the PR_Swap Message. This is a static capability which Shall remain fixed for a given device regardless of the device’s present power role. If the Dual-Role Power bit is set to one in the Source_ Capabilities Message, the Dual-Role Power bit in the Sink_ Capabilities Message Shall also be set to one. If the Dual-Role Power bit is set to zero in the Source_ Capabilities Message, the Dual-Role Power bit in the Sink_ Capabilities Message Shall also be set to zero.

6.4.1.3.1.2 Higher Capability

In the case that the Sink needs more than vSafe5V (e.g., 12V) to provide full functionality, then the Higher Capability bit Shall be set.

6.4.1.3.1.3 Unconstrained Power

The Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to adequately power the system while charging external devices, or when the device’s primary function is to charge external devices. To set the Unconstrained Power bit as a result of an external source, the external source of power Should be either:

An AC supply, e.g., a wall wart, directly connected to the Sink.
Or, in the case of a PDUSB Hub:
A PD Source with its Unconstrained Power bit set.
Multiple PD Sources all with their Unconstrained Power bits set.
6.4.1.3.1.4 USB Communications Capable

The USB Communications Capable bit Shall only be set for Sinks capable of communication over the USB data lines (e.g., D+/-, or SS Tx/Rx).

6.4.1.3.1.5 Dual-Role Data

The Dual-Role Data bit Shall be set when the Port is a USB Type-C DRP (see [USB Type-C 1.2]) and supports the DR_Swap Message. This is a static capability which Shall remain fixed for a given device regardless of the device’s present power role or data role. If the Dual-Role Data bit is set to one in the Source_ Capabilities Message, the Dual-Role Data bit in the Sink_ Capabilities Message Shall also be set to one. If the Dual-Role Data bit is set to zero in the Source_ Capabilities Message, the Dual-Role Data bit in the Sink_ Capabilities Message Shall also be set to zero.

6.4.1.3.2 Variable Supply (non-Battery) Power Data Object

Table 6-11 describes a Variable Supply (non-Battery) (10b) PDO used by a Sink. See Section 7.1.3 for the electrical requirements of the power supply. The voltage fields Shall be set to the output voltage range that the Sink requires to operate. The Operational Current field Shall be set to the operational current that the Sink requires at the given voltage range. The absolute voltage, including any voltage variation, Shall Not fall below the Minimum Voltage and Shall Not exceed the Maximum Voltage. Required operating current is defined as the amount of current a given device needs to be functional. This value could be the maximum current the Sink will ever require or could be sufficient to operate the Sink in one of its modes of operation.

6.4.1.3.3 Battery Supply Power Data Object

Table 6-12 describes a Battery (01b) PDO used by a Sink. See Section 7.1.3 for the electrical requirements of the power supply. The voltage fields Shall be set to the output voltage range that the Sink requires to operate. The Operational Power field Shall be set to the operational power that the Sink requires at the given voltage range. The absolute voltage, including any voltage variation, Shall Not fall below the Minimum Voltage and Shall Not exceed the Maximum Voltage.
Negative Voltage Variation

Voltage variation, Shall Not fall below the Minimum Voltage and Shall Not exceed the Maximum Voltage. Note, only the Battery PDO uses power instead of current. Required operating power is defined as the amount of power a given device needs to be functional. This value could be the maximum power the Sink will ever require or could be sufficient to operate the Sink in one of its modes of operation.

Table 6-12 Battery Supply PDO - Sink

Bit(s)	Description
B31 …30	Battery
B29 …20	Maximum Voltage in 50mV units
B19 …10	Minimum Voltage in 50mV units
B9…0	Operational Power in 250mW units
Request Message

A Request Message Shall be sent by a Sink to request power, typically during the request phase of a power negotiation. The Request Data Object Shall be returned by the Sink making a request for power. It Shall be sent in response to the most recent Source_ Capabilities Message (see Section 8.3.2.2.1). A Request Message Shall return one and only one Sink Request Data Object that Shall identify the Power Data Object being requested. The Request Message includes the requested power level. For example, if the Source_ Capabilities Message includes a Fixed Supply PDO that offers 12V @ 1.5A and if the Sink only wants 12V @ 0.5A, it will set the Operating Current field to 50 (i.e., 10mA * 50 = 0.5A). The Request Message requests the highest current the Sink will ever require in the Maximum Operating Current Field (in this example it would be 100 (100 * 10mA = 1.0A)). The request takes one of two forms depending on the kind of power requested. The Fixed Power Data Object and Variable Power Data Object share a common format (see Table 6-13 and Table 6-14). The Battery Power Data Object uses a different format (see Table 6-15 and Table 6-16).

Table 6-13 Fixed and Variable Request Data Object

Bit(s)	Description
B31	Reserved – Shall be set to zero
B30…28	Object position (000b is Reserved and Shall Not be used)
B27	Give Back flag = 0
B26	Capability Mismatch
B25	USB Communications Capable
B24	No USB Suspend
B23…20	Reserved - Shall be set to zero
B19 …10	Operating current in 10mA units
B9…0	Maximum Operating Current 10mA units
Table 6-14 Fixed and Variable Request Data Object with GiveBack Support

Bit(s)	Description
B31	Reserved – Shall be set to zero
B30 …28	Object position (000b is Reserved and Shall Not be used)
B27	GiveBack flag = 1
B26	Capability Mismatch
B25	USB Communications Capable
B24	No USB Suspend
B23…20	Reserved - Shall be set to zero
B19 …10	Operating Current in 10mA units
B9…0	Minimum Operating Current 10mA units
Table 6-15 Battery Request Data Object

Bit(s)	Description
B31	Reserved – Shall be set to zero
B30 …28	Object position (000b is Reserved and Shall Not be used)
B27	Giveback Flag = 0
B26	Capability Mismatch
B25	USB Communications Capable
B24	No USB Suspend
B23 …20	Reserved - Shall be set to zero
B19 …10	Operating Power in 250mW units
B9…0	Maximum Operating Power in 250mW units
Table 6-16 Battery Request Data Object with GiveBack Support

Bit(s)	Description
B31	Reserved – Shall be set to zero
B30 …28	Object position (000b is Reserved and Shall Not be used)
B27	Giveback Flag = 1
B26	Capability Mismatch
B25	USB Communications Capable
B24	No USB Suspend
B23 …20	Reserved - Shall be set to zero
B19 …10	Operating Power in 250mW units
B9…0	Minimum Operating Power in 250mW units
6.4.2.1 Object Position

The value in the Object Position field Shall indicate which object in the Source_ Capabilities Message the RDO refers. The value 1 always indicates the 5V Fixed Supply PDO as it is the first object following the Source_ Capabilities Message Header. The number 2 refers to the next PDO and so forth.

6.4.2.2 GiveBack Flag

The GiveBack flag Shall be set to indicate that the Sink will respond to a GotoMin Message by reducing its load to the Minimum Operating Current. It will typically be used by a USB Device while charging its Battery because a short interruption of the charge will have minimal impact on the user and will allow the Source to manage its load better.

6.4.2.3 Capability Mismatch

A Capability Mismatch occurs when the Sink cannot satisfy its power requirements from the capabilities offered by the Source. In this case, the Sink Shall make a Valid request from the offered capabilities and Shall set the Capability Mismatch bit (see Section 8.2.5.2). When a Sink returns a Request Data Object in response to advertised capabilities with this bit set, it indicates that the Sink wants power that the Source cannot provide. This can be due to either a voltage that is not available or the amount of available current. At this point, the Source can use the information in the Request Message combined with the contents of the Sink_ Capabilities Message to ascertain the Voltage and Current required by the Sink for full operation. In this context, a Valid Request Message means the following:

The Object position field Shall contain a reference to an object in the last received Source_ Capabilities Message.
The Operating Current/Power field Shall contain a value which is less than or equal to the maximum current/power offered in the Source_ Capabilities Message.
If the GiveBack flag is set to zero i.e., there is a Maximum Operating Current/Power field:
If the Capability Mismatch bit is set to one, the Maximum Operating Current/Power field May contain a value larger than the maximum current/power offered in the Source_ Capabilities Message’s PDO as referenced by the Object position field. This enables the Sink to indicate that it requires more current/power than is being offered. If the Sink requires a different voltage this will be indicated by its Sink_ Capabilities Message.
Else if the Capability Mismatch bit is set to zero, the Maximum Operating Current/Power field Shall contain a value less than or equal to the maximum current/power offered in the Source_ Capabilities Message’s PDO as referenced by the Object position field.
Else if the GiveBack flag is set to one i.e., there is a Minimum Operating Current/Power field:
The Minimum Operating Current/Power field Shall contain a value less than the Operating Current/Power field.
6.4.2.4 USB Communications Capable

The USB Communications Capable flag Shall be set to one when the Sink has USB data lines and is capable of communicating using either [USB 2.0] or [USB 3.1] protocols. The USB Communications Capable flag Shall be set to zero when the Sink does not have USB data lines or is otherwise incapable of communicating using either [USB 2.0] or [USB 3.1] protocols. This is used by the Source to determine operation in certain cases such as USB suspend. If the USB Communications Capable flag has been set to zero by a Sink then the Source needs to be aware that USB Suspend rules cannot be observed by the Sink.

6.4.2.5 No USB Suspend

The No USB Suspend flag May be set by the Sink to indicate to the Source that this device is requesting to continue its Contract during USB Suspend. Sinks setting this flag typically have functionality that can use power for purposes other than USB communication, e.g., for charging a Battery. The Source uses this flag to evaluate whether it Should re-issue the Source_ Capabilities Message with the USB Suspend flag cleared.

6.4.2.6 Operating Current

The Operating Current field in the Request Data Object Shall be set to the actual amount of current the Sink needs to operate at a given time. A new Request Message, with an updated Operating Current value, Shall be issued whenever the Sink’s power needs change e.g., from Maximum Operating Current down to a lower current level. In conjunction with the Maximum Operating Current field or Minimum Operating Current field, it provides the Source with additional information that allows it to better manage the distribution of its power. This field Shall apply to the Fixed and Variable RDO.

6.4.2.7 Maximum Operating Current

The Maximum Operating Current field in the Request Message Shall be set to the highest current the Sink will ever require. The difference between the Operating Current and Maximum Operating Current fields (when the GiveBack Flag is cleared) is used by the Device Policy Manager in the Source to calculate the size of the Power Reserve to be maintained (see Section 8.2.5.1). The Operating Current value Shall be less than or equal to the Maximum Operating Current value. When the Capabilities Mismatch bit is set to zero, the requested Maximum Operating Current Shall be less than or equal to the current in the offered Source Capabilities since the Source will need to reserve this power for future use. The Maximum Operating Current field Shall continue to be set to the highest current needed in order to maintain the allocation of the Power Reserve. If Maximum Operating Current is requested when the Power Reserve is being used by a GotoMin capable device, then the resulting Message will be a Wait Message to enable the Source to reclaim the additional current (see Section 6.3.12.1 and Section 8.2.5.1). When the Capabilities Mismatch bit is set to one, the requested Maximum Operating Current May be greater than the current in the offered Source Capabilities since the Source will need this information to ascertain the Sink’s actual needs. See Section 6.4.2.3 for more details of the usage of the Capabilities Mismatch bit. This field Shall apply to the Fixed and Variable RDO.

6.4.2.8 Minimum Operating Current

The Minimum Operating Current field in the Request Message Shall be set to the lowest current the Sink requires to maintain operation. The difference between the Operating Current and Minimum Operating Current fields (when the GiveBack Flag is set) is used by the Device Policy Manager to calculate the amount of power which can be reclaimed using a GotoMin Message. The Operating Current value Shall be greater than the Minimum Operating Current value. This field Shall apply to the Fixed and Variable RDO.

6.4.2.9 Operating Power

The Operating Power field in the Request Data Object Shall be set to the actual amount of power the Sink wants at this time. In conjunction with the Maximum Operating Power field, it provides the Source with additional information that allows it to better manage the distribution of its power. This field Shall apply to the Battery RDO.

6.4.2.10 Maximum Operating Power

The Maximum Operating Power field in the Request Message Shall be set to the highest power the Sink will ever require. This allows a Source with a power supply shared amongst multiple ports to intelligently distribute power. When the Capabilities Mismatch bit is set to zero, the requested Maximum Operating Power Shall be less than or equal to the power in the offered Source Capabilities since the Source will need to reserve this power for future use. The Maximum Operating Power field Shall continue to be set to the highest power needed in order to maintain the allocation of the Power Reserve. If Maximum Operating Power is requested when the Power Reserve is being used by a GotoMin capable device, then the resulting Message will be a Wait Message to enable the Source to reclaim the additional power (see Section 6.3.12.1 and Section 8.2.5.1). When the Capabilities Mismatch bit is set to one, the requested Maximum Operating Power May be greater than the current in the offered Source Capabilities since the Source will need this information to ascertain the Sink’s actual needs. See Section 6.4.2.3 for more details of the usage of the Capabilities Mismatch bit. This field Shall apply to the Battery RDO.
Negative Operating Power
The Minimum Operating Power field in the Request Message Shall be set to the lowest power the Sink requires to maintain operation. When combined with the Operating Power, it provides the Source with information on how much power it can temporarily reclaim, allowing for intelligent power distribution. This field Shall apply to the Battery RDO.

BIST Message
The BIST Message is used to request a Port to enter a Physical Layer test mode to perform one or more functions:

Receiver Mode: Zero accumulated BISTErrorCounter, process BIST Test Frames, compare received data to the expected pattern, and count errors.
Transmit Mode: Send BIST Test Frames to the Tester.
Continuous BIST Mode: Send a continuous stream of test data to the Tester.
Send BIST Test Data: Send test data to the Unit Under Test (UUT).
Return BISTErrorCounter: Return the BISTErrorCounter to the Tester.
The Message format is as follows:

Figure 6-4 BIST Message Header

Number of Data Objects = 1 or 7
BIST Request Object
All ports Shall be able to act as a Unit Under Test (UUT) only when operating at vSafe5V. Supported BIST Modes are defined in Section 5.9.9. For each supported BIST Mode, the following operations Shall be implemented based on the reception of the appropriate BIST Message BIST Data Object (see Table 6-17):

Process reception of a BIST Receiver Mode BIST Data Object.
Process reception of a BIST Transmit Mode BIST Data Object.
Generate a Returned BIST Counters BIST Data Object response within a BIST Message for each received Test Frame.
Process reception of BIST Carrier Mode 0, 1, 2, or 3 BIST Data Objects to generate the appropriate carrier signal.
Process reception of a BIST Eye Pattern BIST Data Object to generate the appropriate signal.
Process reception of a BIST Test Data BIST Data Object to ignore the Message.
It is Optional for a Port to act as a Tester. A Port should ignore a BIST Message BIST Data Object for a BIST Mode it does not support. When a Port or Cable Plug receives a BIST Message BIST Data Object for a Continuous BIST Mode that it supports, the Port or Cable Plug enters the requested BIST Mode and Shall remain in that mode for tBISTContMode, then Shall return to normal operation (see Section 6.5.8.4).

Dedicated Testers are anticipated, which may not be required to implement a local receiver test but must be able to complete operations when a BIST Message with BIST Transmit Mode is sent. The usage model generally assumes some controlling agent will request a test of its Port Partner. A UUT Port must process a request to enter test mode and return error counters. A Tester Port Shall place the UUT Port into receiver test mode and retrieve the error counters from the UUT. Ports that are not Testers are not expected to initiate receiver test operations but are not prohibited from doing so. A sequence description of test sequences for compliance testing is provided in Section 8.3.2.10.

BIST Data Object
Table 6-17 BIST Data Object

Bit(s)	Value	Parameter Description	Reference
B31 …28	0000b	BIST Receiver Mode	See Section 6.4.3.1
0001b	BIST Transmit Mode	See Section 6.4.3.2	
0010b	Returned BIST Counters	See Section 6.4.3.3	
0011b	BIST Carrier Mode 0	See Section 6.4.3.4	
0100b	BIST Carrier Mode 1	See Section 6.4.3.5	
0101b	BIST Carrier Mode 2	See Section 6.4.3.6	
0110b	BIST Carrier Mode 3	See Section 6.4.3.7	
0111b	BIST Eye Pattern	See Section 6.4.3.8	
1000b	BIST Test Data	See Section 6.4.3.9	
1001b-1111b	Reserved	Shall Not be used	
B27 …16	Reserved	Shall be set to zero	
B15 …0	16-bit unsigned integer	When Request Type is Returned BIST Counters, this field Shall contain the contents of BISTErrorCounter, otherwise Shall be set to zero. See Section 6.4.3.3	
BIST Receiver Mode
The BIST Receiver Mode is used to initiate a remote receiver test by sending a BIST Message containing a BIST Receiver Mode BIST Data Object. Upon receiving this request, the UUT Shall zero its BISTErrorCounter and both the Tester and UUT Shall preload their PRBS generator with the designated pattern (see Section 5.9.1). The receiver (UUT) Shall acknowledge the BIST Message with a GoodCRC Message. The UUT enters BIST Receiver Mode after the BIST Message has been received (see Section 6.5.8.1). After the first Test Frame reception, further Test Frames are sent at a rate determined by the Tester. The test Shall be ended by sending Hard Reset Signaling to reset the UUT.

BIST Transmit Mode
Since Loopback mode is not possible, BIST Transmit Mode Shall be used to request a UUT transmitter test by sending a BIST Message containing a BIST Transmit Mode BIST Data Object. Before initiating the request, the Tester Shall zero its BISTErrorCounter and preload the PRBS generator with the designated pattern (see Section 5.9.1). On receiving the request, the UUT Shall preload the PRBS generator with the designated pattern. The receiver in the UUT Shall acknowledge the BIST Message with a GoodCRC Message. The UUT enters BIST Transmit Mode after the BIST Message has been received (see Section 6.5.8.1). The UUT Shall start transmitting the first Test Frame no later than tBISTMode max of the last bit of the EOP of the BIST Message. Subsequent Test Frames Shall be started either on reception of a BIST Message with a Returned BIST Counters BIST Data Object, on expiry of the BISTReceiveErrorTimer, or no later than tBISTResponse after the first bit of the Preamble of the previous Test Frame has been transmitted. The Tester Shall preload its PRBS checker with the designated pattern and start counting errors. After receiving a suitable number of Test Frames, the Tester Shall freeze its error counter. The UUT Shall be reset by sending Hard Reset Signaling instead of a BIST Message.

Returned BIST Counters
A BIST Message with a Returned BIST Counters BIST Data Object Shall contain the error counters obtained during the receiver test. During BIST, when sending Test Frames, the MessageID of the BIST Message with Returned BIST Counters BIST Data Object Shall be Ignored.

BIST Carrier Modes
BIST Carrier Mode 0: Upon receipt, the UUT Shall send out a continuous string of "0"s, allowing measurement of 
𝑓
𝐶
𝑎
𝑟
𝑟
𝑖
𝑒
𝑟
−
𝑓
𝐷
𝑒
𝑣
𝑖
𝑎
𝑡
𝑖
𝑜
𝑛
f 
Carrier
​
 −f 
Deviation
​
 . The UUT Shall exit Continuous BIST Mode within tBISTContMode (see Section 6.5.8.4).
BIST Carrier Mode 1: Upon receipt, the UUT Shall send out a continuous string of "1"s, allowing measurement of 
𝑓
𝐶
𝑎
𝑟
𝑟
𝑖
𝑒
𝑟
+
𝑓
𝐷
𝑒
𝑣
𝑖
𝑎
𝑡
𝑖
𝑜
𝑛
f 
Carrier
​
 +f 
Deviation
​
 . The UUT Shall exit Continuous BIST Mode within tBISTContMode (see Section 6.5.8.4).
BIST Carrier Mode 2: Upon receipt, the UUT Shall send out a continuous string of alternating "1"s and "0"s. In the case of BMC signaling, the "1"s and "0"s will be BMC encoded. The UUT Shall exit Continuous BIST Mode within tBISTContMode (see Section 6.5.8.4).
BIST Carrier Mode 3: Upon receipt, the UUT Shall send out a continuous string of sixteen "1"s followed by sixteen "0"s. The UUT Shall exit Continuous BIST Mode within tBISTContMode (see Section 6.5.8.4).
BIST Eye Pattern
Upon receipt of a BIST Message with a BIST Eye Pattern BIST Data Object, the UUT Shall send out a continuous string of bits as per section 5.9.1. This produces a signal that will allow measurement of the eye pattern and spectrum mask. The UUT Shall exit Continuous BIST Mode within tBISTContMode (see Section 6.5.8.4).

BIST Test Data
Upon receipt of a BIST Message with a BIST Test Data BIST Data Object, the UUT Shall return a GoodCRC Message and Shall enter a test mode in which it sends no further Messages except for GoodCRC Messages in response to received Messages. The test Shall be ended by sending Hard Reset Signaling to reset the UUT.

Vendor Defined Message
The Vendor Defined Message (VDM) allows vendors to exchange information outside the scope of this specification. A Vendor Defined Message Shall consist of at least one Vendor Data Object, the VDM Header, and May contain up to six additional VDM Objects (VDOs). To ensure vendor uniqueness, all Vendor Defined Messages Shall contain a valid USB Standard or Vendor ID (SVID) allocated by USB-IF in the VDM Header.

There are two types of Vendor Defined Messages:

Structured VDMs: Define an extensible structure designed to support Modal Operation.
Unstructured VDMs: Do not define any structure; Messages May be created in any manner the vendor chooses.
Vendor Defined Messages Shall not be used for direct power negotiation but may alter local policy, affecting what is offered or consumed via normal PD Messages. For example, a Vendor Defined Message could be used to enable the Source to offer.
Vendor Defined Message (VDM) Format
The Vendor Defined Message (VDM) allows vendors to exchange information beyond the scope of the USB Power Delivery (PD) Specification. The message format is outlined as follows:

Figure 6-5 Vendor Defined Message Header

Number of Data Objects: 1-7
VDM Header
0-6 VDOs
The VDM Header is the first 4-byte object in a Vendor Defined Message and provides command space for vendor-specific customizations. Vendors may use the Commands in a Structured VDM. The fields in the VDM Header for Unstructured and Structured VDMs are defined in the following tables.

Both Unstructured and Structured VDMs are only valid after an Explicit Contract is established, except for the Discover Identity Command, which may be sent by the Source without a contract to discover Cable capabilities.

VDM Message sequences should not interrupt other PD Message sequences but can be interrupted by any other PD Message Sequence.

Unstructured VDM
An Unstructured VDM does not define the contents of bits B14 …0 in the VDM Header. Their definition and use are determined by the vendor indicated by the Vendor ID (VID).

Rules for Unstructured VDMs:

Only used with an Explicit Contract in place.
Should not be sent or responded to before establishing an Explicit Contract.
Ports receiving an Unstructured VDM for an unrecognized VID should ignore the message.
Only the DFP (Downstream Facing Port) should initiate Unstructured VDMs.
Only the UFP (Upstream Facing Port) or a Cable Plug should respond to Unstructured VDMs.
Unstructured VDMs should not be initiated or responded to in other circumstances.
Ports not supporting Unstructured VDMs should ignore any Unstructured VDMs received.
A "command" sequence should be interruptible due to power-related AMS needs.
Unstructured VDMs should only be used during Modal Operation in the context of an Active Mode.
May be used with SOP* (Start of Packet) Packets.
Table 6-18 Unstructured VDM Header

Bit(s)	Parameter	Description
B31 …16	Vendor ID (VID)	Unique 16-bit unsigned integer assigned by USB-IF.
B15	VDM Type	0 = Unstructured VDM
B14 …0	Available for Vendor Use	Content defined by the vendor.
6.4.4.1.1 USB Vendor ID
The Vendor ID field must contain the 16-bit Vendor ID assigned by USB-IF. No other value is permitted.

6.4.4.1.2 VDM Type
The VDM Type field must be set to 0 to indicate that this is an Unstructured VDM.

Structured VDM
Setting the VDM Type field to 1 indicates a Structured VDM and defines the use of bits B14 …0 in the Structured VDM Header.

Rules for Structured VDMs:

Only used with an Explicit Contract in place, except for Discover Identity Messages issued by a Source using SOP’ Packets.
Only the DFP should initiate Structured VDMs, except for the Attention Command, which should only be initiated by the UFP.
Only the UFP or a Cable Plug should respond to Structured VDMs.
Structured VDMs should not be initiated or responded to in other circumstances.
A DFP, UFP, or Cable Plug not supporting Structured VDMs should ignore any Structured VDMs received.
If a Cable Plug does not support Structured VDMs, any received Structured VDMs should be ignored.
A DFP, UFP, or Cable Plug that supports Structured VDMs and receives a Structured VDM for an unrecognized SVID should reply with a NAK Command.
A Structured VDM Command sequence should be interruptible, e.g., due to power-related AMS.
Table 6-19 Structured VDM Header

Bit(s)	Field	Description
B31 …16	Standard or Vendor ID (SVID)	Unique 16-bit unsigned integer assigned by USB-IF.
B15	VDM Type	1 = Structured VDM
B14 …13	Structured VDM Version	Version Number of the Structured VDM. Values: 0 = Version 1.0, Values 1-3 Reserved.
B12 …11	Reserved	For Commands 0 …15: Set to 0 and Ignored.
B10 …8	Object Position	Index into the list of VDOs for Enter Mode, Exit Mode, and Attention Commands.
B7 …6	Command Type	00b = REQ (Request), 01b = ACK (Acknowledge), 10b = NAK (Negative Acknowledge), 11b = BUSY (Busy).
B5	Reserved	Set to 0 and Ignored.
B4 …0	Command	Identifies the VDM Command being sent.
Table 6-20 Structured VDM Commands

Command	VDM Header SVID Field	SOP* used
Discover Identity	PD SID	SOP / SOP’
Discover SVIDs	PD SID	SOP / SOP’
Discover Modes	Any SVID	SOP / SOP’
Enter Mode	Any SVID	SOP*
Exit Mode	Any SVID	SOP*
Attention	Any SVID	SOP
SVID Specific Commands	Any SVID	SOP* (defined by SVID)
6.4.4.2.1 SVID
The SVID field must contain either a 16-bit USB Standard ID value (SID) or the 16-bit assigned to the vendor by USB-IF (VID). No other value is allowed.

6.4.4.2.2 VDM Type
The VDM Type field must be set to 1 to indicate that this is a Structured VDM.

6.4.4.2.3 Structured VDM Version
This field indicates the level of functionality supported in the Structured VDM part of the specification. The current version is 1.0 (set to 0). Ports should respond with the highest version they support if a higher version is received.

6.4.4.2.4 Object Position
Used by Enter Mode and Exit Mode Commands. The value is an index into the list of VDOs returned by the Discover Modes Command. Set to zero if not required by the individual Command specification.

6.4.4.2.5 Command Type

6.4.4.2.5.1 Commands Other Than Attention
The Command Type field indicates the type of Command request/response. The Initiator sets this field to REQ for a Command request. Responses include:

Responder ACK: Normal return indicating successful handling.
Responder NAK: Returned for invalid parameters, incorrect configurations, or unrecognized requests.
Responder BUSY: Returned when the Responder is busy; the Initiator should wait tVDMBusy before retrying.
6.4.4.2.5.2 Attention Command
The Command Type field is set to REQ. No response is made to an Attention Command.

6.4.4.2.6 Command

6.4.4.2.6.1 Commands Other Than Attention
This field contains the value for the VDM Command. Commands manage device identification and operational Modes. The Command request and response (ACK, NAK, or BUSY) complete when the GoodCRC Message is successfully received by the Responder.

6.4.4.2.6.2 Attention Command
This field contains the value for the Attention Command. The Attention Command notifies the Responder of an event or status update.
6.4.4.1 Unstructured VDM

The Unstructured VDM does not define the contents of bits B14 …0 in the VDM Header. Their definition and use are the sole responsibility of the vendor indicated by the VID. The Port Partners and Cable Plugs Shall exit any states entered using an Unstructured VDM when a Hard Reset appears on PD. The following rules apply to the use of Unstructured VDM Messages:

Unstructured VDMs Shall only be used when an Explicit Contract is in place.
Prior to establishing an Explicit Contract Unstructured VDMs Shall Not be sent and Shall be Ignored if received.
A Port receiving an Unstructured VDM for a VID that it does not recognize Shall Ignore the Message.
Only the DFP Shall be an Initiator of Unstructured VDMs.
Only the UFP or a Cable Plug Shall be a Responder to Unstructured VDM.
Unstructured VDMs Shall Not be initiated or responded to under any other circumstances.
A DFP or UFP which does not support Unstructured VDMs Shall Ignore any Unstructured VDMs received.
A command sequence Shall be Interruptible e.g. due to the need for a power related AMS.
Unstructured VDMs Shall only be used during Modal Operation in the context of an Active Mode.
Unstructured VDMs May be used with SOP* Packets.
Table 6-18: Unstructured VDM Header

Bit(s)	Parameter	Description
B31 …16	Vendor ID (VID)	Unique 16-bit unsigned integer. Assigned by the USB-IF to the Vendor.
B15	VDM Type	0 = Unstructured VDM
B14 …0	Available for Vendor Use	Content of this field is defined by the vendor.
6.4.4.1.1 USB Vendor ID

The Vendor ID field Shall contain the 16-bit Vendor ID value assigned to the vendor by the USB-IF (VID). No other value Shall be present in this field.

6.4.4.1.2 VDM Type

The VDM Type field Shall be set to zero indicating that this is an Unstructured VDM.

6.4.4.2 Structured VDM

Setting the VDM Type field to 1 (Structured VDM) defines the use of bits B14 …0 in the Structured VDM Header. The fields in the Structured VDM Header are defined in Table 6-19. The following rules apply to the use of Structured VDM Messages:

Structured VDMs Shall only be used when an Explicit Contract is in place with the following exception:
Prior to establishing an Explicit Contract a Source May issue Discover Identity Messages, to a Cable Plug using SOP’ Packets, as an Initiator (see Section 8.3.3.10.11).
Only the DFP Shall be an Initiator of Structured VDMs except for the Attention Command that Shall only be initiated by the UFP.
Only the UFP or a Cable Plug Shall be a Responder to Structured VDMs.
Structured VDMs Shall Not be initiated or responded to under any other circumstances.
A DFP or UFP which does not support Structured VDMs Shall Ignore any Structured VDMs received.
When a Cable Plug does not support Structured VDMs any Structured VDMs received Shall be Ignored.
A DFP, UFP or Cable Plug which supports Structured VDMs and receiving a Structured VDM for a SVID that it does not recognize Shall reply with a NAK Command.
A Structured VDM Command sequence Shall be Interruptible e.g. due to the need for a power related AMS.
Table 6-19: Structured VDM Header

Bit(s)	Field	Description
B31 …16	Standard or Vendor ID (SVID)	Unique 16-bit unsigned integer, assigned by the USB-IF
B15	VDM Type	1 = Structured VDM
B14 …13	Structured VDM Version	Version Number of the Structured VDM (not this specification Version): Version 1.0 = 0; Values 1-3 are Reserved and Shall Not be used
B12 …11	Reserved	For Commands 0 …15 Shall be set to 0 and Shall be Ignored
B10 …8	Object Position	For Enter Mode, Exit Mode and Attention Commands: 000b = Reserved; 001b …110b = Index into the list of VDOs to identify the desired Mode VDO; 111b = Exit all Active Modes (equivalent of a power on reset). Commands 0…3, 7…15: 000b; 001b …111b = Reserved and Shall Not be used
B7…6	Command Type	00b = REQ (Request from Initiator Port); 01b = ACK (Acknowledge Response from Responder Port); 10b = NAK (Negative Acknowledge Response from Responder Port); 11b = BUSY (Busy Response from Responder Port)
B5	Reserved	Shall be set to 0 and Shall be Ignored
B4…0	Command1	0 = Reserved, Shall Not be used; 1 = Discover Identity; 2 = Discover SVIDs; 3 = Discover Modes; 4 = Enter Mode; 5 = Exit Mode; 6 = Attention; 7-15 = Reserved, Shall Not be used; 16…31 = SVID Specific Commands
Table 6-20: Structured VDM Commands

Command	VDM Header SVID Field	SOP* used
Discover Identity	Shall only use the PD SID	Shall only use SOP/SOP’
Discover SVIDs	Shall only use the PD SID	Shall only use SOP/SOP’
Discover Modes	Valid with any SVID	Shall only use SOP/SOP’
Enter Mode	Valid with any SVID	Valid with SOP*
Exit Mode	Valid with any SVID	Valid with SOP*
Attention	Valid with any SVID	Valid with SOP
SVID Specific Commands	Valid with any SVID	Valid with SOP* (defined by SVID)
6.4.4.2.1 SVID

The SVID field Shall contain either a 16-bit USB Standard ID value (SID) or the 16-bit assigned to the vendor by the USB-IF (VID). No other value Shall be present in this field.

Table 6-21: SVID Values

Parameter	Value	Description
PD SID	0xFF00	Standard ID allocated to this specification.
6.4.4.2.2 VDM Type

The VDM Type field Shall be set to one indicating that this is a Structured VDM.

6.4.4.2.3 Structured VDM Version

The Structured VDM Version field indicates the level of functionality supported in the Structured VDM part of the specification. This is not the same version as the version of this specification. At this time, there is only one version (1.0) defined. This field Shall be set to zero to indicate Version 1.0. On receipt of a VDM Header with a higher Version number than that supported, a Port Shall respond using the highest Version number it supports.

6.4.4.2.4 Object Position

The Object Position field Shall be used by the Enter Mode and Exit Mode Commands. The Discover Modes Command returns a list of zero to six VDOs, each of which describes a Mode. The value in Object Position field is an index into that list that indicates which VDO (e.g., Mode) in the list the Enter Mode and Exit Mode Command refers to. The Object Position Shall start with one for the first Mode in the list. If the SVID is a VID, the content of the VDO for the Mode Shall be defined by the vendor. If the SVID is a SID, the content Shall be defined by the Standard. The VDO’s content May be as simple as a numeric value or as complex as a bit-mapped description of capabilities of the Mode. In all cases, the Responder is responsible for deciphering the contents to know whether or not it supports the Mode at the Object Position. This field Shall be set to zero in the Request or Response (REQ, ACK, NAK or BUSY) when not required by the specification of the individual Command.

6.4.4.2.5 Command Type

6.4.4.2.5.1 Commands other than Attention

This Command Type field Shall be used to indicate the type of Command request/response being sent. An Initiator Shall set the field to REQ to indicate that this is a Command request from an Initiator. If Structured VDMs are supported, then the responses are as follows:

“Responder ACK” is the normal return and Shall be sent to indicate that the Command request was received and handled normally.
“Responder NAK” Shall be returned when the Command request:
Has an Invalid parameter (e.g., Invalid SVID or Mode)
Cannot be acted upon because the configuration is not correct (e.g., a Mode which has a dependency on another Mode or a request to exit a Mode which is not Active).
Is not recognized
The handling of “Responder NAK” is left up to the Initiator.
“Responder BUSY” Shall be sent in the response to a VDM when the Responder is unable to respond to the Command request immediately, but the Command request May be retried. The Initiator Shall wait tVDMBusy after a “Responder BUSY” before retrying the Command request (see Table 6-22 for Command specific time values).
6.4.4.2.5.2 Attention Command

The Attention Command is a special case Command which is a Notification and is used to indicate a change of state on the Port. The Attention Command does not require a response. The Initiator sends the Attention Command to inform the Responder of a condition change, but the Responder does not need to send an acknowledgement.

6.4.4.3 Use of Commands

The VDM Header for a Structured VDM Message defines Commands used to retrieve a list of SVIDs the device supports, to discover the Modes associated with each SVID, and to enter/exit the Modes. The Commands include:

Discover Identity
Discover SVIDs
Discover Modes
Enter Mode
Exit Mode
Attention
Additional Command space is also reserved for Standard and Vendor use and for future extensions. The Command sequences use the terms Initiator and Responder to identify messaging roles the ports are taking on relative to each other. This role is independent of the Port’s power capability (Provider, Consumer etc.) or its present power role (Source or Sink). The Initiator is the Port sending the initial Command request and the Responder is the Port replying with the Command response. See Section 6.4.4.3.6. All Ports that support Modes Shall support the Discover Identity, Discover SVIDs, Discover Modes, Enter Mode, and Exit Mode Commands. Table 6-22 details the responses a Responder May issue to each Command request. Responses not listed for a given Command Shall Not be sent by a Responder. A NAK response Should be taken as an indication not to retry that particular Command.

Table 6-22: Commands and Responses

Command	Allowed Response	Reference
Discover Identity	ACK, NAK, BUSY	Section 6.4.4.3.1
Discover SVIDs	ACK, NAK, BUSY	Section 6.4.4.3.2
Discover Modes	ACK, NAK, BUSY	Section 6.4.4.3.3
Enter Mode	ACK, NAK	Section 6.4.4.3.4
Exit Mode	ACK, NAK	Section 6.4.4.3.5
Attention	None	Section 6.4.4.3.6
6.4.4.3.1 Discover Identity

The Discover Identity Command is provided to enable an Initiator to identify its Port Partner and for an Initiator (VCONN Source) to identify the Attached Responder (Cable Plug). The Discovery Identity Command is also used to determine whether a Cable Plug is PD-Capable by looking for a GoodCRC Message Response. The Discover Identity Command Shall be used to determine whether a given Cable Plug is PD Capable (see Section 8.3.3.9.2 and Section 8.3.3.10.11). In this case a Discover Identity Command request sent to SOP’ Shall Not cause a Soft Reset if a GoodCRC Message response is not returned since this can indicate a non-PD Capable cable. Note that a Cable Plug will not be ready for PD Communication until tVCONN Stable after VCONN has been applied (see [USB Type-C 1.2]). During Cable Plug discovery, when there is an Explicit Contract, Discover Identity Commands are sent at a rate defined by the DiscoverIdentityTimer (see Section 6.5.15) up to a maximum of nDiscoverIdentityCount times (see Section 6.6.6). A PD-Capable Cable Plug Shall return a Discover Identity Command ACK in response to a Discover Identity Command request sent to SOP’. A PD-Capable UFP that supports Modal Operation Shall return a Discover Identity Command ACK in response to a Discover Identity Command request sent to SOP. The SVID in the Discover Identity Command request Shall be set to the PD SID (see Table 6-21). The Number of Data Objects field in the Message Header in the Discover Identity Command request Shall be set to 1 since the Discover Identity Command request Shall Not contain any VDOs. The Discover Identity Command ACK sent back by the Responder Shall contain an ID Header VDO, a Cert Stat VDO, a Product VDO, and the Product Type VDOs defined by the Product Type as shown in Figure 6-6. This specification defines the following Product Type VDOs:

Cable VDO (see Section 6.4.4.3.1.4)
Alternate Mode Adapter VDO (see Section 6.4.4.3.1.5)
No VDOs other than those defined in this specification Shall be sent as part of the Discover Identity Command response. Where there is no Product Type VDO defined for a specific Product Type, no VDOs Shall be sent as part of the Discover Identity Command response. Any additional VDOs received by the initiator Shall be Ignored.

Figure 6-6: Discover Identity Command Response

Header | No. of Data Objects = 4-71VDM Header | ID Header VDO | Cert Stat VDO | 0..32 Product Type VDO(s) | Product VDO 1

Only Data objects defined in this specification can be sent as part of the Discover Identity Command. The Number of Data Objects field in the Message Header in the Discover Identity Command NAK and BUSY responses Shall be set to 1 since they Shall Not contain any VDOs.

6.4.4.3.1.1 ID Header VDO

The ID Header VDO contains information corresponding to the Power Delivery Product. The fields in the ID Header VDO Shall be as defined in Table 6-23.

Table 6-23: ID Header VDO

Bit(s)	Description	Reference
B31	USB Communications Capable as USB Host	Shall be set to one if the product is capable of enumerating USB Devices. Shall be set to zero otherwise.
B30	USB Communications Capable as a USB Device	Shall be set to one if the product is capable of enumerating as a USB Device. Shall be set to zero otherwise.
B29 …27	Product Type (UFP)	000b – Undefined; 001b – PDUSB Hub; 010b – PDUSB Peripheral; 011b …100b – Reserved, Shall Not be used; 101b – Alternate Mode Adapter (AMA); 110b …111b – Reserved, Shall Not be used. Product Type (Cable Plug): 000b – Undefined; 001b …010b – Reserved, Shall Not be used; 011b – Passive Cable; 100b – Active Cable; 101b …111b – Reserved, Shall Not be used.
B26	Modal Operation Supported	Shall be set to one if the product supports Modal Operation. Shall be set to zero otherwise.
B25 …16	Reserved	Shall be set to zero.
B15 …0	USB Vendor ID	16-bit unsigned integer. USB Vendor ID [USB 2.0] /[USB 3.1]
6.4.4.3.1.1.1 Data Capable as a USB Host

The Data Capable as a USB Host field is used to indicate whether or not the Port has a USB Host Capability.

6.4.4.3.1.1.2 Data Capable as a USB Device

The Data Capable as a USB Device field is used to indicate whether or not the Port has a USB Device Capability.

6.4.4.3.1.1.3 Product Type (UFP)

The Product Type (UFP) field indicates the type of Product when in UFP Data Role, whether a VDO will be returned and if so the type of VDO to be returned.

Table 6-24: Product Types (UFP)

Product Type	Description	Product Type VDO	Reference
Undefined	Shall be used where no other Product Type value is appropriate.	None	
PDUSB Hub	Shall be used when the Product is a PDUSB Hub.	None	
PDUSB Peripheral	Shall be used when the Product is a PDUSB Device other than a PDUSB Hub.	None	
Alternate Mode Adapter	Shall be used when the Product is a PDUSB Device that supports one or more Alternate Modes.	AMA VDO	Section 6.4.4.3.1.5
6.4.4.3.1.1.4 Product Type (Cable Plug)

The Product Type (Cable Plug) field indicates the type of Product when the Product is a Cable Plug, whether a VDO will be returned and if so the type of VDO to be returned.

Table 6-25: Product Types (Cable Plug)

Product Type	Description	Product Type VDO	Reference
Undefined	Shall be used where no other Product Type value is appropriate.	None	
Active Cable	Shall be used when the Product is a cable that incorporates signal conditioning circuits.	Active Cable VDO	Section 6.4.4.3.1.4.2
Passive Cable	Shall be used when the Product is a cable that does not incorporate signal conditioning circuits.	Passive Cable VDO	Section 6.4.4.3.1.4.1
6.4.4.3.1.1.5 Modal Operation Supported

The Modal Operation Supported bit is used to indicate whether or not the Product supports Modes.

6.4.4.3.1.1.6 Vendor ID

Manufacturers Shall set the Vendor ID field to the value of the Vendor ID assigned to them by USB-IF. For USB Devices or Hubs which support USB communications the Vendor ID field Shall be identical to the Vendor ID field defined in the product’s USB Device Descriptor (see [USB 2.0] and [USB 3.1]).

6.4.4.3.1.2 Cert Stat VDO

The Cert Stat VDO Shall contain the XID assigned by USB-IF to the product before certification in binary format. The fields in the Cert Stat VDO Shall be as defined in Table 6-26.

Table 6-26: Cert Stat VDO

Bit(s)	Description	Reference
B31 …0	32-bit unsigned integer, XID Assigned by USB-IF	
6.4.4.3.1.3 Product VDO

The Product VDO contains identity information relating to the product. The fields in the Product VDO Shall be as defined in Table 6-27.

Table 6-27: Product VDO

Bit(s)	Description	Reference
B31 …16	16-bit unsigned integer. USB Product ID [USB 2.0] /[USB 3.1]	
B15 …0	16-bit unsigned integer. bcdDevice [USB 2.0] /[USB 3.1]	
Manufacturers Should set the USB Product ID field to a unique value identifying the product and Should set the bcdDevice field to a version number relevant to the release version of the product.

6.4.4.3.1.4 Cable VDO

The Cable VDO defined in this section Shall be sent when the Product Type is given as Passive or Active Cable.

6.4.4.3.1.4.1 Passive Cable VDO

A Passive Cable has a USB Plug on each end at least one of which is a Cable Plug supporting SOP’ Communication. A Passive Cable Shall Not incorporate data bus signal conditioning circuits and hence has no concept of Super Speed Directionality. A Passive Cable Shall include a V BUS wire and Shall only respond to SOP’ Communication. Passive Cables Shall support the Structured VDM Discover Identity Command and Shall return the Passive Cable VDO in a Discover Identity Command ACK as shown in Table 6-28.

Table 6-28: Passive Cable VDO

Bit(s)	Field Description
B31 …28	HW Version 0000b…1111b assigned by the VID owner
B27 …24	Firmware Version 0000b…1111b assigned by the VID owner
B23 …20	Reserved Shall be set to zero.
B19 …18	USB Type-C plug to USB Type-A/B/C/Captive 00b = USB Type-A 01b = USB Type-B 10b = USB Type-C 11b = Captive
B17	Reserved Shall be set to zero.
B16 …13	Cable Latency 0000b – Reserved, Shall Not be used; 0001b – <10ns (~1m); 0010b – 10ns to 20ns (~2m); 0011b – 20ns to 30ns (~3m); 0100b – 30ns to 40ns (~4m); 0101b – 40ns to 50ns (~5m); 0110b – 50ns to 60ns (~6m); 0111b – 60ns to 70ns (~7m); 1000b – >70ns (>~7m); 1001b ….1111b – Reserved, Shall Not be used
B12 …11	Cable Termination Type 00b = VCONN not required. Cable Plugs that only support Discover Identity Commands Shall set these bits to 00b. 01b = VCONN required 10b …11b = Reserved, Shall Not be used
B10	SSTX1 Directionality Support 0 = Fixed 1 = Configurable The directionality bits Shall not be interpreted as having any significance.
B9	SSTX2 Directionality Support 0 = Fixed 1 = Configurable
B8	SSRX1 Directionality Support 0 = Fixed 1 = Configurable
B7	SSRX2 Directionality Support 0 = Fixed 1 = Configurable
B6…5	VBUS Current Handling Capability 00b = Reserved, Shall Not be used; 01b = 3A
6.4.4.3.1.4 Cable VDO
Passive Cable VDO (Table 6-28)
B31 …28: HW Version (assigned by VID owner)
B27 …24: Firmware Version (assigned by VID owner)
B23 …20: Reserved (set to zero)
B19 …18: USB Type-C plug to USB Type-A/B/C/Captive
00b = USB Type-A
01b = USB Type-B
10b = USB Type-C
11b = Captive
B17: Reserved (set to zero)
B16 …13: Cable Latency
0000b – Reserved
0001b – <10ns (~1m)
0010b – 10ns to 20ns (~2m)
0011b – 20ns to 30ns (~3m)
0100b – 30ns to 40ns (~4m)
0101b – 40ns to 50ns (~5m)
0110b – 50ns to 60ns (~6m)
0111b – 60ns to 70ns (~7m)
1000b – >70ns (~7m)
1001b …1111b – Reserved
B12 …11: Cable Termination Type
00b = VCONN not required
01b = VCONN required
10b …11b = Reserved
B10: SSTX1 Directionality Support
0 = Fixed
1 = Configurable
B9: SSTX2 Directionality Support
0 = Fixed
1 = Configurable
B8: SSRX1 Directionality Support
0 = Fixed
1 = Configurable
B7: SSRX2 Directionality Support
0 = Fixed
1 = Configurable
B6…5: VBUS Current Handling Capability
00b = Reserved
01b = 3A
10b = 5A
11b = Reserved
B4: VBUS through cable
0 = No
1 = Yes
B3: Reserved (set to 0)
B2…0: USB SuperSpeed Signaling Support
000b = USB 2.0 only
001b = USB 3.1 Gen1
010b = USB 3.1 Gen1 and Gen2
011b … 111b = Reserved
Active Cable VDO (Table 6-29)
B31 …28: HW Version (assigned by VID owner)
B27 …24: Firmware Version (assigned by VID owner)
B23 …20: Reserved (set to zero)
B19 …18: USB Type-C plug to USB Type-A/B/C/Captive
00b = USB Type-A
01b = USB Type-B
10b = USB Type-C
11b = Captive
B17: Reserved (set to zero)
B16 …13: Cable Latency
0000b – Reserved
0001b – <10ns (~1m)
0010b – 10ns to 20ns (~2m)
0011b – 20ns to 30ns (~3m)
0100b – 30ns to 40ns (~4m)
0101b – 40ns to 50ns (~5m)
0110b – 50ns to 60ns (~6m)
0111b – 60ns to 70ns (~7m)
1000b – 1000ns (~100m)
1001b – 2000ns (~200m)
1010b – 3000ns (~300m)
1011b …1111b – Reserved
B12 …11: Cable Termination Type
00b … 01b = Reserved
10b = One end Active, one end passive, VCONN required
11b = Both ends Active, VCONN required
B10: SSTX1 Directionality Support
0 = Fixed
1 = Configurable
B9: SSTX2 Directionality Support
0 = Fixed
1 = Configurable
B8: SSRX1 Directionality Support
0 = Fixed
1 = Configurable
B7: SSRX2 Directionality Support
0 = Fixed
1 = Configurable
B6…5: VBUS Current Handling Capability (When VBUS Through Cable is “No”)
00b = Reserved
01b = 3A
10b = 5A
11b = Reserved
B4: VBUS through cable
0 = No
1 = Yes
B3: SOP’’ controller present
1 = SOP’’ controller present
0 = No SOP’’ controller present
B2…0: USB SuperSpeed Signaling Support
000b = USB 2.0 only
001b = USB 3.1 Gen1
010b = USB 3.1 Gen1 and Gen2
011b …111b = Reserved
6.4.4.3.1.5 Alternate Mode Adapter VDO (Table 6-30)
B31 …28: HW Version (assigned by VID owner)
B27 …24: Firmware Version (assigned by VID owner)
B23 …12: Reserved (set to zero)
B11: SSTX1 Directionality Support
0 = Fixed
1 = Configurable
B10: SSTX2 Directionality Support
0 = Fixed
1 = Configurable
B9: SSRX1 Directionality Support
0 = Fixed
1 = Configurable
B8: SSRX2 Directionality Support
0 = Fixed
1 = Configurable
B7…5: VCONN power
000b = 1W
001b = 1.5W
010b = 2W
011b = 3W
100b = 4W
101b = 5W
110b = 6W
111b = Reserved
B4: VCONN required
0 = No
1 = Yes
B3: VBUS required
0 = No
1 = Yes
B2…0: USB SuperSpeed Signaling Support
000b = USB 2.0 only
001b = USB 3.1 Gen1 and USB 2.0
010b = USB 3.1 Gen1, Gen2 and USB 2.0
011b = USB 2.0 billboard only
100b …111b = Reserved
6.4.4.3.2 Discover SVIDs
Discover SVIDs Command: Used by an Initiator to determine SVIDs for which a Responder has Modes.
SVID List Termination: Always ends with one or two 0x0000 SVIDs.
Discover SVIDs Command Request: Number of Data Objects field set to 1.
Discover SVIDs Command ACK: Contains one or more SVIDs, ending with a terminating 0x0000 SVID or an additional VDO with two 0x0000 SVIDs if needed.
Responder: Restarts the list of SVIDs with each Discover Identity Command request.
NAK and BUSY Responses: Number of Data Objects field set to 1, containing no VDOs.
Discover SVIDs
The Discover SVIDs Command is used by an Initiator to determine the SVIDs for which a Responder has Modes. The Discover SVIDs Command is used in conjunction with the Discover Modes Command in the Discovery Process to determine which Modes a device supports. The list of SVIDs is always terminated with one or two 0x0000 SVIDs. The SVID in the Discover SVIDs Command Shall be set to the PD SID by both the Initiator and the Responder for this Command. The Number of Data Objects field in the Message Header in the Discover SVIDs Command request Shall be set to 1 since the Discover SVIDs Command request Shall Not contain any VDOs. The Discover SVIDs Command ACK sent back by the Responder Shall contain one or more SVIDs. The SVIDs are returned 2 per VDO. If there are an odd number of supported SVIDs, the Discover SVIDs Command is returned ending with a SVID value of 0x0000 in the last part of the last VDO. If there are an even number of supported SVIDs, the Discover SVIDs Command is returned ending with an additional VDO containing two SVIDs with values of 0x0000. A Responder Shall only return SVIDs for which a Discover Modes Command request for that SVID will return at least one Mode. A Responder that does not support any SVIDs Shall return a NAK. The Number of Data Objects field in the Message Header in the Discover SVIDs Command NAK and BUSY responses Shall be set to 1 since they Shall Not contain any VDOs. If the Responder supports 12 or more SVIDs then the Discover SVIDs Command Shall be executed multiple times until a Discover SVIDs VDO is returned ending either with a SVID value of 0x0000 in the last part of the last VDO or with a VDO containing two SVIDs with values of 0x0000. Each Discover SVID ACK Message, other than the one containing the terminating 0x0000 SVID, Shall convey 12 SVIDs. The Responder Shall restart the list of SVIDs each time a Discover Identity Command request is received from the Initiator. Note that since a Cable Plug does not retry Messages if the GoodCRC Message from the Initiator becomes corrupted, the Cable Plug will consider the Discover SVIDs Command ACK unsent and will send the same list of SVIDs again.

Discover Modes
The Discover Modes Command is used by an Initiator to determine the Modes a Responder SVID. The SVID in the Discover Modes Command Shall be set to the SVID for which Modes are being requested by both the Initiator and the Responder for this Command. The Number of Data Objects field in the Message Header in the Discover Modes Command request Shall be set to 1 since the Discover Modes Command request Shall Not contain any VDOs. The Discover Modes Command ACK sent back by the Responder Shall contain one or more Modes. The Discover Modes Command ACK Shall contain a Message Header with the Number of Data Objects field set to a value of 1 to 7 (the actual value is the number of Mode objects plus one). If the ID is a VID, the structure and content of the VDO is left to the Vendor. If the ID is a SID, the structure and content of the VDO is defined by the relevant Standard. A Responder that does not support any Modes Shall return a NAK. The Number of Data Objects field in the Message Header in the Discover Modes Command NAK and BUSY responses Shall be set to 1 since they Shall Not contain any VDOs.

Enter Mode Command
The Enter Mode Command is used by an Initiator (DFP) to command a Responder (UFP or Cable Plug) to enter a specified Mode of operation. Only a DFP is allowed to initiate the Enter Mode Process which it starts after it has successfully completed the Discovery Process. The value in the Object Position field in the VDM Header Shall indicate to which Mode in the Discover Modes Command the VDO refers. The value 1 always indicates the first Mode as it is the first object following the VDM Header. The value 2 refers to the next Mode and so forth. The Number of Data Objects field in the Message Header in the Command request Shall be set to either 1 or 2 since the Enter Mode Command request Shall Not contain more than 1 VDO. When a VDO is included in an Enter Mode Command request, the contents of the 32-bit VDO is defined by the Mode. The Number of Data Objects field in the Command response Shall be set to 1 since an Enter Mode Command response (ACK, NAK, BUSY) Shall Not contain any VDOs. Before entering a Mode, by sending the Enter Mode Command request, that requires the reconfiguring of any pins on entry to that Mode, the Initiator Shall ensure that those pins being reconfigured are placed into the USB Safe State. Before entering a Mode that requires the reconfiguring of any pins, the Responder Shall ensure that those pins being reconfigured are placed into either USB operation or the USB Safe State. A device May support multiple Modes with one or more active at any point in time. Any interactions between them are the responsibility of the Standard or Vendor. Where there are multiple Active Modes at the same time Modal Operation Shall start on entry to the first Mode. On receiving an Enter Mode Command request, the Responder Shall respond with either an ACK or a NAK response. The Responder is not allowed to return a BUSY response. The value in the Object Position field of the Enter Mode Command response Shall contain the same value as the received Enter Mode Command request. If the Responder responds to the Enter Mode Command request with an ACK, the Responder Shall enter the Mode before sending the ACK. The Initiator Shall enter the Mode on reception of the ACK. Receipt of the GoodCRC Message corresponding to the ACK confirms to the Responder that the Initiator is in an Active Mode and is ready to operate. If the Responder responds to the Enter Mode Command request with a NAK, the Mode is not entered. If not presently in Modal Operation, the Initiator Shall return to USB operation. If not presently in Modal Operation, the Responder Shall remain in either USB operation or the USB Safe State. If the Initiator fails to receive a response within tVDMWaitModeEntry it Shall Not enter the Mode but return to USB operation.

Exit Mode Command
The Exit Mode Command is used by an Initiator (DFP) to command a Responder (UFP or Cable Plug) to exit its Active Mode and return to normal USB operation. Only the DFP is allowed to initiate the Exit Mode Process. The value in the Object Position field Shall indicate to which Mode in the Discover Modes Command the VDO refers and Shall have been used previously in an Enter Mode Command request for an Active Mode. The value 1 always indicates the first Mode as it is the first object following the VDM Header. The value 2 refers to the next Mode and so forth. A value of 111b in the Object Position field Shall indicate that all Active Modes Shall be exited. The Number of Data Objects field in both the Command request and Command response (ACK, NAK, BUSY) Shall be set to 1 since an Exit Mode Command Shall Not contain any VDOs. The Responder Shall exit its Active Mode before sending the response Message. The Initiator Shall exit its Active Mode before sending GoodCRC Message in response to the ACK. Receipt of the GoodCRC Message confirms to the Responder that the Initiator has exited the Mode. The Responder Shall Not return a BUSY acknowledgment and Shall only return a NAK acknowledgment to a request not containing an Active Mode (i.e., Invalid object position). An Initiator which fails to receive an ACK within tVDMExitMode or receives a NAK or BUSY response Shall exit its Active Mode.

Attention
The Attention Command May be used by the Initiator (UFP) to notify the Responder (DFP) that it requires service. The value in the Object Position field Shall indicate to which Mode in the Discover Modes Command the VDO refers and Shall have been used previously in an Enter Mode Command request for an Active Mode. The value 1 always indicates the first Mode as it is the first object following the VDM Header. The value 2 refers to the next Mode and so forth. A value of 000b or 111b in the Object Position field Shall Not be used by the Attention Command. The Number of Data Objects field in the Message Header Shall be set to 1 or 2. The Attention Command Shall Not contain more than 1 VDO. When a VDO is included in an Attention Command, the contents of the 32-bit VDO is defined by the Mode. No more than nAttentionCount Commands Shall be sent during any given tAttentionAverage (max) period. The spacing between successive Attention Commands Shall be at least tAttentionSpacing except that a single burst of no more than 2 Attention Commands with a spacing of at least tAttentionBurstSpacing May be sent during any given tAttentionAverage (max) period.

Command Processes
The Message flow of Commands during a Process is a query followed by a response. Every Command request sent has to be responded to with a GoodCRC Message. The GoodCRC Message only indicates the Command request was received correctly; it does not mean that the Responder understood or even supports a particular SVID. In order for the Initiator to know that the Command request was actually consumed, it needs an acknowledgment from the Responder. There are three responses that indicate the Responder received and processed the Command request:

ACK
NAK
BUSY
The Responder Shall complete:

Enter Mode requests within tVDMEnterMode
Exit Mode requests within tVDMExitMode
Other requests within the specified timing limits
NEGATIVE: tVDM Receiver Response
An Initiator not receiving a response within the following times shall timeout and return to either the PE_SRC_ Ready or PE_SNK_ Ready state (as appropriate):

Enter Mode requests within tVDMWaitModeEntry
Exit Mode requests within tVDMWaitModeExit
Other requests within tVDMSenderResponse
The Responder shall respond with:

ACK if it recognizes the SVID and can process it at this time
NAK if:
It recognizes the SVID but cannot process the Command request
It does not recognize the SVID
It does not support the Command
A VDO has been supplied which is Invalid
BUSY if it recognizes the SVID and the Command but cannot process the Command request at this time.
The ACK, NAK, or BUSY response shall contain the same SVID as the Command request.

Discovery Process
The Initiator (DFP) always begins the Discovery Process. The Discovery Process has two phases:

In the first phase, the Discover SVIDs Command request is sent by the Initiator to get the list of SVIDs the Responder supports.
In the second phase, the Initiator sends a Discover Modes Command request for each SVID supported by both the Initiator and Responder.
Enter Vendor Mode / Exit Vendor Mode Processes
The result of the Discovery Process is that both the Initiator and Responder identify the Modes they mutually support. The Initiator (DFP), upon finding a suitable Mode, uses the Enter Mode Command to enable the Mode. The Responder (UFP or Cable Plug) and Initiator continue using the Active Mode until the Active Mode is exited.

In a managed termination, using the Exit Mode Command, the Active Mode shall be exited in a controlled manner. In an unmanaged termination, triggered by a Power Delivery Hard Reset (i.e., Hard Reset Signaling sent by either Port Partner) or by cable Detach (device unplugged), the Active Mode shall still be exited but there shall not be a transition through the USB Safe State. In both managed and unmanaged terminations, the Initiator and Responder return to USB operation as defined in [USB Type-C 1.2].

The overall Message flow is illustrated in Figure 6-17.

VDM Message Timing and Normal PD Messages
Any Command Process or other VDM sequence may be interrupted by any other USB PD Message. The Vendor or Standards defined state operation shall comprehend this and continue to operate as expected when processing any other USB PD Messages. The timing and interspersing of VDMs between regular PD Messages shall be done without perturbing the PD Message sequences. This requirement shall apply to both Unstructured VDMs and Structured VDMs.

The use of Structured VDMs by an Initiator shall not interfere with the normal PD Message timing requirements, nor shall either the Initiator or Responder interrupt a PD Message sequence (e.g., Power Negotiation, Power Role Swap, Data Role Swap, etc.). The use of Unstructured VDMs shall not interfere with normal PD Message timing. VDM sequences shall be interruptible after the return of a GoodCRC Message has been completed. In the case where there is an error in transmission of the Vendor-Defined Message, the Vendor-Defined Message will not be retried. Instead, the incoming Message will be processed by the Policy Engine. This means that the Vendor-Defined Message sequence will need to be re-run after the USB PD Message sequence has completed.

The overall Message flow is illustrated in Figure 6-18.

Timers
All the following timers are defined in terms of bits on the bus regardless of where they are implemented in terms of the logical architecture. It is left to the implementer to ensure that this timing is observed in a real system.

CRCReceive Timer
The CRCReceiveTimer shall be used by the sender’s Protocol Layer to ensure that a Message has not been lost. Failure to receive an acknowledgment of a Message (a GoodCRC Message), whether caused by a bad CRC on the receiving end or by a garbled Message within tReceive, is detected when the CRCReceiveTimer expires. The sender’s Protocol Layer response when a CRCReceiveTimer expires shall be to retry nRetryCount times. Note that Cable Plugs do not retry Messages (see Section 6.6.2). Sending of the Preamble corresponding to the retried Message shall start within tRetry of the CRCReceiveTimer expiring. The CRCReceiveTimer shall be started when the last bit of the Message EOP has been transmitted by the Physical Layer. The CRCReceiveTimer shall be stopped when the last bit of the EOP corresponding to the GoodCRC Message has been received by the Physical Layer. The Protocol Layer receiving a Message shall respond with a GoodCRC Message within tTransmit in order to ensure that the sender’s CRCReceiveTimer does not expire. The tTransmit shall be measured from when the last bit of the Message EOP has been received by the Physical Layer until the first bit of the Preamble of the GoodCRC Message has been transmitted by the Physical Layer.

Sender Response Timer
The SenderResponseTimer shall be used by the sender’s Policy Engine to ensure that a Message requesting a response (e.g., Get_Source_Cap Message) is responded to within a bounded time of tSenderResponse. Failure to receive the expected response is detected when the SenderResponseTimer expires. The Policy Engine’s response when the SenderResponseTimer expires shall be dependent on the Message sent (see Section 8.3). The SenderResponseTimer shall be started from the time the last bit of the GoodCRC Message EOP (i.e., the GoodCRC Message corresponding to the Message requesting a response) has been received by the Physical Layer. The SenderResponseTimer shall be stopped when the last bit of the expected response Message EOP has been received by the Physical Layer. The receiver of a Message requiring a response shall respond within tReceiverResponse in order to ensure that the sender’s SenderResponseTimer does not expire. The tReceiverResponse time shall be measured from the time the last bit of the Message EOP has been received by the Physical Layer until the first bit of the response Message Preamble has been transmitted by the Physical Layer.

Activity Timers
The Protocol Layer uses activity timers to ensure that there is adequate activity to allow the Source to know that a Sink is still present. The activity timer’s value and use are specific to the role the device is playing – either Source or Sink. The values are selected to allow one missed response to a Ping Message without the Source returning its output to the default state. Activity Timers are not used in conjunction with the [USB Type-C 1.2] connector (see Section 6.3.5.2).

Source Activity Timer
A PD Source that is not using a USB Type-C connector is required to maintain a minimal level of bus traffic in order to detect Sink Detach. It does so by periodically sending a Ping Message during a connection to a PD Sink, whenever there is no other Message traffic. In order to maintain bus activity, the Source shall start its SourceActivityTimer as described in Section 8.3.3.2. Whenever the timer expires, after tSourceActivity, the Source shall send a Ping Message. It shall then initialize and restart the SourceActivityTimer ready for the next Ping Message. This ensures that Message activity is maintained in cases where the time between normal Messages would exceed the Sink’s activity timeout. For example, power supply transitions might take longer than the activity timeout meaning that a Ping is sent prior to the PS_RDY Message. The SourceActivityTimer shall be reset and restarted on entry to the PE_SRC_ Ready state (see Section 8.3.3.2). This occurs when:

The last bit of the GoodCRC Message EOP has been received by the Physical Layer (i.e., a Message has been successfully sent prior to entering the PE_SRC_ Ready state).
The last bit of any Message EOP has been received by the Physical Layer.
The SenderResponseTimer times out.
A failure to see a GoodCRC Message in response to a Ping Message within tReceive (after nRetryCount retries) is indicative of a communications failure. This shall cause the Source to send a Soft_Reset Message, transmission of which shall be completed within tSoftReset of the CRCReceiveTimer expiring (see Section 6.7.1). See Section 8.3.3.6 for more details of when Ping Messages are transmitted.

Sink Activity Timer
The Sink shall support the SinkActivityTimer. Sinks shall observe an absence of a Ping, or other Messages within tSinkActivity, as an indication of communications failure and as such shall issue Hard Reset Signaling in order to return to USB Default Operation. Initialization and restarting of the SinkActivityTimer is described in Section 8.3.3.3.7. Any additional action taken is device implementation specific. Sinks shall also use the absence of VBUS to return to USB Default Operation unless this is part of an ongoing Power Role Swap sequence. The SinkActivityTimer shall be re-initialized and restarted when the last bit of a Ping, or any other Message EOP, has been received by the Physical Layer. Note: to avoid triggering unnecessary Hard Resets, the SinkActivityTimer shall not be run when the Sink is:

Using a [USB Type-C 1.2] connector or
Using a USB Type-A operating in its default Source role or using a USB Type-B connector operating in its default Sink role, at vSafe5V, in the PE_SNK_ Ready state.
This is because Ping Messages are optional in these cases (see Section 6.3.5). See Section 8.3.3.3 for more details of when the SinkActivityTimer is run.

Capability Timers
Sources and Sinks use Capability Timers to determine attachment of a PD Capable device. By periodically sending or requesting capabilities, it is possible to determine PD device attachment when a response is received.

Source Capability Timer
Prior to a successful negotiation, a Source shall use the SourceCapabilityTimer to periodically send out a Source_Capabilities Message every tTypeCSendSourceCap for the USB Type-C connector and tSendSourceCap for all other connectors while:

An A-plug is attached
The Source is not in an active connection with a PD Sink Port
Whenever there is a SourceCapabilityTimer timeout, the Source shall send a Source_Capabilities Message. It shall then re-initialize and restart the SourceCapabilityTimer. The SourceCapabilityTimer shall be stopped when the last bit of the EOP corresponding to the GoodCRC Message has been received by the Physical Layer since a PD connection has been established. At this point, the Source waits for a Request Message or a response timeout. See Section 8.3.3.2 for more details of when Source_Capabilities Messages are transmitted.

Sink Wait Cap Timer
The Sink shall support the SinkWaitCapTimer. When a Sink observes an absence of Source_Capabilities Messages, after VBUS is present, for a duration of tTypeCSinkWaitCap, the Sink shall take appropriate action as defined.
Discovery Process
The USB Type-C connector and tSinkWaitCap for all other connectors: The Sink shall issue Hard Reset Signaling to restart the sending of Source_Capabilities Messages by the Source (see Section 6.6.4). For more details on when the SinkWaitCapTimer is run, see Section 8.3.3.3.

Timers
tFirstSourceCap
After Port Partners are Attached, or after a Hard Reset or Power Role Swap, a Source shall send its first Source_Capabilities Message within tFirstSourceCap of VBUS reaching vSafe5V. This ensures that the Sink receives a Source_Capabilities Message before the Sink’s SinkWaitCapTimer expires.

SinkRequestTimer
The SinkRequestTimer ensures that there is a minimum time before the next Sink Request Message, after a Wait Message has been received from the Source in response to a Sink Request Message, which is tSinkRequest (see Section 6.3.12). The SinkRequestTimer shall be started when the EOP of a Wait Message has been received and stopped if any other Message is received or during a Hard Reset. The Sink shall wait at least tSinkRequest before sending a new Request Message. Whenever there is a SinkRequestTimer timeout, the Sink may send a Request Message. It shall then re-initialize and restart the SinkRequestTimer.

tPRSwapWait
The time before the next PR_Swap Message, after a Wait Message has been received in response to a PR_Swap Message, is a minimum of tPRSwapWait_min (see Section 6.3.12). The Port shall wait at least tPRSwapWait after receiving the EOP of a Wait Message sent in response to a PR_Swap Message before sending a new PR_Swap Message.

tDRSwapWait
The time before the next DR_Swap Message, after a Wait Message has been received in response to a DR_Swap Message, is a minimum of tDRSwapWait_min (see Section 6.3.12). The Port shall wait at least tDRSwapWait after receiving the EOP of a Wait Message sent in response to a DR_Swap Message before sending a new DR_Swap Message.

tVconnSwapWait
The time before the next VCONN_Swap Message, after a Wait Message has been received in response to a VCONN_Swap Message, is a minimum of tVCONNSwapWait_min (see Section 6.3.12). The Port shall wait at least tVCONNSwapWait after receiving the EOP of a Wait Message sent in response to a VCONN_Swap Message before sending a new VCONN_Swap Message.

Power Supply Timers
PSTransitionTimer
The PSTransitionTimer is used by the Policy Engine to timeout on a PS_RDY Message. It is started when a request for a new Capability has been accepted and will timeout after tPSTransition if a PS_RDY Message has not been received. This condition leads to a Hard Reset and a return to USB Default Operation. The PSTransitionTimer is started when the last bit of an Accept or GotoMin Message EOP has been received by the Physical Layer. It is stopped when the last bit of the PS_RDY Message EOP has been received by the Physical Layer.

PSSourceOffTimer
The PSSourceOffTimer is used by the Policy Engine in a Dual-Role Power device that is currently acting as a Sink to timeout on a PS_RDY Message during a Power Role Swap sequence. This condition leads to a Hard Reset for USB Type-A and Type-B Plugs and Error Recovery for Type-C plugs, returning to USB Default Operation. If a PR_Swap Message request has been sent by the Dual-Role Power device currently acting as a Source, the Sink can respond with an Accept Message. When the last bit of the EOP of the GoodCRC Message corresponding to this Accept Message is received by the Sink, the PSSourceOffTimer shall be started. If a PR_Swap Message request has been sent by the Dual-Role Power device currently acting as a Sink, the Source can respond with an Accept Message. When the last bit of the EOP of this Accept Message is received by the Sink, the PSSourceOffTimer shall be started. The PSSourceOffTimer is stopped when the last bit of the EOP of the PS_RDY Message is received. The PSSourceOffTimer relates to the time taken for the remote Dual-Role Power device to stop supplying power (see also Section 7.3.9 and Section 7.3.10). The timer shall time out if a PS_RDY Message has not been received from the remote Dual-Role Power device within tPSSourceOff.

PSSourceOnTimer
The PSSourceOnTimer is used by the Policy Engine in a Dual-Role Power device that has just stopped sourcing power and is waiting to start sinking power, to timeout on a PS_RDY Message during a Power Role Swap. This condition leads to a Hard Reset for USB Type-A and Type-B Plugs and Error Recovery for Type-C plugs, returning to USB Default Operation. The PSSourceOnTimer shall be started when the last bit of the EOP of the GoodCRC Message corresponding to the transmitted PS_RDY Message is received by the Physical Layer. It shall be stopped when the last bit of the EOP of the PS_RDY Message is received by the Physical Layer. The PSSourceOnTimer relates to the time taken for the remote Dual-Role Power device to start sourcing power (see also Section 7.3.9 and Section 7.3.10) and will time out if a PS_RDY Message indicating this has not been received within tPSSourceOn.

NoResponseTimer
The NoResponseTimer is used by the Policy Engine in a Source or Sink to determine that its Port Partner is not responding after a Hard Reset. When the NoResponseTimer times out, the Policy Engine shall issue up to nHardResetCount additional Hard Resets before determining that the Port Partner is non-responsive to USB Power Delivery messaging. If the Source fails to receive a GoodCRC Message in response to a Source_Capabilities Message within tNoResponse of:

The last bit of a Hard Reset Signaling being sent by the PHY Layer if the Hard Reset Signaling was initiated by the Sink
The last bit of a Hard Reset Signaling being received by the PHY Layer if the Hard Reset Signaling was initiated by the Source
Then the Source shall issue additional Hard Resets up to nHardResetCount times (see Section 6.7.2). For a non-responsive device, the Policy Engine in a Source may either decide to continue sending Source_Capabilities Messages or to go to non-USB Power Delivery operation and cease sending Source_Capabilities Messages.

BIST Timers
tBISTMode
tBISTMode is used to define the maximum time that a UUT has to enter a BIST mode when requested by a Tester. A UUT shall enter the appropriate BIST mode within tBISTMode of the last bit of the EOP of the BIST Message used to initiate the test being received by the Physical Layer. When in BIST Receiver Mode, the UUT is ready to receive a Test Frame from the Tester and respond appropriately with the BISTErrorCounter (see Section 6.5.8.5 and Section 6.4.3.1). When in BIST Transmit mode, the UUT starts transmitting Test Frames (see Section 6.4.3.2). For modes transmitting a continuous carrier signal (i.e., carrier modes and eye pattern), transmission shall start as soon as the UUT enters BIST mode.

tBISTResponse
tBISTResponse defines the maximum time which a UUT has to respond with a Test Frame when operating in BIST Transmit Mode (see Section 6.4.3.2).

BISTStartTimer
The BISTStartTimer is used by the Tester to ensure that there is a delay of more than tBISTMode before sending the first Test Frame after requesting BIST Receiver Mode. The BISTStartTimer is initialized and run once the BIST Message containing the BIST Data Object has been sent (i.e., a GoodCRC Message has been received). The first Test Frame is not sent until after the BISTStartTimer has expired.

BISTContMode Timer
The BISTContModeTimer is used by a UUT to ensure that a Continuous BIST Mode is exited in a timely fashion. A UUT that has been put into a Continuous BIST Mode shall return to normal operation (either PE_SRC_Transition_to_default, PE_SNK_Transition_to_default, or PE_CBL_Ready) within tBISTContMode of the last bit of the EOP of the GoodCRC Message sent in response to the BIST Message used to enable the Continuous BIST Mode.

BISTReceiveErrorTimer
The BISTReceiveErrorTimer shall be used by the sender’s Protocol Layer during BIST operation to detect when a Test Frame has been lost and to trigger the transmission of the next Test Frame. Failure to receive an acknowledgment of a Test Frame (BIST Message with a BIST Data Object of Returned BIST Counters), whether caused by a bad CRC on the receiving end or by a garbled Message within tBISTReceive, is detected when the BISTReceiveErrorTimer expires. The sender’s Protocol Layer response when a BISTReceiveErrorTimer expires shall be to continue operation. The BISTReceiveErrorTimer shall be started when the nBISTPayload bit past the last bit of the SOP* has been transmitted by the Physical Layer. The BISTReceiveErrorTimer shall be stopped when the last bit of the EOP corresponding to the BIST Message with a BIST Data Object of Returned BIST Counters has been received by the Physical Layer. The Protocol Layer receiving a Test Frame shall respond with a BIST Message with a BIST Data Object of Returned BIST Counters within tTransmit in order to ensure that the sender’s BISTReceiveErrorTimer does not expire. The tTransmit shall be measured from when the last bit of the Test Frame has been received by the Physical Layer until the first bit of the Preamble of the BIST Message has been transmitted by the Physical Layer.

Power Role Swap Timers
SwapRecoveryTimer
The SwapRecoveryTimer is used by a Provider/Consumer acting in Sink role during a Hard Reset. The Provider/Consumer shall wait tSwapRecover after either sending or receiving Hard Reset Signaling before turning on its Power Source.

SwapSourceStartTimer
The SwapSourceStartTimer shall be used by the new Source, after a Power Role Swap, to ensure that it does not send Source_Capabilities Messages before the new Sink is ready to receive the Source_Capabilities Message. The new Source shall not send the Source_Capabilities Message earlier than tSwapSourceStart after the last bit of the EOP of the GoodCRC Message sent in response to the PS_RDY Message sent by the new Source indicating that its power supply is ready. The Sink shall be ready to receive a Source_Capabilities Message tSwapSinkReady after having sent the last bit of the EOP of the GoodCRC Message sent in response to the PS_RDY Message sent by the new Source indicating that its power supply is ready.

Soft Reset Timers
tSoftReset
A failure to see a GoodCRC Message in response to any Message within tReceive (after nRetryCount retries), when a Port Pair is Connected, is indicative of a communications failure. This shall cause the Source or Sink to send a Soft_Reset Message, transmission of which shall be completed within tSoftReset of the CRCReceiveTimer expiring.

tProtErrSoftReset
If a Protocol Error occurs that causes the Source or Sink to send a Soft_Reset Message, the transmission of the Soft_Reset Message shall be completed within tProtErrSoftReset of the EOP of the GoodCRC sent in response to the Message that caused the Protocol Error.

Hard Reset Timers
HardResetComplete Timer
The HardResetCompleteTimer is used by the Protocol Layer in the case where it has asked the PHY Layer to send Hard Reset Signaling and the PHY Layer is unable to send the Signaling within a reasonable time due to a non-idle channel. If the PHY Layer does not indicate Hard Reset Signaling within this timer, it may be considered that the channel is not idle.
HardResetComplete Timer
If the Hard Reset Signaling has not been sent within tHardResetComplete of the Protocol Layer requesting transmission, the Protocol Layer shall inform the Policy Engine that the Hard Reset Signaling has been sent to ensure the power supply is reset in a timely fashion.

PSHardResetTimer
The PSHardResetTimer is used by the Policy Engine in a Source to ensure that the Sink has had sufficient time to process Hard Reset Signaling before turning off its power supply to VBUS. When a Hard Reset occurs, the Source stops driving VCONN, removes Rp from the VCONN pin, and starts transitioning the VBUS voltage to vSafe0V either:

tPSHardReset after the last bit of the Hard Reset Signaling has been received from the Sink, or
tPSHardReset after the last bit of the Hard Reset Signaling has been sent by the Source.
tDRSwapHardReset
If a DR_Swap Message is received during Modal Operation, a Hard Reset shall be initiated by the recipient of the unexpected DR_Swap Message; Hard Reset Signaling shall be generated within tDRSwapHardReset of the EOP of the GoodCRC sent in response to the DR_Swap Message.

tProtErrHardReset
If a Protocol Error occurs that directly leads to a Hard Reset, the transmission of the Hard Reset Signaling shall be completed within tProtErrHardReset of the EOP of the GoodCRC sent in response to the Message that caused the Protocol Error.

Structured VDM Timers
VDMResponseTimer
The VDMResponseTimer shall be used by the Initiator’s Policy Engine to ensure that a Structured VDM Command request needing a response (e.g., Discover Identity Command request) is responded to within a bounded time of tVDMSenderResponse. The VDMResponseTimer shall be applied to all Structured VDM Commands except the Enter Mode and Exit Mode Commands which have their own timers (VDMModeEntryTimer and VDMModeExitTimer respectively). Failure to receive the expected response is detected when the VDMResponseTimer expires. The VDMResponseTimer shall be started from the time the last bit of the GoodCRC Message EOP (i.e., the GoodCRC Message corresponding to the VDM Command requesting a response) has been received by the Physical Layer. The VDMResponseTimer shall be stopped when the last bit of the expected VDM Command response EOP has been received by the Physical Layer. The receiver of a Message requiring a response shall respond within tVDMReceiverResponse to ensure that the sender’s VDMResponseTimer does not expire. The tVDMReceiverResponse time shall be measured from the time the last bit of the Message EOP has been received by the Physical Layer until the first bit of the response Message Preamble has been transmitted by the Physical Layer.

VDMModeEntryTimer
The VDMModeEntryTimer shall be used by the Initiator’s Policy Engine to ensure that the response to a Structured VDM Enter Mode Command request (ACK or NAK with ACK indicating that the requested Mode has been entered) arrives within a bounded time of tVDMWaitModeEntry. Failure to receive the expected response is detected when the VDMModeEntryTimer expires. The Policy Engine’s response when the VDMModeEntryTimer expires is to inform the Device Policy Manager. The VDMModeEntryTimer shall be started from the time the last bit of the GoodCRC Message EOP (i.e., the GoodCRC Message corresponding to the VDM Command request) has been received by the Physical Layer. The VDMModeEntryTimer shall be stopped when the last bit of the expected Structured VDM Command response (ACK, NAK or BUSY) EOP has been received by the Physical Layer. The receiver of a Message requiring a response shall respond within tVDMEnterMode to ensure that the sender’s VDMModeEntryTimer does not expire. The tVDMEnterMode time shall be measured from the time the last bit of the Message EOP has been received by the Physical Layer until the first bit of the response Message Preamble has been transmitted by the Physical Layer.

VDMModeExitTimer
The VDMModeExitTimer shall be used by the Initiator’s Policy Engine to ensure that the ACK response to a Structured VDM Exit Mode Command, indicating that the requested Mode has been exited, arrives within a bounded time of tVDMWaitModeExit. Failure to receive the expected response is detected when the VDMModeExitTimer expires. The Policy Engine’s response when the VDMModeExitTimer expires is to inform the Device Policy Manager. The VDMModeExitTimer shall be started from the time the last bit of the GoodCRC Message EOP (i.e., the GoodCRC Message corresponding to the VDM Command requesting a response) has been received by the Physical Layer. The VDMModeExitTimer shall be stopped when the last bit of the expected Structured VDM Command response ACK EOP has been received by the Physical Layer. The receiver of a Message requiring a response shall respond within tVDMExitMode to ensure that the sender’s VDMModeExitTimer does not expire. The tVDMExitMode time shall be measured from the time the last bit of the Message EOP has been received by the Physical Layer until the first bit of the response Message Preamble has been transmitted by the Physical Layer.

tVDMBusy
The Initiator shall wait at least tVDMBusy after receiving a BUSY Command response before repeating the Structured VDM request again.

VCONN Timers
VCONNOnTimer
The VCONNOnTimer is used by the DFP or UFP during a VCONN Swap. The VCONNOnTimer shall be started when:

The last bit of the EOP of the Accept Message is received by the DFP.
The last bit of the EOP of the GoodCRC Message corresponding to the Accept Message is received by the UFP.
The VCONNOnTimer shall be stopped when:

The last bit of the EOP of the PS_RDY Message is received by the DFP or UFP.
The DFP or UFP, prior to sending the PS_RDY Message, shall have turned VCONN On.

tVCONNSourceOff
The tVCONNSourceOff time applies during a VCONN Swap. The initial VCONN Source shall cease sourcing VCONN within tVCONNSourceOff of receipt of the last bit of the EOP of the PS_RDY Message.

tCableMessage
The sender of an SOP’ or SOP’’ packet (either a DFP or Cable Plug), that is not a GoodCRC Message, shall wait tCableMessage after the last bit of the EOP of the GoodCRC transmitted in response to the previous SOP’ or SOP’’ Packet before sending another SOP’ or SOP’’ Packet. This ensures that there is sufficient idle time between packets for a UFP to generate an asynchronous Message. Retransmission shall occur as described in Section 6.5.1 with tCableMessage applying to the last transmitted SOP’ or SOP’’ Packet.

DiscoverIdentityTimer
The DiscoverIdentityTimer is used by a DFP during an Explicit Contract when discovering whether a Cable Plug is PD Capable using SOP’. When performing cable discovery during an Explicit Contract, the Discover Identity Command request shall be sent every tDiscoverIdentity. No more than nDiscoverIdentityCount Discover Identity Messages without a GoodCRC Message response shall be sent. If no GoodCRC Message response is received after nDiscoverIdentityCount Discover Identity Command requests have been sent, the DFP shall not send any further SOP’/SOP’’ Messages.

Attention Timers
Structured VDM Attention Commands
Structured VDM Attention Commands are limited to a rate of no more than nAttentionCount Attention Commands during any given tAttentionAverage period. In addition, Structured VDM Attention Commands have to be spaced at least tAttentionSpacing (min) apart, except for a single burst of no more than 2 Attention Commands during any given tAttentionAverage period that have to be spaced at least tAttentionBurstSpacing apart.

Time Values and Timers
Summary of Timers
Table 6-32 summarizes the values for the timers listed in this section. For each Timer Value, a given implementation shall pick a fixed value within the range specified.

Parameter	Value (min)	Value (max)	Units	Reference
tAttentionAverage	10		s	Section 6.5.16
tAttentionBurstSpacing		100	ms	Section 6.5.16
tAttentionSpacing	250		ms	Section 6.5.16
tBISTMode	300		ms	Section 6.5.8.1
tBISTContMode	30	60	ms	Section 6.5.8.4
tBISTReceive	1.0	1.2	ms	Section 6.5.8.5
tBISTResponse	15		ms	Section 6.5.8.2
tCableMessage	750		µs	Section 6.5.14
tDiscoverIdentity	40	50	ms	Section 6.5.15
tDRSwapHardReset	200		ms	Section 6.5.3
tHardResetComplete	200	300	ms	Section 6.5.4
tModeEntry	300	600	ms	Section 6.5.17
tModeExit	300	600	ms	Section 6.5.17
tPSHardReset	50	100	ms	Section 6.5.2
tProtErrHardReset	50	100	ms	Section 6.5.2
tVDMEnterMode	200	300	ms	Section 6.5.16
tVDMExitMode	200	300	ms	Section 6.5.16
tVDMReceiverResponse	100	200	ms	Section 6.5.16
tVDMSenderResponse	500		ms	Section 6.5.16
tVDMBusy	100	500	ms	Section 6.5.16
tVCONNOn	10	15	ms	Section 6.5.13
tVCONNSourceOff	15	30	ms	Section 6.5.13
Discover Identity Counter (6.6.6)
When sending Discover Identity Messages to a Cable Plug, the DFP Shall maintain a count of Messages sent (DiscoverIdentityCounter). No more than nDiscoverIdentityCount Discover Identity Messages Shall be sent by the DFP receiving a GoodCRC Message response. A Data Role Swap Shall reset the DiscoverIdentityCounter to zero.

VDMBusyCounter (6.6.7)
When sending Responder Busy responses to a Structured Vendor Defined Message, a UFP or Cable Plug Shall maintain a count of Messages sent (VDMBusyCounter). No more than nBusyCount Responder Busy responses Shall be sent. The VDMBusyCounter Shall be reset on sending a non-Busy response. Products wishing to meet [USB Type-C 1.2] requirements for Mode entry Should use an nBusyCount of 1.

nAttentionCount (6.6.8)
Structured VDM Attention Commands are limited to a rate of no more than nAttentionCount Attention Commands during any given tAttentionAverage period (see Section 6.4.4.3.6).

Counter Values and Counters (6.6.9)
Table 6-34: Counter parameters

Parameter	Value	Reference
nAttentionCount	10	Section 6.6.8
nBusyCount	5	Section 6.6.7
nCapsCount	50	Section 6.6.4
nDiscoverIdentityCount	20	Section 6.6.6
nHardResetCount	2	Section 6.6.3
nMessageIDCount	7	Section 6.6.1
nRetryCount	3	Section 6.6.2
Table 6-35: Counters

Counter	Max Reference
BISTErrorCounter	FFFFh
CapsCounter	nCapsCount
DiscoverIdentityCounter	nDiscoverIdentityCount
HardResetCounter	nHardResetCount
MessageIDCounter	nMessageIDCount
RetryCounter	nRetryCount
VDMBusyCounter	nBusyCount
Reset (6.7)
Resets are a necessary response to protocol or other error conditions. USB Power Delivery defines two different types of reset: a Soft Reset, which resets protocol, and a Hard Reset which resets both the power supplies and protocol.

Soft Reset and Protocol Error (6.7.1)
A Soft_Reset Message is used to cause a Soft Reset of protocol communication when this has broken down in some way. It Shall Not have any impact on power supply operation but is used to correct a Protocol Error occurring during an Atomic Message Sequence (AMS). The Soft Reset May be triggered by either Port Partner in response to the Protocol Error. Protocol Errors are any unexpected Message during an AMS. If the first Message in an AMS has been passed to the Protocol Layer by the Policy Engine but has not yet been sent (GoodCRC Message not received) when the Protocol Error occurs, the Policy Engine Shall Not issue a Soft Reset but Shall return to the PE_SNK_Ready or PE_SRC_Ready state and then process the incoming Message. If the Protocol Error occurs during an Interruptible AMS, then the Policy Engine Shall Not issue a Soft Reset but Shall return to the PE_SNK_Ready or PE_SRC_Ready state and then process the incoming Message. If the incoming Message is an Unexpected Message received in the PE_SNK_Ready or PE_SRC_Ready states, the Policy Engine Shall issue a Soft Reset. If the Protocol Error occurs during a Non-interruptible AMS, this Shall lead to a Soft Reset in order to re-synchronize the Policy Engine state machines, except when the voltage is transitioning, in which case a Protocol Error Shall lead to a Hard Reset (see Section 8.3.3.2). Details of Interruptible and Non-interruptible AMS’s can be found in Section 8.3.2.2.1. An unrecognized or unsupported Message (except for a Structured VDM), received in the PE_SNK_Ready or PE_SRC_Ready states, Shall Not cause a Soft_Reset Message to be generated but instead a Reject Message Shall be generated.

Table 6-36: Response to an Incoming Message

Recipient's Power Role	Recipient's State	Incoming Message	Recognized	Unrecognized
Source	PE_SRC_Ready	Process Message	Soft_Reset Message	Reject (except for VDM)
Source	During Interruptible AMS	Process Message	return to PE_SRC_Ready state and process Message	During Non-interruptible AMS (not power transitioned) Process Message Soft_Reset Message
Sink	PE_SNK_Ready	Process Message	Soft_Reset Message	Reject (except for VDM)
Sink	During Interruptible AMS	Process Message	return to PE_SNK_Ready state and process Message	During Non-interruptible AMS (not power transitioned) Process Message Soft_Reset Message
Hard Reset (6.7.2)
Hard Reset Common Requirements (6.7.2.1)
Hard Resets are signaled by an ordered set as defined in Section 5.6.4. Both the sender and recipient Shall cause their power supplies to return to their default states (see Section 7.3.12 to Section 7.3.14.4 for details of voltage transitions). In addition, their respective Protocol Layers Shall be reset as for the Soft Reset. This allows the Attached devices to be in a state where they can re-establish USB PD communication. Hard Reset is retried up to nHardResetCount times (see also Section 6.5.7 and Section 6.6.3). Note that even though VBUS drops to vSafe0V during a Hard Reset, a Sink will not see this as a disconnect since this is expected behavior.

Type-A/B and Hard Reset (6.7.2.2)
When there has been a USB Type-A/B Power Role Swap, a Hard Reset Shall cause the Port Partners to return to their default Source/Sink roles. A USB Type-A Port Shall return to Source operation. A USB Type-B Port Shall return to Sink operation.

Type-C and Hard Reset (6.7.2.3)
A Hard Reset Shall Not cause any change to either the Rp/Rd resistor being asserted. If there has been a Data Role Swap, the Hard Reset Shall cause the Port Data Role to be changed back to DFP for a Port with the Rp resistor asserted and UFP for a Port with the Rd resistor asserted. When VCONN is supported (see [USB Type-C 1.2]), the Hard Reset Shall cause the Port with the Rp resistor asserted to supply VCONN and the Port with the Rd resistor asserted to turn off VCONN. In effect, the Hard Reset will revert the Ports to their default state based on their CC line resistors. Removing and reapplying VCONN from the Cable Plugs also ensures that they re-establish their configuration as either SOP’ or SOP’’ based on the location of VCONN (see [USB Type-C 1.2]). If the Hard Reset is insufficient to clear the error condition, then the Port Should use error recovery mechanisms as defined in [USB Type-C 1.2].

Cable Plugs and Hard Reset (6.7.2.4)
Cable Plugs Shall Not generate Hard Reset Signaling but Shall monitor for Hard Reset Signaling between the Port Partners and Shall reset when this is detected (see Section 8.3.3.10.8). The Cable Plugs Shall perform the equivalent of a power cycle returning to their initial power-up state. This allows the Attached products to be in a state where they can re-establish USB PD communication.

Modal Operation and Hard Reset (6.7.2.5)
A Hard Reset Shall cause all Active Modes to be exited by both Port Partners and any Cable Plugs (see Section 6.4.4.3.4).

Cable Reset (6.7.3)
Cable Resets are signaled by an ordered set as defined in Section 5.6.5. Both the sender and recipient of Cable Reset Signaling Shall reset their respective Protocol Layers. The Cable Plugs Shall perform the equivalent of a power cycle returning to their initial power-up state. This allows the Attached products to be in a state where they can re-establish USB PD communication. The DFP has to be supplying VCONN prior to a Cable Reset to ensure that the Cable Plugs correctly configure SOP’ and SOP’’ after the Cable Reset is complete. If VCONN has been turned off, the DFP Shall turn on VCONN prior to generating Cable Reset Signaling. If there has been a VCONN Swap and the UFP is currently supplying VCONN, the DFP Shall perform a VCONN Swap such that it is supplying VCONN prior to generating Cable Reset Signaling. Only a DFP Shall generate Cable Reset Signaling. A DFP Shall only generate Cable Reset Signaling within an Explicit Contract. A Cable Reset Shall cause all Active Modes in the Cable Plugs to be exited (see Section 6.4.4.3.4).

Message Discarding (6.8)
On receiving a received Message on SOP, the Protocol Layer Shall Discard any pending SOP* Messages. A received Message on SOP’/SOP’’ Shall Not cause any pending SOP* Messages to be Discarded. It is assumed that Messages using SOP’/SOP’’ constitute a simple request/response AMS, with the Cable Plug providing the response so there is no reason for a pending SOP* Message to be Discarded. There can only be one AMS between the Port Partners and these also take priority over Cable Plug communications so a Message received on SOP will always cause a Message pending on SOP* to be Discarded.

Table 6-37: Message Discarding

Message pending transmission	Message received	Discard pending transmission?
SOP	SOP	Yes
SOP	SOP’/SOP’’	No
SOP’	SOP	Yes
SOP’	SOP’	No
SOP’	SOP’’	No
SOP’’	SOP	Yes
SOP’’	SOP’	No
SOP’’	SOP’’	No
Introduction to State Diagrams (6.9.1)
The state diagrams defined in Section 6.9 are Normative and Shall define the operation of the Power Delivery protocol layer. Note that these state diagrams are not intended to replace a well-written and robust design. Figure 6-19 shows an outline of the states defined in the following sections. At the top, there is the name of the state. This is followed by “Actions on entry” a list of actions carried out on entering the state and in some states “Actions on exit” a list of actions carried out on exiting the state.

State Operation (6.9.2)
The following section details Protocol Layer State Operation when sending and receiving SOP* Packets. For each SOP* Communication being sent and received, there Shall be separate Protocol Layer Transmission and Protocol Layer Reception and BIST State Machine instances, with their own counter and timer instances. Soft Reset Shall only apply to the State Machine instances it is targeted at based on the type of SOP* Packet used to send the Soft_Reset Message. The Hard Reset State Machine (including Cable Reset) Shall apply simultaneously to all Protocol Layer State Machine instances active in the DFP, UFP, and Cable Plug (if present).

Protocol Layer Message Transmission (6.9.2.1)
Figure 6-21 shows the state behavior for the Protocol Layer when transmitting a Message.
PRL_Tx_PHY_Layer_Reset State
On Entry:
Reset the PHY Layer (clear any outstanding Messages and enable communications).
Transitions:
Transition to PRL_Tx_Wait_for_Message_Request state when the PHY Layer reset is complete.
PRL_Tx_Wait_for_Message_Request State
On Entry:
Reset the RetryCounter.
Transitions:
Transition to PRL_Tx_Construct_Message state when a Message request (not a Soft_Reset Message) is received from the Policy Engine.
Transition to PRL_Tx_Layer_Reset_for_Transmit state when a Soft_Reset Message request is received from the Policy Engine.
PRL_Tx_Layer_Reset_for_Transmit State
On Entry:
Reset the MessageIDCounter.
Transitions:
Transition to PRL_Rx_Wait_for_PHY_Message state to reset the stored MessageID.
Transition to PRL_Tx_Construct_Message state when the layer reset actions are completed.
PRL_Tx_Construct_Message State
On Entry:
Construct the Message requested by the Policy Engine or resend a previously constructed Message.
Transitions:
Transition to PRL_Tx_Wait_for_PHY_Response state when the Message has been sent to the PHY Layer.
PRL_Tx_Wait_for_PHY_Response State
On Entry:
Initialize and run the CRCReceiveTimer.
Transitions:
Transition to PRL_Tx_Match_MessageID state when a GoodCRC Message response is received from the PHY Layer.
Transition to PRL_Tx_Check_RetryCounter state when:
The CRCReceiveTimer times out.
The PHY Layer indicates that a Message has been Discarded due to the channel being busy but is now idle.
PRL_Tx_Match_MessageID State
On Entry:
Compare the MessageIDCounter and the MessageID of the received GoodCRC Message.
Transitions:
Transition to PRL_Tx_Message_Sent state when the MessageIDCounter and the MessageID of the received GoodCRC Message match.
Transition to PRL_Tx_Check_RetryCounter state when they do not match.
PRL_Tx_Message_Sent State
On Entry:
Increment the MessageIDCounter and inform the Policy Engine that the Message has been sent.
Transitions:
Transition to PRL_Tx_Wait_for_Message_Request state when the Policy Engine has been informed.
PRL_Tx_Check_RetryCounter State
On Entry:
Increment the value of the RetryCounter and check it to determine whether to retry sending the Message.
Transitions:
Transition to PRL_Tx_Construct_Message state to retry sending the Message when RetryCounter ≤ nRetryCount and this is not a Cable Plug.
Transition to PRL_Tx_Transmission_Error state when RetryCounter > nRetryCount or this is a Cable Plug.
PRL_Tx_Transmission_Error State
On Entry:
Increment the MessageIDCounter and inform the Policy Engine of the transmission error.
Transitions:
Transition to PRL_Tx_Wait_for_Message_Request state when the Policy Engine has been informed.
PRL_Tx_Discard_Message State
On Entry:
If there is a Message queued awaiting transmission, discard it according to the rules in Section 6.8 and increment the MessageIDCounter.
Transitions:
Transition to PRL_Tx_PHY_Layer_Reset state when discarding is complete and the Message queue is empty.
PRL_Rx_Wait_for_PHY_Message State
On Entry:
Wait until the PHY Layer passes up a received Message.
Transitions:
Transition to PRL_Rx_Send_GoodCRC state when a Message is passed up from the PHY Layer.
Transition to PRL_Rx_Layer_Reset_for_Receive state when a Soft_Reset Message is received from the PHY Layer.
PRL_Rx_Layer_Reset_for_Receive State
On Entry:
Reset the MessageIDCounter and clear the stored MessageID.
Transitions:
Transition to PRL_Tx_Wait_for_Message_Request state.
Transition to PRL_Rx_Send_GoodCRC state when the Soft Reset actions are completed.
PRL_Rx_Send_GoodCRC State
On Entry:
Construct a GoodCRC Message and request the PHY Layer to transmit it.
Transitions:
Transition to PRL_Rx_Check_MessageID state when the GoodCRC Message has been passed to the PHY Layer.
If the PHY Layer indicates that a Message has been Discarded due to V BUS or CC being busy but is now idle, transition to either PRL_Rx_Check_MessageID or PRL_Rx_Wait_for_PHY_Message state.
PRL_Rx_Check_MessageID State
On Entry:
Compare the MessageID of the received Message with its stored value if a value has been previously stored.
Transitions:
Transition to PRL_Rx_Wait_for_PHY_Message state when the MessageID of the received Message equals the stored MessageID value.
Transition to PRL_Rx_Store_MessageID state when the MessageID of the received Message does not equal the stored MessageID value or if this is the first received Message.
PRL_Rx_Store_MessageID State
On Entry:
Transition Protocol Layer Message transmission to PRL_Tx_Discard_Message state (except for Ping Messages), replace the stored value of MessageID with the received MessageID, and pass the Message up to the Policy Engine.
Transitions:
Transition to PRL_Rx_Wait_for_PHY_Message state when the Message has been passed up to the Policy Engine.
PRL_HR_Reset_Layer State
On Entry:
Reset the MessageIDCounter.
Reset the states of the Protocol Layer transmission and reception state machines to their starting points.
Transitions:
Transition to PRL_HR_Request_Hard_Reset state when the Protocol Layer’s reset is complete and the Hard Reset request originated from the Policy Engine or a Cable Reset request from the Policy Engine.
Transition to PRL_HR_Indicate_Hard_Reset state when the Protocol Layer’s reset is complete and the Hard Reset request or Cable Reset request has been passed up from the Physical Layer.
PRL_HR_Indicate_Hard_Reset State
On Entry:
Indicate to the Policy Engine that Hard Reset Signaling or Cable Reset Signaling has been received.
Transitions:
Transition to PRL_HR_Wait_for_PE_Hard_Reset_Complete state when the Indication to the Policy Engine has been sent.
PRL_HR_Request_Hard_Reset State
On Entry:
Request PHY to perform a Hard Reset or Cable Reset.
Transitions:
Transition to PRL_HR_Wait_for_PE_Hard_Reset_Complete state.
PRL_HR_Wait_for_PE_Hard_Reset_Complete State
On Entry:
Wait for Hard Reset or Cable Reset complete indication from the Policy Engine.
Transitions:
Transition to PRL_HR_PE_Hard_Reset_Complete state when the Policy Engine indicates completion.
PRL_HR_PE_Hard_Reset_Complete State
On Entry:
Inform the Physical Layer that the Hard Reset or Cable Reset is complete.
Transitions:
Transition to PRL_HR_Wait_for_PHY_Hard_Reset_Complete state.
PRL_HR_Wait_for_PHY_Hard_Reset_Complete State
On Entry:
Start HardResetCompleteTimer and wait for Hard Reset or Cable Reset complete indication from the PHY.
Transitions:
Transition to PRL_HR_Indicate_Hard_Reset state when the Hard Reset or Cable Reset is complete or HardResetCompleteTimer times out.
6.9.2.3.3 PRL_HR_Request_Hard_Reset
The Protocol Layer Shall request the Physical Layer to send either Hard Reset Signaling or Cable Reset signaling. The Protocol Layer Shall transition to the PRL_HR_Wait_for_PHY_Hard_Reset_Complete state when:

The Physical Layer Hard Reset Signaling request has been sent or
The Physical Layer Cable Reset Signaling request has been sent.
6.9.2.3.4 PRL_HR_Wait_for_PHY_Hard_Reset_Complete
In the PRL_HR_PHY_Hard_Reset_Requested state, the Protocol Layer Shall start the HardResetCompleteTimer and wait for the PHY Layer to indicate that the Hard Reset or Cable Reset has been completed. The Protocol Layer Shall transition to the PRL_HR_PE_Hard_Reset_Complete state when:

A Hard Reset complete indication is received from the PHY Layer or
A Cable Reset complete indication is received from the PHY Layer or
The HardResetCompleteTimer times out.
6.9.2.3.5 PRL_HR_PHY_Hard_Reset_Requested
On entry to the PRL_HR_PHY_Hard_Reset_Requested state, the Protocol Layer Shall inform the Policy Engine that the PHY Layer has been requested to perform a Hard Reset or Cable Reset. The Protocol Layer Shall transition to the PRL_HR_Wait_for_PE_Hard_Reset_Complete state when:

The Indication to the Policy Engine has been sent.
6.9.2.3.6 PRL_HR_Wait_for_PE_Hard_Reset_Complete
In the PRL_HR_Wait_for_PE_Hard_Reset_Complete state, the Protocol Layer Shall wait for the Policy Engine to indicate that the Hard Reset or Cable Reset has been completed. The Protocol Layer Shall transition to the PRL_HR_PE_Hard_Reset_Complete state when:

A Hard Reset complete indication is received from the Policy Engine or
A Cable Reset complete indication is received from the Policy Engine.
6.9.2.3.7 PRL_HR_PE_Hard_Reset_Complete
On entry to the PRL_HR_PE_Hard_Reset_Complete state, the Protocol Layer Shall inform the Physical Layer that the Hard Reset or Cable Reset is complete. The Protocol Layer Shall exit from the Hard Reset and return to normal operation when:

The Physical Layer has been informed that the Hard Reset is complete so that it will re-enable the communications channel. If Hard Reset Signaling is still pending due to a non-idle channel, this Shall be cleared and not sent or
The Physical Layer has been informed that the Cable Reset is complete.
6.9.3 BIST Operation
6.9.3.1 BIST Transmitter Test
Figure 6-24 shows the state behavior for the Protocol Layer when in BIST Transmitter Test mode and transmitting BIST Transmitter Test Frames. The Protocol Layer changes from normal operation for Protocol Message Layer Transmission (see Section 6.9.2.1) to BIST Transmitter Test Mode when directed by the Policy Engine.

6.9.3.1.1 PRL_BIST_Tx_Init_PRBS
The Protocol Layer Shall enter the PRL_BIST_Tx_Init_PRBS state from the PRL_Tx_Wait_for_Message_Request state (see Section 6.9.2.1.1) when:

The Policy Engine requests the Protocol Layer to enter BIST Transmitter Test Mode.
On entry to the PRL_BIST_Tx_Init_PRBS state, the Protocol Layer Shall request the Physical Layer to reset the BISTErrorCounter and preload the PRBS (see Section 5.9.1). The Protocol Layer Shall transition to the PRL_BIST_Tx_Wait_Test_Frame_Request state when:

The PRBS generator has been preloaded.
6.9.3.1.2 PRL_BIST_Tx_Wait_Test_Frame_Request
On entry to the PRL_BIST_Tx_Wait_Test_Frame_Request state, the Protocol Layer Shall wait for a Test Frame from the Policy Engine. The Protocol Layer Shall transition to the PRL_BIST_Tx_Test_Frame state when:

When a request to transmit a Test Frame is received from the Policy Engine.
6.9.3.1.3 PRL_BIST_Tx_Test_Frame
On entry to the PRL_BIST_Tx_Test_Frame state, the Protocol Layer Shall request the Physical Layer to construct the Test Frame. The Protocol Layer Shall transition to the PRL_BIST_Tx_PHY_Response state when:

The Test Frame request has been sent to the Physical Layer.
6.9.3.1.4 PRL_BIST_Tx_PHY_Response
In the PRL_BIST_Tx_PHY_Response state, the Protocol Layer Shall wait for the Physical Layer to provide a response to the Test Frame. On entry to the PRL_BIST_Tx_PHY_Response state, the Protocol Layer Shall initialize and run the BISTReceiveErrorTimer. On exit from the PRL_BIST_Tx_PHY_Response state, the Protocol Layer Shall inform the Policy Engine either of the received Error Counter value or of a BISTReceiveErrorTimer timeout. The Protocol Layer Shall transition to the PRL_BIST_Tx_Wait_Test_Frame_Request state (see Section 6.9.3.1.2) when:

An error counter response is received from the Physical Layer or
The BISTReceiveErrorTimer times out.
6.9.3.2 BIST Receiver Test
Figure 6-25 shows the state behavior for the Protocol Layer when in BIST Receiver Test mode and receiving BIST Receiver Test Frames. The Protocol Layer changes from normal operation for Protocol Layer Message Reception (see Section 6.9.2.2) to BIST Receiver Test Mode when directed by the Policy Engine. Exit from this mode of operation is via Hard Reset (see Section 6.9.2.3).

6.9.3.2.1 PRL_BIST_Rx_Reset_Counter
The Protocol Layer Shall enter the PRL_BIST_Rx_Reset_Counter state from the PRL_Rx_Wait_for_PHY_Message state when:

A BIST Receiver Test Mode request is received from the Policy Engine.
On entry to the PRL_BIST_Rx_Reset_Counter state, the Protocol Layer Shall request the Physical Layer to reset the BISTErrorCounter and preload the PRBS (see Section 5.9.1). The Protocol Layer Shall transition to the PRL_BIST_Rx_Test_Frame state when:

The BISTErrorCounter has been reset by the Physical Layer.
6.9.3.2.2 PRL_BIST_Rx_Test_Frame
In the PRL_BIST_Rx_Test_Frame State, the Protocol Layer Shall wait for the Physical Layer to receive the next Test Frame. The Protocol Layer Shall transition to the PRL_BIST_Rx_Error_Count state when:

The current value of the BISTErrorCounter is received from the PHY Layer.
6.9.3.2.3 PRL_BIST_Rx_Error_Count
On entry to the PRL_BIST_Rx_Error_Count state, the Protocol Layer Shall construct a BIST Message with a BIST Data Object of Returned BIST Counters using the BISTErrorCounter value returned by the Physical Layer. This BIST Message Shall be passed to the Physical Layer for transmission. The Protocol Layer Shall transition to the PRL_BIST_Rx_Inform_Policy state when:

The BIST Message has been sent.
6.9.3.2.4 PRL_BIST_Rx_Inform_Policy
On entry to the PRL_BIST_Rx_Inform_Policy state, the Protocol Layer Shall inform the Policy Engine that the BIST Message containing the BISTErrorCounter has been sent. The Protocol Layer Shall transition to the PRL_BIST_Rx_Test_Frame state when:

The Policy Engine has been informed that the BIST Message containing the BISTErrorCounter has been sent.
6.10 Message Applicability
6.10.1 Applicability of Control Messages
Table 6-39 details Control Messages that Shall/Should/Shall Not be transmitted and received by a Source, Sink, or Cable Plug. Requirements for Dual-Role Power Ports and Dual-Role Data Ports Shall override any requirements for Source-only or Sink-Only Ports.

6.10.2 Applicability of Data Messages
Table 6-40 details Data Messages (except for VDM Commands) that Shall/Should/Shall Not be transmitted and received by a Source, Sink, or Cable Plug. Requirements for Dual-Role Power Ports Shall override any requirements for Source-only or Sink-Only Ports.

6.10.3 Applicability of Structured VDM Commands
Table 6-41 details Structured VDM Commands that Shall/Should/Shall Not be transmitted and received by a DFP, UFP, or Cable Plug. If Structured VDMs are not supported, a Structured VDM Command received by a DFP or UFP Shall be Ignored.

6.10.4 Applicability of Reset Signaling
Table 6-42 details Reset Signaling that Shall/Should/Shall Not be transmitted and received.
NEGATIVE: received by a DFP/UFP or Cable Plug

Table 6-42 Applicability of Reset Signaling

Signaling Type DFP UFP Cable Plug

Transmitted Message/Signaling

Soft_Reset: N N NA
Hard Reset: N N NA
Cable Reset: CN1 NA NA
Received Message/Signaling

Soft_Reset: N N N
Hard Reset: N N N
Cable Reset: DR DR N
Note 1: Shall be supported when transmission of SOP’ Packets are supported.

7. Power Supply

7.1 Source Requirements

Behavioral Aspects

7.1.1 The Source in a Provider or Provider/Consumer exhibits the following behaviors:

Shall be backward compatible with legacy V BUS ports.
Shall supply the default [USB 2.0], [USB 3.1], [USB Type-C 1.2] or [USB BC 1.2] voltage and current to V BUS when the USB cable is Attached (USB Default Operation).
Shall supply the default [USB 2.0], [USB 3.1], [USB Type-C 1.2] or [USB BC 1.2] voltage and current to V BUS when a Contract does not exist (USB Default Operation).
Shall return vSafe0V for some time then return to vSafe5V when Hard Reset Signaling is received.
Shall control V BUS voltage transitions as bound by undershoot, overshoot, and transition time requirements.
7.1.2 Source Bulk Capacitance:

The Source Shall have a bulk capacitance located between the output of the power supply and the transceiver isolation impedance as shown in Figure 7-1.
The Source bulk capacitance Shall Not be placed between the transceiver isolation impedance and the USB receptacle.
The Source bulk capacitance consists of C1 and C2 as shown in Figure 7-1.
The Ohmic Interconnect might consist of PCB traces for power distribution or power switching devices.
The capacitance might be a single capacitor, a capacitor bank or distributed capacitance.
If the power supply is shared across multiple ports, the bulk capacitance is defined as cSrcBulkShared.
If the power supply is dedicated to a single Port, the minimum bulk capacitance is defined as cSrcBulk.
The Source bulk capacitance is allowed to change for a newly negotiated power level. The capacitance change Shall occur before the Source is ready to operate at the new power level.
During a Power Role Swap, the Default Source Shall transition to Swap Standby before operating as the new Sink.
Any change in bulk capacitance required to complete the Power Role Swap Shall occur during Swap Standby.
7.1.3 Types of Sources:

Consistent with the Power Data Objects discussed in Section 6.4.1, the three possible power supply types that are available as Sources in a USB Power Delivery System are:
The Fixed Supply PDO exposes well-regulated fixed voltage power supplies. Sources Shall support at least one Fixed Supply capable of supplying vSafe5V. The output voltage of a Fixed Supply Shall remain within the range defined by the relative tolerance vSrcNew and the absolute band vSrcValid as listed in Table 7-22 and described in Section 7.1.9.
The Variable Supply (non-Battery) PDO exposes very poorly regulated Sources. The output voltage of a Variable Supply (non-Battery) Shall remain within the absolute maximum output voltage and the absolute minimum output voltage exposed in the Variable Supply PDO.
The Battery Supply PDO exposes Batteries that can be connected directly as a Source to V BUS. The output voltage of a Battery Supply Shall remain within the absolute maximum output voltage and the absolute minimum output exposed in the Battery Supply PDO.
7.1.4 Positive Voltage Transitions:

The Source Shall transition V BUS from the starting voltage to the higher new voltage in a controlled manner. The negotiated new voltage (e.g., 12V or 20V) defines the nominal value for vSrcNew.
During the positive transition the Source Shall be able to supply the Sink standby power and the transient current to charge the total bulk capacitance on V BUS.
The slew rate of the positive transition Shall Not exceed vSrcSlewPos.
The transitioning Source output voltage Shall settle within vSrcNew by tSrcSettle.
The Source Shall be able to supply the negotiated power level at the new voltage by tSrcReady.
The positive voltage transition Shall remain monotonic while the transitioning voltage is below vSrcValid min and Shall remain within the vSrcValid range upon crossing vSrcValid min as shown in Figure 7-2.
The starting time, t0, in Figure 7-2 starts tSrcTransition after the last bit of the EOP of the GoodCRC Message has been received by the Source.
7.1.5 Negative Voltage Transitions:

Negative voltage transitions are defined as shown in Figure 7-3 and are specified in a similar manner to positive voltage transitions.
Figure 7-3 does not apply to vSafe0V transitions.
The slew rate of the negative transition Shall Not exceed vSrcSlewNeg.
The negative voltage transition Shall remain monotonic while the transitioning voltage is above vSrcValid max and Shall remain within the vSrcValid range upon crossing vSrcValid max as shown in Figure 7-3.
The starting time, t0, in Figure 7-3 starts tSrcTransition after the last bit of the EOP of the GoodCRC Message has been received by the Source.
7.1.6 Response to Hard Resets:

Hard Reset Signaling indicates a communication failure has occurred and the Source Shall stop driving V CONN, Shall remove Rp from the V CONN pin and Shall drive V BUS to vSafe0V as shown in Figure 7-4.
The USB connection May reset during a Hard Reset since the V BUS voltage will be less than vSafe5V for an extended period of time.
After establishing the vSafe0V voltage condition on V BUS, the Source Shall wait tSrcRecover before re-applying V CONN and restoring V BUS to vSafe5V.
A Source Shall conform to the V CONN timing as specified in [USB Type-C 1.2].
Device operation during and after a Hard Reset is defined as follows:
Self-powered devices Should Not disconnect from USB during a Hard Reset (see Section 9.1.2).
Self-powered devices operating at more than vSafe5V May Not maintain full functionality after a Hard Reset.
Bus powered devices will disconnect from USB during a Hard Reset due to the loss of their power source.
When a Hard Reset occurs the Source Shall stop driving V CONN, Shall remove Rp from the V CONN pin and Shall start to transition the V BUS voltage to vSafe0V either:
tPSHardReset after the last bit of the Hard Reset Signaling has been received from the Sink or
tPSHardReset after the last bit of the Hard Reset Signaling has been sent by the Source.
The Source Shall meet both tSafe5V and tSafe0V relative to the start of the voltage transition as shown in Figure 7-4.
Figure 7-4 Source VBUS Response to Hard Reset Old voltage 0VvSafe0V(max) vSrcNeg(max)t0 tSafe5V tSafe0V tSrcTurnOnvSafe5V(max), VCONN(max)≈≈ vVconnDischarge tVconnDischarge tVconnOn tSrcRecover VCONN will meet tVConnDischarge relative to the start of the voltage transition as shown in Figure 7-4 due to the discharge circuitry in the Cable Plug. VCONN Shall meet tVconnOn relative to V BUS reaching vSafe5V. Note tVconnOn and tVConnDischarge are defined in [USB Type-C 1.2].
7.1.7 Changing the Output Power Capability:

Some USB Power Delivery negotiations will require the Source to adjust its output power capability without changing the output voltage. In this case the Source Shall be able to supply a higher or lower load current within tSrcReady.
7.1.8 Robust Source Operation:

7.1.8.1 Output Over Current Protection:

Sources Shall implement output over current protection to prevent damage from output current that exceeds the current handling capability of the Source.
The definition of current handling capability is left to the discretion of the Source implementation and Shall take into consideration the current handling capability of the connector contacts.
The response to over current Shall Not interfere with the negotiated V BUS current level.
Sources Should attempt to send a Hard Reset message when over current protection.
The over current protection response May engage at either the port or system level.
Systems or ports that have engaged over current protection Should attempt to resume default operation after determining that the cause of over current is no longer present and May latch off to protect the port or system.
The definition of how to detect if the cause of over current is still present is left to the discretion of the Source implementation.
The Source Shall renegotiate with the Sink (or Sinks) after choosing to resume default operation.
The decision of how to renegotiate after an over current event is left to the discretion of the Source implementation.
The Source Shall prevent continual system or port cycling if over current protection continues to engage after initially resuming either default operation or renegotiation.
Latching off the port or system is an acceptable response to recurring over current.
During the over current response and subsequent system or port shutdown, all affected Source ports operating with VBUS greater than vSafe5V Shall discharge V BUS to vSafe5V by the time tSafe5V and vSafe0V by the time tSafe0V.
7.1.8.2 Over Temperature Protection:

Sources Shall implement over temperature protection to prevent damage from temperature that exceeds the thermal capability of the Source.
The definition of thermal capability and the monitoring locations used to trigger the over temperature protection are left to the discretion of the Source implementation.
Sources Should attempt to send a Hard Reset message when over temperature protection.
The over temperature protection response May engage at either the port or system level.
Systems or ports that have engaged over temperature protection Should attempt to resume default operation and May latch off to protect the port or system.
The Source Shall renegotiate with the Sink (or Sinks) after choosing to resume default operation.
The decision of how to renegotiate after an over temperature event is left to the discretion of the Source implementation.
The Source Shall prevent continual system or port cycling if over temperature protection continues to engage after initially resuming either default operation or renegotiation.
Latching off the port or system is an acceptable response to recurring over temperature.
During the over temperature response and subsequent system or port shutdown, all affected Source ports operating with V BUS greater than vSafe5V Shall discharge V BUS to vSafe5V by the time tSafe5V and vSafe0V by the time tSafe0V.
7.1.8.3 vSafe5V Externally Applied to Ports Supplying vSafe5V:

Safe operation mandates that Power Delivery Sources Shall be tolerant of vSafe5V being present on V BUS when simultaneously applying power to V BUS.
Normal USB PD communication Shall be supported when this vSafe5V to vSafe5V connection exists.
7.1.8.4 Detach:

A USB Detach is detected electrically using CC detection on the USB Type-C connector.
When the Source is Detached the Source Shall transition to vSafe0V by tSafe0V relative to when the Detach event occurred.
During the transition to vSafe0V the V BUS voltage Shall be below vSafe5V max by tSafe0V relative to when the Detach event occurred and Shall Not exceed vSafe5V max after this time.
7.1.9 Output Voltage Tolerance and Range:

After a voltage transition is complete (i.e., after tSrcReady) and during static load conditions the Source output voltage Shall remain within the vSrcNew or vSafe5V limits as applicable.
The ranges defined by vSrcNew and vSafe5V account for DC regulation accuracy, line regulation, load regulation and output ripple.
After a voltage transition is complete (i.e., after tSrcReady) and during transient load conditions the Source output voltage Shall Not go beyond the range specified by vSrcValid.
The amount of time the Source output voltage can be in the band between either vSrcNew or vSafe5V and vSrcValid Shall Not exceed tSrcTransient.
Refer to Table 7-22 for the output voltage tolerance specifications.
Figure 7-5 illustrates the application of vSrcNew and vSrcValid after the voltage transition is complete.
7.1.10 Charging and Discharging the Bulk Capacitance on V BUS:

The Source Shall charge and discharge the bulk capacitance on VBUS whenever the Source voltage is negotiated to a different value.
The charging or discharging occurs during the voltage transition and Shall Not interfere with the Source’s ability to meet tSrcReady.
7.1.11 Swap Standby for Sources:

Sources and Sinks of a Dual-Role Power Port Shall support Swap Standby.
Swap Standby occurs for the Source after the Source power supply has discharged the bulk capacitance on VBUS to vSafe0V as part of the Power Role Swap transition.
While in Swap Standby:
The Source Shall Not drive VBUS that is therefore expected to remain at vSafe0V.
7.1.12 Source Peak Current Operation:

A Source with Fixed Supply PDO Peak Current bits set to 01b, 10b, and 11b shall be designed to support one of the overload capabilities defined in Table 6-7.
Overload conditions are bound in magnitude, duration, and duty cycle as listed in Table 6-7.
Sources are not required to support continuous overload operation.
When overload conditions occur, the Source is allowed to use the range of vSrcPeak (instead of vSrcNew) relative to the nominal value.
When the overload capability is exceeded, the Source is expected to take actions to prevent electrical or thermal damage.
The Source may send a new Source_Capabilities Message with the Fixed Supply PDO Peak Current bits set to 00b to prohibit overload operation even if an overload capability was previously negotiated with the Sink.
7.1.13 BFSK over V BUS Considerations for Sources:

7.1.13.1 Transceiver Isolation Impedance:

For BFSK signaling over VBUS, an isolation impedance as specified in Section 5.8.2.2 is used to isolate the transceiver from the capacitive loading of the Source.
The DC component of the isolation impedance introduces additional voltage loss between the Source power path and the connector.
The Source output impedance, the total VBUS bulk capacitance, the transceiver isolation impedance(s), the USB cable, and the Sink network create a complex output isolation impedance that should be considered when designing the Source.
Refer to Appendix C.1 for more information.
7.1.13.2 Noise Injected on VBUS:

The Source shall not interfere with the USB Power Delivery BFSK waveform transmitted on VBUS.
Power stage switching harmonics or poor layout and component selection might result in significant in-band noise injected on VBUS.
Characteristics of the noise will be implementation-specific, and an additional filter might be required to meet the in-band signal-to-noise ratio requirement of snrSrc.
Refer to Section 5.8.2 for the USB Power Delivery Specification Revision 2.0, Version 1.3 reference impedance, carrier signal amplitude, and transmission bandwidth of the USB Power Delivery BFSK waveform.
Out-of-band noise (including spurs) can also affect the reception of the BFSK signal; therefore, the Source shall limit its out-of-band noise below the spectrum shown in Figure 7-7 and the levels indicated in Table 7-1.
The V BUS-to-GND noise measurement shall be made at the connector. This can be done using a breakout board or an equivalent method that does not introduce additional loading of the AC impedance of the V BUS wire, with calibration for accurate results.
7.1.13.3 Dead Battery Operation:

Dead Battery operation shall be supported by all Consumer/Providers.
A Consumer/Provider shall apply vSafeDB to its Port when detecting its Port voltage to be vSafe0V.
The operation region of vSafeDB source shall be as shown in Figure 7-8.
For example, if the Provider/Consumer attempts to draw 30mA, the voltage will remain above 2.4V; if drawing more than 90mA, the voltage will drop to vSafe0V.
The Consumer/Provider shall fully support the vSafeDB Operating Region as shown in Figure 7-8 on reaching 2V.
The output voltage shall reach 2V and comply with the vSafeDB Operating Region within tTurnOnSafeDB when it first applies voltage to V BUS.
The Source bulk capacitance shall be limited to cSrcBulkDB for the Consumer/Provider when applying vSafeDB.
The Consumer/Provider shall be limited to cSnkBulk when not applying vSafeDB.
A detailed description of the Consumer/Provider’s behavior during Dead Battery operation is provided in Section 8.3.3.6.1.5.
7.1.14 Application of V BUS Slew Rate Limits:

Scenarios where V BUS slew rate limits shall not apply and V BUS may transition faster than specified include:
When first applying V BUS to a port operating as DFP.
When discharging V BUS to vSafe0V during a Hard Reset.
When increasing VBUS from vSafe0V to vSafe5V during a Hard Reset.
7.2 Sink Requirements Behavioral Aspects:

7.2.1 General Behaviors:

The Sink in a Consumer or Consumer/Provider exhibits the following behaviors:

Shall be backward compatible with legacy V BUS ports.
Shall draw the default [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2] VBUS current when the USB cable is attached (USB Default Operation).
Shall draw the default [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2] VBUS current when a contract does not exist (USB Default Operation).
Shall return to the default [USB 2.0], [USB 3.1], [USB Type-C 1.2], or [USB BC 1.2] VBUS when responding to a Hard Reset (USB Default Operation).
Shall control V BUS in-rush current when increasing current consumption.
The Sink in a Provider/Consumer exhibits the following behaviors:

May support Dead Battery operation as defined in Section 4.2.1 for USB Type-A to USB Type-B connections and as defined in [USB Type-C 1.2] for USB Type-C to USB Type-C connections.
Shall return to Source operation when responding to a Hard Reset.
Shall control V BUS in-rush current when increasing and decreasing current consumption.
7.2.2 Sink Bulk Capacitance:

The Sink shall have a bulk capacitance, cSnkBulk, located between the input of the power supply and the transceiver isolation impedance as shown in Figure 7-9.
The Sink bulk capacitance shall not be placed between the transceiver isolation impedance and the USB receptacle.
The capacitance might be a single capacitor, a capacitor bank, or distributed capacitance.
An upper bound of cSnkBulkPd shall not be exceeded to account for transient charging or discharging of the total bulk capacitance on V BUS during voltage transitions.
The capacitance can be changed to support a newly negotiated power level without causing a transient current on V BUS that violates the present contract.
During a Power Role Swap, the Default Sink shall transition to Swap Standby before operating as the new Source. Any change in bulk capacitance required to complete the Power Role Swap shall occur during Swap Standby.
7.2.3 Sink Standby:

The Sink shall transition to Sink Standby before a positive or negative voltage transition of V BUS.
During Sink Standby, the Sink shall reduce its power draw to pSnkStdby to allow the Source to manage the voltage transition and supply sufficient operating current to maintain PD operation.
The Sink shall complete the transition to Sink Standby within tSnkStdby after evaluating the Accept Message from the Source.
The transition from Sink Standby to Sink operation shall be completed within tSnkNewPower.
The pSnkStdby requirement shall only apply if the Sink power draw is higher than this level.
7.2.4 Suspend Power Consumption:

When the Source has set its USB Suspend Supported flag, a Sink shall go to the lowest power state during USB suspend.
The lowest power state shall be pSnkSusp or lower for a PDUSB Peripheral and pHubSusp or lower for a PDUSB Hub.
There is no requirement for the Source voltage to be changed during USB suspend.
7.2.5 Zero Negotiated Current:

When a Sink requests zero current as part of a power negotiation with a Source, the Sink shall go to the lowest power state, pSnkSusp or lower, where it can still communicate using PD signaling.
7.2.6 Transient Load Behavior:

When a Sink’s operating current changes due to a load step, load release, or any other change in load level, the positive or negative overshoot of the new load current shall not exceed the range defined by iOvershoot.
The rate of change of any shift in Sink load current during normal operation shall not exceed iLoadStepRate (for load steps) and iLoadReleaseRate (for load releases) as measured at the Sink receptacle.
7.2.7 Swap Standby for Sinks:

The Sink capability in a Dual-Role Port shall support Swap Standby.
Swap Standby occurs for the Sink after evaluating the Accept Message from the Source during a Power Role Swap negotiation.
While in Swap Standby, the Sink’s current draw shall not exceed iSnkSwapStdby from VBUS, and the Dual-Role Port shall be configured as a Source after V BUS has been discharged to vSafe0V by the existing Initial Source.
The Sink’s USB connection should not be reset even though vSafe5V is not present on the VBUS conductor.
The time for the Sink to transition to Swap Standby shall be no more than tSnkSwapStdby.
When in Swap Standby, the Sink has relinquished its role as Sink and will prepare to become the new Source.
The transition time from Swap Standby to Sink operation shall be no more than tSnkSwapReady.
7.2.10.1 Detach and Sink Bulk Capacitance
When the Detach occurs (hence removal of the Source bulk capacitance), the 12.5mW power consumption will draw down the VBUS voltage from the worst-case maximum level of 21.5V to 17V in approximately 205ms. At this point, with VBUS well below vSrcValid (min), an approximate 100mW discharge circuit can be enabled to increase the rate of Sink bulk capacitance discharge and meet the safe Sink requirement. The power level of the discharge circuit is dependent on how much time is left to discharge the remaining voltage on the Sink bulk capacitance. If a Sink has the ability to detect the Detach in a different manner and in much less time than tSafe5V, then this different manner of detection can be used to enable a discharge circuit, allowing even lower power dissipation during low power modes such as USB Suspend. In most applications, the safe Sink requirement will limit the maximum Sink bulk capacitance well below the cSnkBulkPd limit. A Detach occurring during Sink high power operating modes must quickly discharge the Sink bulk capacitance to vSafe5V or lower as long as the Sink continues to draw adequate power until VBUS has decayed to vSafe5V or lower.

7.2.10.2 Input Over Voltage Protection
Sinks shall implement input over-voltage protection to prevent damage from input voltage that exceeds the voltage handling capability of the Sink. The definition of voltage handling capability is left to the discretion of the Sink implementation. The response to over-voltage shall not interfere with the negotiated VBUS voltage level. Sinks should attempt to send a Hard Reset message when over-voltage protection engages. The over-voltage protection response may engage at either the port or system level. Systems or ports that have engaged over-voltage protection shall resume default operation when the Source has re-established vSafe5V on VBUS. The Sink shall be able to renegotiate with the Source after resuming default operation. The decision of how to respond to renegotiation after an over-voltage event is left to the discretion of the Sink implementation. The Sink shall prevent continual system or port cycling if over-voltage protection continues to engage after initially resuming either default operation or renegotiation. Latching off the port or system is an acceptable response to recurring over-voltage.

7.2.10.3 Over Temperature Protection
Sinks shall implement over-temperature protection to prevent damage from temperature that exceeds the thermal capability of the Sink. The definition of thermal capability and the monitoring locations used to trigger the over-temperature protection are left to the discretion of the Sink implementation. Sinks shall attempt to send a Hard Reset message when over-temperature protection engages. The over-temperature protection response may engage at either the port or system level. Systems or ports that have engaged over-temperature protection should attempt to resume default operation after sufficient cooling is achieved and may latch off to protect the port or system. The definition of sufficient cooling is left to the discretion of the Sink implementation. The Sink shall be able to renegotiate with the Source after resuming default operation. The decision of how to respond to renegotiation after an over-temperature event is left to the discretion of the Sink implementation. The Sink shall prevent continual system or port cycling if over-temperature protection continues to engage after initially resuming either default operation or renegotiation. Latching off the port or system is an acceptable response to recurring over-temperature.

7.3 Transitions
The following sections illustrate the power supply’s response to various types of negotiations. The negotiation cases take into consideration the following examples:

Higher Power Transitions

Increase the current
Increase the voltage
Increase the voltage and the current
Relatively Constant Power Transitions

Increase the voltage and decrease the current
Decrease the voltage and increase the current
Lower Power Transitions

Decrease the current
Decrease the voltage
Decrease the voltage and the current
Power Role Swap Transitions

Source requests a Power Role Swap
Sink requests a Power Role Swap
Go To Minimum Current Transition

Response to Hard Reset Signaling

Source issues Hard Reset Signaling
Sink issues Hard Reset Signaling
New Source issues Hard Reset Signaling and New Sink Receives Hard Reset Signaling
New Source issues Hard Reset Signaling and New Sink Does Not Receive Hard Reset Signaling
New Sink issues Hard Reset Signaling and New Source Receives Hard Reset Signaling
New Sink issues Hard Reset Signaling and New Source Does Not Receive Hard Reset Signaling
Dead Battery Operation

No change in Current or Voltage

The transition from [USB 2.0], [USB 3.1], [USB Type-C 1.2] or [USB BC 1.2] operation into Power Delivery Mode can also lead to a Power Transition since this is the initial Contract negotiation. The following types of Power Transitions shall also be applied when moving from [USB 2.0], [USB 3.1], [USB Type-C 1.2] or [USB BC 1.2] operation into Power Delivery Mode:

High Power
Relatively Constant Power
Lower Power Transitions
No change in Current or Voltage
7.3.1 Increasing the Current
The interaction of the System Policy, Device Policy, and power supply that shall be followed when increasing the current is shown in Figure 7-11. The sequence that shall be followed is described in Table 7-3. The timing parameters that shall be followed are listed in Table 7-22 and Table 7-23. Note in this figure, the Sink has previously sent a Request Message to the Source.

7.3.2 Increasing the Voltage
The interaction of the System Policy, Device Policy, and power supply that shall be followed when increasing the voltage is shown in Figure 7-12. The sequence that shall be followed is described in Table 7-4. The timing parameters that shall be followed are listed in Table 7-22, Table 7-23 and Table 7-24. Note in this figure, the Sink has previously sent a Request Message to the Source.

7.3.3 Increasing the Voltage and Current
The interaction of the System Policy, Device Policy, and power supply that shall be followed when increasing the voltage and current is shown in Figure 7-13. The sequence that shall be followed is described in Table 7-5. The timing parameters that shall be followed are listed in Table 7-22, Table 7-23 and Table 7-24. Note in this figure, the Sink has previously sent a Request Message to the Source.

7.3.4 Increasing the Voltage and Decreasing the Current
The interaction of the System Policy, Device Policy, and power supply that shall be followed when increasing the voltage and decreasing the current is shown in Figure 7-14. The sequence that shall be followed is described in Table 7-6. The timing parameters that shall be followed are listed in Table 7-22, Table 7-23 and Table 7-24. Note in this figure, the Sink has previously sent a Request Message to the Source.
Sequence Description for Increasing the Voltage and Decreasing the Current
Step 1:
Policy Engine sends the Accept Message to the Sink. Policy Engine evaluates the Accept Message and starts the PSTransitionTimer.

Step 2:
Protocol Layer receives the GoodCRC Message from the Sink. The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the Accept Message.

Step 3:
Policy Engine tells the Device Policy Manager to instruct the power supply to reduce power consumption to pSnkStdby within tSnkStdby (t1); t1 Shall complete before tSrcTransition. The Sink Shall Not violate transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

Step 4:
tSrcTransition after the GoodCRC Message has been received the power supply starts to change its output power capability. The power supply Shall be ready to operate at the new power level within tSrcReady (t2). The power supply informs the Device Policy Manager that it is ready to operate at the new power level. The power supply status is passed to the Policy Engine.

Step 5:
The Policy Engine sends the PS_RDY Message to the Sink. The Policy Engine receives the PS_RDY Message from the Source.

Step 6:
Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the PS_RDY Message from the Source and tells the Device Policy Manager it is okay to operate at the new power level.

Step 7:
The Sink May begin operating at the new power level any time after evaluation of the PS_RDY Message. This time duration is indeterminate.

Step 8:
The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. The time duration (t3) depends on the magnitude of the load change.

Sequence Description for Decreasing the Voltage and Increasing the Current
Step 1:
Policy Engine sends the Accept Message to the Sink. Policy Engine receives the Accept Message and starts the PSTransitionTimer.

Step 2:
Protocol Layer receives the GoodCRC Message from the Sink. The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the Accept Message.

Step 3:
Policy Engine tells the Device Policy Manager to instruct the power supply to reduce power consumption to pSnkStdby within tSnkStdby (t1); t1 Shall complete before tSrcTransition. The Sink Shall Not violate transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

Step 4:
tSrcTransition after the GoodCRC Message has been received the power supply starts to change its output power capability. The power supply Shall be ready to operate at the new power level within tSrcReady (t2). The power supply informs the Device Policy Manager that it is ready to operate at the new power level. The power supply status is passed to the Policy Engine.

Step 5:
The Policy Engine sends the PS_RDY Message to the Sink. The Policy Engine receives the PS_RDY Message from the Source.

Step 6:
Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the PS_RDY Message from the Source and tells the Device Policy Manager it is okay to operate at the new power level.

Step 7:
The Sink May begin operating at the new power level any time after evaluation of the PS_RDY Message. This time duration is indeterminate.

Step 8:
The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. The time duration (t3) depends on the magnitude of the load change.

Sequence Description for Decreasing the Current
Step 1:
Policy Engine sends the Accept Message to the Sink. Policy Engine receives the Accept Message and starts the PSTransitionTimer.

Step 2:
Protocol Layer receives the GoodCRC Message from the Sink. The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the Accept Message. Policy Engine tells the Device Policy Manager to instruct the power supply to reduce power consumption.

Step 3:
The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. The Sink Shall be able to operate with lower current within tSnkNewPower (t1); t1 Shall complete before tSrcTransition.

Step 4:
tSrcTransition after the GoodCRC Message has been received the power supply starts to change its output power capability. The power supply Shall be ready to operate at the new power level within tSrcReady (t2). The power supply informs the Device Policy Manager that it is ready to operate at the new power level. The power supply status is passed to the Policy Engine.

Step 5:
The Policy Engine sends the PS_RDY Message to the Sink. The Policy Engine receives the PS_RDY Message from the Source.

Step 6:
Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine evaluates the PS_RDY Message from the Source. The Sink is already operating at the new power level so no further action is required.

Sequence Description for Decreasing the Voltage
Step 1:
Policy Engine sends the Accept Message to the Sink. Policy Engine receives the Accept Message and starts the PSTransitionTimer.

Step 2:
Protocol Layer receives the GoodCRC Message from the Sink. The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the Accept Message.

Step 3:
Policy Engine tells the Device Policy Manager to instruct the power supply to reduce power consumption to pSnkStdby within tSnkStdby (t1); t1 Shall complete before tSrcTransition. The Sink Shall Not violate transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

Step 4:
tSrcTransition after the GoodCRC Message has been received the power supply starts to change its output power capability. The power supply Shall be ready to operate at the new power level within tSrcReady (t2). The power supply informs the Device Policy Manager that it is ready to operate at the new power level. The power supply status is passed to the Policy Engine.

Step 5:
The Policy Engine sends the PS_RDY Message to the Sink. The Policy Engine receives the PS_RDY Message from the Source.

Step 6:
Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the PS_RDY Message from the Source and tells the Device Policy Manager it is okay to operate at the new power level.

Step 7:
The Sink May begin operating at the new power level any time after evaluation of the PS_RDY Message. This time duration is indeterminate.

Step 8:
The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. The time duration (t3) depends on the magnitude of the load change.

Sequence Description for Decreasing the Voltage and the Current
Step 1:
Policy Engine sends the Accept Message to the Sink. Policy Engine receives the Accept Message and starts the PSTransitionTimer.

Step 2:
Protocol Layer receives the GoodCRC Message from the Sink. The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the Accept Message.

Step 3:
Policy Engine tells the Device Policy Manager to instruct the power supply to reduce power consumption to pSnkStdby within tSnkStdby (t1); t1 Shall complete before tSrcTransition. The Sink Shall Not violate transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

Step 4:
tSrcTransition after the GoodCRC Message has been received the power supply starts to change its output power capability. The power supply Shall be ready to operate at the new power level within tSrcReady (t2). The power supply informs the Device Policy Manager that it is ready to operate at the new power level. The power supply status is passed to the Policy Engine.

Step 5:
The Policy Engine sends the PS_RDY Message to the Sink. The Policy Engine receives the PS_RDY Message from the Source.

Step 6:
Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the PS_RDY Message from the Source and tells the Device Policy Manager it is okay to operate at the new power level.

Step 7:
The Sink May begin operating at the new power level any time after evaluation of the PS_RDY Message. This time duration is indeterminate.

Step 8:
The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. The time duration (t3) depends on the magnitude of the load change.
NEGATIVE: Power Supply Transition and Load Behavior

**Protocol Layer receives the GoodCRC Message from the Sink.** The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer receives the GoodCRC Message from the Initial Source. Policy Engine starts the PSSourceOffTimer.

**2a** The Policy Engine tells the Device Policy Manager to instruct the power supply to transition to Swap Standby. The power supply shall complete the transition to Swap Standby within \( t_{SnkStdby} \) (\( t_1 \)); \( t_1 \) shall complete before \( t_{SrcTransition} \). The Sink shall not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. Policy Engine starts PSSourceOffTimer. When in Sink Standby, the Initial Sink shall not draw more than \( i_{SnkSwapStdby} \) (\( I_1 \)).

**3** \( t_{SrcTransition} \) after the GoodCRC Message has been received, the power supply starts to change its output power capability to Swap Standby (see Section 7.1.11). The power supply shall complete the transition to Swap Standby within \( t_{SrcSwapStdby} \) (\( t_2 \)). The power supply informs the Device Policy Manager that it is ready to operate as the new Sink. The CC termination is changed from Rp to Rd (see [USB Type-C 1.2]). The power supply status is passed to the Policy Engine.

**4** The Policy Engine sends the PS_RDY Message to the soon-to-be new Source. Policy Engine receives the PS_RDY Message and stops the PSSourceOffTimer.

**5** Protocol Layer receives the GoodCRC Message from the soon-to-be new Source. Policy Engine starts the PSSourceOnTimer. At this point, the Initial Source is ready to be the new Sink. Protocol Layer sends the GoodCRC Message to the new Sink. Upon evaluating the PS_RDY Message, the Initial Sink is ready to operate as the new Source. Policy Engine tells the Device Policy to instruct the power supply to operate as the new Source.

**6** The CC termination is changed from Rd to Rp (see [USB Type-C 1.2]). The power supply as the new Source transitions from Swap Standby to sourcing default vSafe5V within \( t_{NewSrc} \) (\( t_3 \)). The power supply informs the Device Policy Manager that it is operating as the new Source.

**7** Policy Engine receives the PS_RDY Message and stops the PSSourceOnTimer. Device Policy Manager informs the Policy Engine the power supply is ready, and the Policy Engine sends the PS_RDY Message to the new Sink.

**8** Protocol Layer sends the GoodCRC Message to the new Source. Policy Engine evaluates the PS_RDY Message from the new Source and tells the Device Policy Manager to instruct the power supply to draw current as the new Sink. Protocol Layer receives the GoodCRC Message from the new Sink.

**9** The power supply as the new Sink transitions from Swap Standby to drawing \( p_{SnkSusp} \) within \( t_{NewSnk} \) (\( t_4 \)). The power supply informs the Device Policy Manager that it is operating as the new Sink. At this point, subsequent negotiations between the new Source and the new Sink may proceed as normal. The new Sink shall not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level. The time duration (\( t_4 \)) depends on the magnitude of the load change.

---

### GotoMin Current Decrease

**7.3.11** The interaction of the System Policy, Device Policy, and power supply that shall be followed during a GotoMin current decrease is shown in Figure 7-21. The sequence that shall be followed is described in Table 7-13. The timing parameters that shall be followed are listed in Table 7-22 and Table 7-13.

**Figure 7-21** Transition Diagram for a GotoMin Current Decrease

**Table 7-13** Sequence Description for a GotoMin Current Decrease

**Step Source Port Sink Port**

**1** Policy Engine sends the GotoMin Message to the Sink. Policy Engine receives the GotoMin Message and starts the PSTransitionTimer.

**2** Protocol Layer receives the GoodCRC Message from the Sink. The Policy Engine tells the Device Policy Manager to instruct the power supply to modify its output power. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the GotoMin Message.

**3** Policy Engine tells the Device Policy Manager to instruct the power supply to reduce power consumption, within \( t_{SnkNewPower} \) (\( t_1 \)), to the pre-negotiated go to reduced power level; \( t_1 \) shall complete before \( t_{SrcTransition} \). The Sink shall not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

**4** \( t_{SrcTransition} \) after GoodCRC Message has been received, the power supply starts to change its output power capability. The power supply shall be ready to operate at the new power level within \( t_{SrcReady} \) (\( t_2 \)). The power supply informs the Device Policy Manager that it is ready to operate at the new power level. The power supply status is passed to the Policy Engine.

**5** The Policy Engine sends the PS_RDY Message to the Sink. The Policy Engine receives the PS_RDY Message.

**6** Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine evaluates the PS_RDY Message from the Source and no further action is required.

---

### Source Initiated Hard Reset

**7.3.12** The interaction of the System Policy, Device Policy, and power supply that shall be followed during a Source Initiated Hard Reset is shown in Figure 7-22. The sequence that shall be followed is described in Table 7-14. The timing parameters that shall be applied are listed in Table 7-22 and Table 7-23.

**Figure 7-22** Transition Diagram for a Source Initiated Hard Reset

**Table 7-14** Sequence Description for a Source Initiated Hard Reset

**Step Source Port Sink Port**

**1** Policy Engine sends Hard Reset Signaling to the Sink. Sink receives Hard Reset Signaling.

**2** Policy Engine is informed of the Hard Reset. Policy Engine tells the Device Policy Manager to instruct the power supply to prepare for a Hard Reset.

**3** The Sink prepares for the Hard Reset within \( t_{SnkHardResetPrepare} \) (\( t_1 \)) and passes an indication to the Device Policy Manager. The Sink shall not draw more than \( i_{Safe0} \) when VBUS is driven to \( v_{Safe0V} \).

**4** Policy Engine waits \( t_{PSHardReset} \) after sending Hard Reset Signaling and then tells the Device Policy Manager to instruct the power supply to perform a Hard Reset. The transition to \( v_{Safe0V} \) shall occur within \( t_{Safe0V} \) (\( t_2 \)).

**5** After \( t_{SrcRecover} \), the Source applies power to VBUS in an attempt to re-establish communication with the Sink and resume USB Default Operation. The transition to \( v_{Safe5V} \) shall occur within \( t_{SrcTurnOn} \) (\( t_4 \)). The Sink shall not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

---

### Sink Initiated Hard Reset

**7.3.13** The interaction of the System Policy, Device Policy, and power supply that shall be followed during a Sink Initiated Hard Reset is shown in Figure 7-23. The sequence that shall be followed is described in Table 7-15. The timing parameters that shall be followed are listed in Table 7-22 and Table 7-23.

**Figure 7-23** Transition Diagram for a Sink Initiated Hard Reset

**Table 7-15** Sequence Description for a Sink Initiated Hard Reset

**Step Source Port Sink Port**

**1** Policy Engine sends Hard Reset Signaling to the Source.

**2** Policy Engine tells the Device Policy Manager to instruct the power supply to prepare for a Hard Reset.

**3** The Sink prepares for the Hard Reset within \( t_{SnkHardResetPrepare} \) (\( t_1 \)) and passes an indication to the Device Policy Manager. The Sink shall not draw more than \( i_{Safe0} \) when VBUS is driven to \( v_{Safe0V} \).

**4** Policy Engine is informed of the Hard Reset.

**5** Policy Engine waits \( t_{PSHardReset} \) after receiving Hard Reset Signaling and then tells the Device Policy Manager to instruct the power supply to perform a Hard Reset. The transition to \( v_{Safe0V} \) shall occur within \( t_{Safe0V} \) (\( t_2 \)).

**6** After \( t_{SrcRecover} \), the Source applies power to VBUS in an attempt to re-establish communication with the Sink and resume USB Default Operation. The transition to \( v_{Safe5V} \) shall occur within \( t_{SrcTurnOn} \) (\( t_4 \)). The

 Sink shall not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.

USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Does Not Receive Hard Reset Signaling
Signaling and Timing Parameters

Signaling is shown in Figure 7-27. The sequence that shall be followed is described in Table 7-19. The timing parameters that shall be followed are listed in Table 7-22 and Table 7-23. The default roles for Provider/Consumers and Consumer/Providers after a Hard Reset are as defined in Section 6.7.2.
Transition Diagram

Figure 7-27 Transition Diagram for USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Does Not Receive Hard Reset Signaling
New Source Initial Sink Initial Source New Sink New Source
t1 vSafe0V Initial Sink New Source Initial Source New Sink Send Hard Reset VOLD New Source Turn Off 1 ≤ IOLD vSafe5V default current ≈ Revert to Source New Sink
t2 Revert to Sink and ready to power up 4 New Sink Port Policy Engine New Source Port Policy Engine New Sink Port Device Policy Mgr New Sink à Source Power Supply New Source Port Device Policy Mgr New Source à Sink Power Supply Source Port Voltage Sink Port Current Initial Source Turn On Send Hard Reset 2t Swap Recover iSafe0mA 3 ≈ ≈ Port to Port Messaging Source Port Interaction Sink Port Interaction Source VBUS Voltage Sink VBUS Current USB Power Delivery Specification Revision 2.0, Version 1.3 Page 275
Sequence Description

Table 7-19 Sequence Description for USB Type-A New Sink Initiated Hard Reset and USB Type-B New Source Does Not Receive Hard Reset Signaling
Step:
New Source Port: Policy Engine attempts to send the Hard Reset Signaling to the new Source and waits tSwapRecover before telling the Device Policy Manager to revert to Source operation.
New Sink Port: The new Source has not received a Message from the new Sink and decides to initiate a Hard Reset and tells the Device Policy Manager to revert to Source operation.
The Device Policy Manager instructs the Power supply to turn off the Source and revert to Sink operation by tSafe0V (t1).
Source Shall Not re-apply vSafe5V until VBUS is within vSafe0V. The transition to vSafe5V Shall be completed within tSrcTurnOn (t2). The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.
USB Type-A to USB Type-B Dead Battery Operation
Transition Diagram and Timing Parameters

The interaction of the System Policy, Device Policy, and power supply that shall be followed during USB Type-A to USB Type-B Dead Battery operation is shown in Figure 7-28. The sequence that shall be followed is described in Table 7-20. The timing parameters that shall be followed are listed in Table 4-4, Table 7-22, and Table 7-23. The Initial Source Port is not applying power to VBUS at the beginning of this sequence.
Transition Diagram

Figure 7-28 USB Type-A to USB Type-B Transition Diagram for Dead Battery Operation
Implied Sink Not Sourcing, ready to power up as Sink Initial Source Port Device Policy Mgr Source à Sink Power Supply Source Port Voltage vSafe0V t1 Source vSafeDB Nothing attached Initial Sink Port Device Policy Mgr Sink à Source Power Supply Sink Port Current 4 Waiting for Bit Stream Initial Source Port Policy Engine Initial Sink Port Policy Engine Not attached
Sequence Description

Table 7-20 Sequence Description for USB Type-A to USB Type-B Dead Battery Operation
Step:
The Initial Sink detects VBUS is within vSafe0V and performs an implied Power Role Swap to apply vSafeDB to VBUS. The turn-on time for vSafeDB is tTurnOnSafeDB (t1).
The implied Source begins to wait for the Bit Stream after having applied vSafeDB to VBUS. If an attach does not occur before BitStreamDetectTimer times out, then the implied Source removes vSafeDB and discharges VBUS to vSafe0V. The Dead Battery startup routine for the Source will loop this behavior until an attach occurs (see Section 4.2.1). The loop is not illustrated in this diagram.
At some point in time, an unpowered Source waiting to power up as the implied Sink is attached to an implied Source. The turn-on time of the implied Sink is tTurnOnImpliedSink (t2). The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.
If the implied Sink is unpowered, it sends the Bit Stream after having been powered up for some time by vSafeDB from the implied Source.
When the Bit Stream is detected, the DeviceReadyTimer is started and this diagram assumes the Bit Stream will end before the DeviceReadyTimer has timed out.
The implied Source will apply vSafe5V to VBUS after the start of the Bit Stream has been detected. The transition time to change from vSafeDB to vSafe5V is tSafeDBtoSafe5V (t3).
6a. The implied Sink will transition to new Sink operation as the VBUS voltage changes from vSafeDB to vSafe5V and may draw up to 1 unit load (as specified in [USB 2.0] or [USB 3.1]) once vSafe5V is reached. The Sink Shall Not violate the transient load behavior defined in Section 7.2.6 while transitioning to and operating at the new power level.
The new Sink stops sending the Bit Stream when the Policy Engine is ready to accept a Source_Capabilities Message.
The new Source detects the end of the Bit Stream.
The Policy Engine of the new Source sends a Source_Capabilities Message to the new Sink.
The Policy Engine of the new Sink evaluates the Source_Capabilities Message from the new Source and responds as normal for PD negotiation.
No Change in Current or Voltage
Transition Diagram and Timing Parameters

The interaction of the System Policy, Device Policy, and power supply that shall be followed when the Sink requests the same Voltage and Current as it is currently operating at is shown in Figure 7-29. The sequence that shall be followed is described in Table 7-21. The timing parameters that shall be followed are listed in Table 7-22 and Table 7-23.
Transition Diagram

Figure 7-29 Transition Diagram for No Change in Current or Voltage
Source Port Policy Engine Send Accept Sink Port Policy Engine Evaluate Accept Source Port Device Policy Mgr Source Port Power Supply Sink Port Device Policy Mgr Sink Port Power Supply Send PS_RDY Evaluate PS_RDY Source Port Voltage Sink Port Current Sink ≤ IOLD VBUS doesn’t change 1 2 3 4 PSTransitionTimer (running) Source VOLD Current doesn’t change tSrcTransition Port to Port Messaging Source Port Interaction Sink Port Interaction Source VBUS Voltage Sink VBUS Current USB Power Delivery Specification Revision 2.0, Version 1.3 Page 279
Sequence Description

Table 7-21 Sequence Description for No Change in Current or Voltage
Step:
Policy Engine sends the Accept Message to the Sink. Policy Engine receives the Accept Message and starts the PSTransitionTimer.
Protocol Layer receives the GoodCRC Message from the Sink. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine then evaluates the Accept Message.
The Policy Engine waits tSrcTransition then sends the PS_RDY Message to the Sink. Policy Engine receives the PS_RDY Message.
Policy Engine receives the GoodCRC Message from the Sink. Note: the decision that no power transition is required could be made either by the Device Policy Manager or the power supply depending on implementation. Protocol Layer sends the GoodCRC Message to the Source. Policy Engine evaluates the PS_RDY Message.
Source Electrical Parameters
Source Electrical Parameters

Table 7-22 Source Electrical Parameters
Parameter Description:
cSrcBulk1: Source bulk capacitance when a Port is powered from a dedicated supply. 10 µF
cSrcBulkDB: Source bulk capacitance on VBUS when applying vSafeDB. 0 10 µF
cSrcBulkShared1: Source bulk capacitance when a Port is powered from a shared supply. 120 µF
snrSrc: Source’s output Signal-to-noise ratio. 31 dB
tNewSnk: Time allowed for an initial Source in Swap Standby to transition new Sink operation. 15 ms
tSafeDBtoSafe5V: Transition time from vSafeDB to vSafe5V. 15 ms
tShortCctRecover: Source recovery time from short circuit on fault removal. 120 s
tSrcReady: Time from positive/negative transition start (t0) to when the Source is ready to provide the newly negotiated power level. 285 ms
tSrcRecover: Time allotted for the Source to recover. 0.66 1 s
tSrcSettle: Time from positive/negative transition start (t0) to when the Source is settled at the new power level. 0.66 s
Sink Electrical Parameters
Sink Electrical Parameters

Table 7-23 Sink Electrical Parameters
Parameter Description:
cSinkBulk1: Sink bulk capacitance when a Port is powered from a dedicated supply. 10 µF
cSinkBulkDB: Sink bulk capacitance on VBUS when applying vSafeDB. 0 10 µF
cSinkBulkShared1: Sink bulk capacitance when a Port is powered from a shared supply. 120 µF
snrSink: Sink’s output Signal-to-noise ratio. 31 dB
tSafe5VtoSafe0V: Transition time from vSafe5V to vSafe0V. 15 ms
tSinkReady: Time from positive/negative transition start (t0) to when the Sink is ready to accept power. 285 ms
tSinkRecover: Time allotted for the Sink to recover. 0.66 1 s
tSinkSettle: Time from positive/negative transition start (t0) to when the Sink is settled at the new power level. 0.66 s
tStartup: Time from initial power application to the Sink is ready for operation. 0.66 s
Device Policy Manager Requirements
NEGATIVE: Added to a USB device in such a way that PD is not integrated with USB. In these two cases, there shall be no requirement for the Device Policy Manager to interact with the USB interface of the device. The following requirements shall only apply to PD devices that expose PD functionality over USB. The Device Policy Manager shall communicate over USB with the System Policy Manager according to the requirements detailed in [USB CBridge 1.0]. Whenever requested, the Device Policy Manager shall implement a Local Policy according to that requested by the System Policy Manager. For example, the System Policy Manager might request that a battery-powered device temporarily stops charging so that there is sufficient power for an HDD to spin up. Note: due to timing constraints, a PD Capable device shall be able to respond autonomously to all time-critical PD related requests.

Control of Source/Sink
NEGATIVE: The Device Policy Manager for a Provider shall manage the power supply for each PD Source Port and shall know at any given time what the negotiated power is. It shall request transitions of the supply and inform the Policy Engine whenever a transition completes. The Device Policy Manager for a Consumer shall manage the Sink for each PD Sink Port and shall know at any given time what the negotiated power is. The Device Policy Manager for a Dual-Role Power Device shall manage the transition between Source/Sink roles for each PD Dual-Role Power Port and shall know at any given time what operational role the Port is in. The Device Policy Manager for a Consumer/Provider shall be able to detect and handle cases where back-powering is required due to a Dead Battery on the Provider/Consumer side. It shall determine the absence of VBUS and the Provider/Consumer’s ability to be back-powered from the Cable Detection module. It shall then initiate the Provider role and instruct the power supply to start providing default output power. Refer to Section 4.2.

Cable Detection
NEGATIVE:

8.2.4.1 Device Policy Manager in a Provider
The Device Policy Manager in the Provider shall control the Cable Detection module and shall be able to use the Cable Detection module to determine the attachment of a cable and for USB Type-A/Type-B whether it is a USB Power Delivery or non-USB Power Delivery cable. This information and the type of receptacle on the local device shall be used to determine the capabilities of the Port and Attached cabling. Note: it might be necessary for the Device Policy Manager to also initiate additional discovery using the Discover Identity command in order to determine the full capabilities of the cabling (see Section 6.4.4.2).

8.2.4.2 Device Policy Manager in a Consumer
The Device Policy Manager in a Consumer controls the Cable Detection module and shall be able to use the Cable Detection module to determine the attachment of a USB Power Delivery or non-USB Power Delivery cable. The type of cabling and receptacle together determine the current carrying ability of the Port and Attached cabling.

8.2.4.3 Device Policy Manager in a Consumer/Provider
The Device Policy Manager in a Consumer/Provider inherits characteristics of Consumers and Providers and shall control the Cable Detection module in order to support the Dead Battery back-powering case to determine the following for a given Port:

Attachment of a USB Power Delivery Provider/Consumer which supports Dead Battery back-powering
Presence of VBUS.
8.2.4.4 Device Policy Manager in a Provider/Consumer
The Device Policy Manager in a Provider/Consumer inherits characteristics of Consumers and Providers and may control the Cable Detection module in order to support the Dead Battery back-powering case to determine the following for a given Port:

Presence of VBUS.
Managing Power Requirements
NEGATIVE:

8.2.5 Power Requirements Awareness
The Device Policy Manager in a Provider shall be aware of the power requirements of all devices connected to its Source Ports. This includes being aware of any reserve power that might be required by devices in the future and ensuring that power is shared optimally amongst attached PD capable devices. This is a key function of the Device Policy Manager, whose implementation is critical to ensuring that all PD capable devices get the power they require in a timely fashion to facilitate smooth operation. This is balanced by the fact that the Device Policy Manager is responsible for managing the sources of power that are, by definition, finite.

8.2.5.1 Managing the Power Reserve
There might be some products where a device has certain functionality at one power level and greater functionality at another, for example, a Printer/Scanner that operates only as a printer with one power level and as a scanner if it receives more power. Visibility of the linkage between power and functionality will only be apparent at the USB Host; however, the Device Policy Manager provides the mechanisms to manage the power requirements of such devices. Devices with the GiveBack flag cleared report Operating Current and Maximum Operating Current (see Section 6.4.2). For many devices, the Operating Current and the Maximum Operating Current will be the same. Devices with highly variable loads, such as Hard Disk Drives, might use Maximum Operating Current. Devices with the GiveBack flag set report Operating Current and Minimum Operating Current (see Section 6.4.2). For many devices, the Operating Current and the Minimum Operating Current will be the same. Devices that charge their own batteries might use the Minimum Operating Current and GiveBack flag. For example, in the first case, a mobile device might require 500mA to operate but would like an additional 1000mA to charge its battery. The mobile device would set the GiveBack flag (see Section 6.4.2.2) and request 500mA in the Minimum Operating Current field and 1500mA in the Operating Current field (provided that 1500mA was offered by the Source), indicating to the Provider that it could temporarily recover the 1000mA to meet a transitory request. In the second case, a Hard Disk Drive (HDD) might require 2A to spin-up but only 1A to operate. At startup, the HDD would request a Maximum Operating Current of 2A and an Operating Current of 2A. After the drive is spun-up and ready to operate, it would make another request of 1A for its Operating Current and 2A for its Maximum Operating Current. Over time, its inactivity timers might expire and the HDD will go to a lower power state. When the HDD is next accessed, it has to spin-up again. So it will request an Operating Current of 2A and a Maximum Operating Current of 2A. The Provider might have the extra power available immediately and can immediately honor the request. If the power is not available, the Provider might have to harvest power, for example, use the GotoMin Message to get back some power before honoring the HDD’s request. In such a case, the HDD would be told to wait using a Wait Message. The HDD continues to request additional power until the request is finally granted. It shall be the Device Policy Manager’s responsibility to allocate power and maintain a Power Reserve so as not to over-subscribe its available power resource. A device with multiple ports such as a Hub shall always be able to meet the incremental demands of the Port requiring the highest incremental power from its Power Reserve. The GotoMin Message is designed to allow the Provider to reclaim power from one Port to support a Consumer on another Port that temporarily requires additional power to perform some short-term operation. In the example above, the mobile device that is being charged reduces its charge rate to allow a Device Policy Manager to meet a request from an HDD for start-up current required to spin-up its platters. Any power which is available to be reclaimed using a GotoMin Message may be counted as part of the Power Reserve. A Consumer requesting power shall take into account its operational requirements when advertising its ability to temporarily return power. For example, a mobile device with a Dead Battery that is being used to make a call should make a request that retains sufficient power to continue the call. When the Consumer’s requirements change, it shall re-negotiate its power to reflect the changed requirements.

8.2.5.2 Power Capability Mismatch
A capability mismatch occurs when a Consumer cannot obtain the required power from a Provider (or the Source is not PD Capable) and the Consumer requires such capabilities to operate. Different actions are taken by the Device Policy Manager and the System Policy Manager in this case.

8.2.5.2.1 Local Device Handling of Mismatch
The Consumer’s Device Policy Manager shall cause a message to be displayed to the end user that a power capability mismatch has occurred. Examples of such feedback can include:

For a simple device, an LED may be used to indicate the failure. For example, during connection, the LED could be solid amber. If the connection is successful, the LED could change to green. If the connection fails, it could be red or alternately blink amber.
A more sophisticated device with a user interface, e.g., a mobile device or monitor, should provide notification through the user interface on the device.
8.2.5.2.2 Device Policy Manager Communication with System Policy
In a USB Power Delivery aware system with an active System Policy Manager (see Section 8.2.2), the Device Policy Manager shall notify the System Policy Manager of the mismatch. This information shall be passed back to the System Policy Manager using the mechanisms described in Chapter 8.3.2.10.4. The System Policy Manager should ensure that the user is informed of the condition. When another Port in the system could satisfy the Consumer’s power requirements, the user should be directed to move the device to the alternate Port. In order to identify a more suitable Source Port for the Consumer, the System Policy Manager shall communicate with the Device Policy Manager in order to determine the Consumer’s requirements. The Device Policy Manager shall use a Get_Sink_Cap Message (see Section 6.3.8) to discover which power levels can be utilized by the Consumer.

Use of “Unconstrained Power” Bit with Batteries and AC Supplies
NEGATIVE:

8.2.6 Use of “Unconstrained Power” Bit
The Device Policy Manager in a Provider or Consumer may monitor the status of any variable sources of power that could have an impact on its capabilities as a Source, such as Batteries and AC supplies, and reflect this in the “Unconstrained Power” bit (see Section 6.4.1.3.1.3) provided as part of the Source or Sink Capabilities Message (see Section 6.4.1). When monitored, and a USB interface is supported, the External Power status (see [USB CBridge 1.0]) and the Battery state (see Section 9.4.1) shall also be reported to the System Policy Manager using the USB interface.

8.2.6.1 AC Supplies
The Unconstrained Power bit provided by Sources and Sinks (see Section 6.4.1.3.1.3 and Section 6.4.1.2.3.3) notifies a connected device that it is acceptable to use the advertised power for charging as well as for what is needed for normal operation. A device that sets the Unconstrained Power bit has either an external source of power that is sufficient to adequately power the system while charging external devices, or expects to charge external devices as a primary state of function (such as a battery pack). In the case of the external power source, the power can either be from an AC supply directly connected to the device or from an AC supply connected to an Attached device, which is also getting unconstrained power from its power supply. The Unconstrained Power bit is in this way communicated through a PD system indicating that the origin of the power is from a single or multiple AC supplies, from a battery bank, or similar:

If the “Unconstrained Power” bit is set, then that power is originally sourced from an AC supply.
Devices capable of consuming on multiple ports can only claim that they have “Unconstrained Power” for the power advertised as a provider Port if there is unconstrained power beyond that needed for normal operation coming from external supplies (e.g., multiple AC supplies).
This concept applies as the power is routed through multiple provider and Consumer tiers, so, as an example, power provided out of a monitor that is connected to a monitor that gets power from an AC supply, will claim it has "Unconstrained Power” even though it is not directly connected to the AC supply.
An example use case is a Tablet computer that is used with two USB A/V displays that are daisy-chained. The tablet and 1st display are not externally powered, meaning they have no source of power outside of USB PD. The 2nd display has an external supply attached, which could either be a USB PD based supply or some other form of external supply. When the displays are connected as shown, the power adapter attached to the 2nd display is able to power both the 1st display and the tablet. In this case, the 2nd display will indicate the presence of a sufficiently-sized wall wart to the 1st display by setting its “Unconstrained Power” bit. The 1st display will then in turn assess and indicate the presence of the extra power to the tablet by setting its “Unconstrained Power” bit. Power is transmitted through the system to all devices, provided that there is sufficient power available from the external supply.

8.2.6.2 Battery Supplies
When monitored, and a USB interface is supported, the Battery state shall be reported to the System Policy Manager using the USB interface. If the device is battery-powered but is in a state that is primarily for charging external devices, the device is considered to be an unconstrained source of power and thus should set the “Unconstrained Power” bit. A simplified algorithm is detailed below to ensure that Battery-powered devices will get charge from non-Battery-powered devices when possible, and also to ensure that devices do not constantly Power Role Swap back and forth. When two devices are connected that do not have Unconstrained Power, they should define their own policies so as to prevent constant Power Role Swapping. This algorithm uses the “Unconstrained Power” bit (see Section 6.4.1.2.3.3 and Section 6.4.1.3.1.3), thus the decisions are based on the availability and sufficiency of an external supply, not the full capabilities of a system or device or product.

Interface to the Policy Engine
NEGATIVE:

8.2.7 Device Policy Manager Interface
The Device Policy Manager shall maintain an interface to the Policy Engine for each Port in the device.

8.2.7.1 Device Policy Manager in a Provider
The Device Policy Manager in a Provider shall also provide the following functions to the Policy Engine:

Inform the Policy Engine of changes in cable/device attachment status for a given cable.
Inform the Policy Engine whenever the Source capabilities available for a Port change.
Evaluate requests from an Attached Consumer and provide responses to the Policy Engine.
Respond to requests for power supply.
8.2.7.1 Device Policy Manager in a Provider
The Device Policy Manager in a Provider shall also provide the following functions to the Policy Engine:

Inform the Policy Engine of changes in cable/device attachment status for a given cable.
Inform the Policy Engine whenever the Source capabilities available for a Port change.
Evaluate requests from an Attached Consumer and provide responses to the Policy Engine.
Respond to requests for power supply.
8.2.7.2 Device Policy Manager in a Consumer
The Device Policy Manager in a Consumer shall also provide the following functions to the Policy Engine:

Inform the Policy Engine of changes in cable/device attachment status.
Inform the Policy Engine whenever the power requirements for a Port change.
Evaluate Source capabilities and provide suitable responses:
Request from offered capabilities
Indicate whether additional power is required
Respond to requests for Sink transitions from the Policy Engine.
8.2.7.3 Device Policy Manager in a Provider/Consumer
The Device Policy Manager in a Provider/Consumer shall provide the following functions to the Policy Engine:

Provider Device Policy Manager
Consumer Device Policy Manager
Interface for the Policy Engine to request power supply transitions from Source to Sink and vice versa.
Indications to Policy Engine during Power Role Swap transitions.
8.2.7.4 Device Policy Manager in a Provider/Consumer Dead Battery Handling
The Device Policy Manager in a Provider/Consumer with a Battery should also provide:

Detection and handling of back powering in the case of a USB Type-A to USB Type-B Dead Battery (see Section 4.2.1).
In this scenario, a Provider/Consumer shall:

Detect that V BUS is present and that its Battery is dead.
Switch to Consumer role without using a PR_Swap Message.
Use V BUS to power the USB Power Delivery communications.
8.2.7.5 Device Policy Manager in a Consumer/Provider
The Device Policy Manager in a Consumer/Provider shall provide the following functions to the Policy Engine:

Consumer Device Policy Manager
Provider Device Policy Manager
Interface for the Policy Engine to request power supply transitions from Sink to Source and vice versa.
Indications to Policy Engine during Power Role Swap transitions.
8.2.7.6 Device Policy Manager in a Consumer/Provider Dead Battery Handling
The Device Policy Manager in a Consumer/Provider shall also provide:

Detection and handling of back powering in the case of a Dead Battery (see Section 4.2).
In this scenario, a Consumer/Provider shall:

Detect that a Provider/Consumer with a Dead Battery capable of being back powered is attached.
Check that V BUS is not present.
Temporarily output vSafeDB on V BUS to provide power to the Provider/Consumer so that it can send a Bit Stream.
Detect Bit Stream sent by Provider/Consumer.
Switch to the Provider role without using a PR_Swap Message and output vSafe5V on VBUS that will power the Provider/Consumer’s PD communications.
8.3 Policy Engine Introduction
There is one Policy Engine instance per Port that interacts with the Device Policy Manager in order to implement the present Local Policy for that particular Port. This section includes:

Message sequences for various operations
State diagrams covering operation of Sources, Sinks, and Cable Plugs
8.3.1 Atomic Message Sequence Diagrams
The Device Policy Engine drives the Message sequences and responses based on both the expected Message sequences and the present Local Policy. An AMS shall be defined as a Message sequence that starts and/or ends in either the PE_SRC_Ready, PE_SNK_Ready, or PE_CBL_Ready states (see Section 8.3.3.2, Section 8.3.3.3, and Section 8.3.3.10). In addition, the Cable Plug discovery sequence specified in Section 8.3.3.10.11 shall be defined as an AMS. The Source and Sink indicate to the Protocol Layer when an AMS starts and ends on entry to/exit from PE_SRC_Ready or PE_SNK_Ready (see Section 8.3.3.2 and Section 8.3.3.3). Section 8.3.2.2.1 gives details of which of these AMSs are Interruptible or Non-interruptible. This section contains sequence diagrams that highlight some of the more interesting transactions. It is by no means a complete summary of all possible combinations but is illustrative in nature.

8.3.2 Basic Message Exchange
Figure 8-2 illustrates how a Message is sent. Note that the sender might be either a Source or Sink while the receiver might be either a Sink or Source. The basic Message sequence is the same. It starts when the Message Sender’s Protocol Layer, at the behest of its Policy Engine, forms a Message that it passes to the Physical Layer.

Table 8-1 Basic Message Flow
Step	Message Sender	Message Receiver
1	Policy Engine directs Protocol Layer to send a Message.	
2	Protocol Layer creates the Message and passes to Physical Layer. Starts CRCReceiveTimer.	
3	Physical Layer appends a CRC and sends the Message.	Physical Layer receives the Message and checks the CRC to verify the Message.
4		Physical Layer removes the CRC and forwards the Message to the Protocol Layer.
5		Protocol Layer checks the MessageID in the incoming Message is different from the previously stored value and then stores a copy of the new value. Protocol Layer forwards the received Message information to the Policy Engine that consumes it.
6		Protocol Layer generates a GoodCRC Message and passes it to Physical Layer.
7		Physical Layer receives the GoodCRC Message and checks the CRC to verify the Message. Physical Layer appends CRC and sends the GoodCRC Message.
8		Physical Layer removes the CRC and forwards the GoodCRC Message to the Protocol Layer.
9	Protocol Layer checks and increments the MessageIDCounter and stops CRCReceiveTimer.	Protocol Layer informs the Policy Engine that the Message was successfully sent.
8.3.2.2 Errors in Basic Message Flow
There are various points during the Message flow where failures in communication or other issues can occur. Figure 8-3 is an annotated version of Figure 8-2 indicating at which point issues can occur.

Table 8-2 Potential Issues in Basic Message Flow
Point	Possible Issues
A	1. There is an incoming Message on the channel meaning that the PHY Layer is unable to send. In this case, the outgoing Message is removed from the queue and the incoming Message processed. 2. Due to some sort of noise on the line, it is not possible to transmit. In this case, the outgoing Message is discarded by the PHY Layer. Retransmission is via the Protocol Layer’s normal mechanism.
B	1. Message does not arrive at the Physical Layer due to noise on the channel. 2. Message arrives but has been corrupted and has a bad CRC. There is no Message to pass up to the Protocol Layer on the receiver which means a GoodCRC Message is not sent. This leads to a CRCReceiveTimer timeout in the Message Sender.
C	1. MessageID of received Message matches stored MessageID so this is a retry. Message is not passed up to the Policy Engine.
D	1. Policy Engine receives a known Message that it was not expecting. 2. Policy Engine receives an unknown (unrecognized) Message. These cases are errors in the protocol which leads to the generation of a Soft_Reset Message.
E	Same as point A but at the Message Receiver side.
F	1. GoodCRC Message response does not arrive at the Message Sender side due to the noise on the channel. 2. GoodCRC Message response arrives but has a bad CRC. A GoodCRC Message is not received by the Message Sender’s Protocol Layer. This leads to a CRCReceiveTimer timeout in the Message Sender.
G	1. GoodCRC Message is received but does not contain the same MessageID as the transmitted Message. 2. A Message is received but it is not a GoodCRC Message (similar case to that of an unexpected or unknown Message but this time detected in the Protocol Layer). Both of these issues indicate errors in receiving an expected GoodCRC Message which will lead to a CRCReceiveTimer timeout in the Protocol Layer and a subsequent retry (except for communications with Cable Plugs).
8.3.2.3 Power Negotiation
Figure 8-5 illustrates an example of a successful Message flow during Power Negotiation. The negotiation goes through 5 distinct phases:

The Source sends out its power capabilities in a Source_Capabilities Message.
The Sink evaluates these capabilities and in the request phase selects one power level by sending a Request Message.
The Source evaluates the request and accepts the request with an Accept Message.
The Source transitions to the new power level and then informs the Sink by sending a PS_RDY Message.
The Sink starts using the new power level.
Table 8-5 Steps for a Successful Power Negotiation
Step	Source	Sink
1	The Cable Capabilities or Plug Type are detected if these are not already known (see Section 4.5). Policy Engine directs the Protocol Layer to send a Source_Capabilities Message that represents the power supply’s present capabilities.	
2	Protocol Layer creates the Message and passes to Physical Layer. Starts CRCReceiveTimer.	
3	Physical Layer appends CRC and sends the Source_Capabilities Message.	
4		Physical Layer receives the Message, checks the CRC, removes the CRC, and forwards the Message to the Protocol Layer.
5		Protocol Layer checks that the MessageID is not a duplicate and stores the new MessageID. Forwards Message to Policy Engine.
6		Policy Engine receives the Source_Capabilities Message and evaluates the power capabilities.
7		Policy Engine directs the Protocol Layer to send a Request Message to request the appropriate power level.
8		Protocol Layer creates the Request Message and passes it to Physical Layer.
9		Physical Layer appends CRC and sends the Request Message.
10		
11		
12	Policy Engine receives the Request Message and evaluates it. If the Request Message is acceptable, Policy Engine directs the Protocol Layer to send an Accept Message to indicate acceptance of the request.	
13	Protocol Layer creates the Accept Message and passes it to Physical Layer.	
14		Physical Layer appends CRC and sends the Accept Message.
15		
16		
17		Policy Engine receives the Accept Message and transitions to the new power level.
18		Policy Engine directs the Protocol Layer to send a PS_RDY Message to inform the Sink that the Source is ready to supply power at the negotiated level.
19	Protocol Layer creates the PS_RDY Message and passes it to Physical Layer.	
20		Physical Layer appends CRC and sends the PS_RDY Message.
21		
22		
23		Policy Engine receives the PS_RDY Message and begins to use the new power level.
8.3.3 State Diagrams
The state diagrams depict the behavior of the Policy Engine in different roles and scenarios. They cover operations involving Source, Sink, and Cable Plug states. Key states include:

PE_SRC_Ready: Source is ready to supply power.
PE_SNK_Ready: Sink is ready to receive power.
PE_CBL_Ready: Cable Plug is ready for data communication.
8.3.3.1 Source State Transitions
PE_SRC_Ready: This state is entered when the Source is ready to supply power.
Transitions to other states like PE_SNK_Ready or PE_CBL_Ready based on the interactions with Sink and Cable Plug.
8.3.3.2 Sink State Transitions
PE_SNK_Ready: This state is entered when the Sink is ready to receive power.
Transitions to other states like PE_SRC_Ready or PE_CBL_Ready based on interactions with Source and Cable Plug.
8.3.3.3 Cable Plug State Transitions
PE_CBL_Ready: This state is entered when the Cable Plug is ready for data communication.
Transitions to PE_SRC_Ready or PE_SNK_Ready based on the negotiation between Source and Sink.
8.3.3.4 State Diagrams for Power Role Swaps
The diagrams include state transitions for different roles like Source and Sink and scenarios like Power Role Swaps.


